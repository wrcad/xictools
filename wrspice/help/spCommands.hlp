
!!  ---------------------------------------------------------------
!!  Xic/WRspice Help System Database
!!  Copyright (C) Whiteley Research Inc. 2025.  All Rights Reserved
!!  WRspice help file
!!  ---------------------------------------------------------------

!!TAG WRspice

!!KEYWORD
spCommands.hlp
!!TITLE
spCommands.hlp
!!HTML 

!!SUBTOPICS
commands
controlcmds
cdump
strcmds
strcmp
strcicmp
strprefix
strciprefix
retval
uicmds
mapkey
savefonts
setcase
setfont
setrdb
tbupdate
wrupdate
shellcmds
alias
cd
echo
echof
historycomm
pause
pwd
rehash
set
shell
shift
unalias
unset
usrset 
iocmds
codeblock
dumpnodes
edit
listing
load
print
printf
return
sced
source
sprint
write
xeditorcom
simcmds
ac
alter
alterf
aspice
cache
check
dc
delete
destroy
devcnt
devload
devls
devmod
disto
dump
findlower
findrange
findupper
free 
jobs
mctrial
measure
noise
op
pz
reset
resume
rhostcom
rspice
run
save
sens
setcirc
show
state
status
step
stop
sweep
tf
trace
tran
vastep_cmd
where
datacmds
compose
cross
define
deftype
diff
display
fourier
let
linearize
pick
seed
setdim
setplot
setscale
settype
spec
undefine
unlet
misccmds
bug
help
helpreset
qhelp
quit
version


!! commands.tex 012224
!!KEYWORD
commands
!!TITLE
Built-in Commands
!!HTML 
    When a line is entered, it is interpreted in one of several
    ways.

    <ol>
    <li>An alias<br>
    First, it may be an <a href="alias">alias</a>, in which
    case the line is replaced with the result after alias
    substitution, and the line is re-parsed.

    <p>
    <li>A codeblock<br>
    Second, it may be the name of a <a href="codeblock">codeblock</a>,
    which is a user-defined command obtained from a script file, in
    which case the codeblock is executed.

    <p>
    <li>A command<br>
    Third, it may be a pre-defined command, in which case it is
    executed.

    <p>
    <li>An assignment, implicit <a href="let"><b>let</b></a><br>
    Fourth, it may be an assignment statement, which consists of a
    vector name, an '=' symbol, and an expression, in which case it is
    executed as if it were preceded by the word "<tt>let</tt>".

    <p>
    <li>A circuit filename, implicit <b>source</b><br>
    Fifth, it may be the name of a circuit file, in which case it is
    loaded as if with a <a href="source"><b>source</b></a> command, or
    it may be the name of a command script -- <i>WRspice</i> searches
    the current <a href="sourcepath"><tt>sourcepath</tt></a> (search
    path) for the file and executes it when it is found.  The effect
    of this is identical to the effect of "<tt>source</tt>
    <i>file</i>", except that the variables <tt>argc</tt> and
    <tt>argv</tt> are set. 

    <p>
    <li>An operating system command<br>
    Sixth, it may be a command known to the hosting operating system,
    in which case if the variable <a
    href="unixcom"><tt>unixcom</tt></a> is set, it is executed as
    though it were typed to the operating system shell.

    <p>
    <li>An expression list, implicit <b>print</b><br>
    Finally, if the command line can be recognized as a list of
    expressions, the <a href="print"><b>print</b></a> command is
    invoked on the line.
    </ol>
    
    The following table lists all built-in commands understood by
    <i>WRspice</i>.
    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">

    <tr><th colspan=2><a href="controlcmds">Control Structures</a></th>
    <tr><td><a href="cdump"><b>cdump</b></a></td>
      <td>Dump control structures for debugging</td></tr>

    <tr><th colspan=2><a href="strcmds">String Comparison and Global
     Return Value</a></th>
    <tr><td><a href="strcmp"><b>strcmp</b></a></td>
      <td>Compare strings</td></tr>
    <tr><td><a href="strcicmp"><b>strcicmp</b></a></td>
      <td>Compare strings, case insensitive</td></tr>
    <tr><td><a href="strprefix"><b>strprefix</b></a></td>
      <td>Check if string is prefix of another</td></tr>
    <tr><td><a href="strciprefix"><b>strciprefix</b></a></td>
      <td>Check if string is prefix of another, case insensitive</td></tr>
    <tr><td><a href="retval"><b>retval</b></a></td>
      <td>Set the global return value</td></tr>

    <tr><th colspan=2><a href="uicmds">User Interface Setup Commands</a></th>
    <tr><td><a href="mapkey"><b>mapkey</b></a></td>
      <td>Create keyboard mapping</td></tr>
    <tr><td><a href="savefonts"><b>savefonts</b></a></td>
      <td>Save current fonts to sgtrtup file</td></tr>
    <tr><td><a href="setcase"><b>setcase</b></a></td>
      <td>Check/set case sensitivity for name classes</td></tr>
    <tr><td><a href="setfont"><b>setfont</b></a></td>
      <td>Set graphical interface fonts</td></tr>
    <tr><td><a href="setrdb"><b>setrdb</b></a></td>
      <td>Set X resources</td></tr>
    <tr><td><a href="tbupdate"><b>tbupdate</b></a></td>
      <td>Save tool window configuration</td></tr>
    <tr><td><a href="wrupdate"><b>wrupdate</b></a></td>
      <td>Download/install program updates</td></tr>

    <tr><th colspan=2><a href="shellcmds">Shell Commands</a></th>
    <tr><td><a href="alias"><b>alias</b></a></td>
      <td>Create alias</td></tr>
    <tr><td><a href="cd"><b>cd</b></a></td>
      <td>Change directory</td></tr>
    <tr><td><a href="echo"><b>echo</b></a></td>
      <td>Print string</td></tr>
    <tr><td><a href="echof"><b>echof</b></a></td>
      <td>Print string to file</td></tr>
    <tr><td><a href="historycomm"><b>history</b></a></td>
      <td>Print command history</td></tr>
    <tr><td><a href="pause"><b>pause</b></a></td>
      <td>Pause script execution</td></tr>
    <tr><td><a href="pwd"><b>pwd</b></a></td>
      <td>Print the current working directory</td></tr>
    <tr><td><a href="rehash"><b>rehash</b></a></td>
      <td>Update command database</td></tr>
    <tr><td><a href="set"><b>set</b></a></td>
      <td>Set a variable</td></tr>
    <tr><td><a href="shell"><b>shell</b></a></td>
      <td>Execute operating system commands</td></tr>
    <tr><td><a href="shift"><b>shift</b></a></td>
      <td>Shift argument list</td></tr>
    <tr><td><a href="unalias"><b>unalias</b></a></td>
      <td>Destroy alias</td></tr>
    <tr><td><a href="unset"><b>unset</b></a></td>
      <td>Unset a variable</td></tr>
    <tr><td><a href="usrset"><b>usrset</b></a></td>
      <td>Print list of internally used variables</td></tr>

    <tr><th colspan=2><a href="iocmds">Input and Output Commands</a></th></tr>
    <tr><td><a href="codeblock"><b>codeblock</b></a></td>
      <td>Manipulate codeblocks</td></tr>
    <tr><td><a href="dumpnodes"><b>dumpnodes</b></a></td>
      <td>Print node voltages and branch currents</td></tr>
    <tr><td><a href="edit"><b>edit</b></a></td>
      <td>Edit text file</td></tr>
    <tr><td><a href="listing"><b>listing</b></a></td>
      <td>List current circuit</td></tr>
    <tr><td><a href="load"><b>load</b></a></td>
      <td>Read plot data from file</td></tr>
    <tr><td><a href="print"><b>print</b></a></td>
      <td>Print vectors</td></tr>
    <tr><td><a href="printf"><b>printf</b></a></td>
      <td>Print vectors to logging file</td></tr>
    <tr><td><a href="return"><b>return</b></a></td>
      <td>Return from script immediately, possibly with a value</td></tr>
    <tr><td><a href="sced"><b>sced</b></a></td>
      <td>Bring up <i>Xic</i> schematic editor</td></tr>
    <tr><td><a href="source"><b>source</b></a></td>
      <td>Read circuit or script input file</td></tr>
    <tr><td><a href="sprint"><b>sprint</b></a></td>
      <td>Print vectors to a string-type variable</td></tr>
    <tr><td><a href="write"><b>write</b></a></td>
      <td>Write data to rawfile</td></tr>
    <tr><td><a href="xeditorcom"><b>xeditor</b></a></td>
      <td>Edit text file</td></tr>

    <tr><th colspan=2><a href="simcmds">Simulation Commands</a></th></tr>
    <tr><td><a href="ac"><b>ac</b></a></td>
      <td>Perform ac analysis</td></tr>
    <tr><td><a href="alter"><b>alter</b></a></td>
      <td>Change circuit parameter</td></tr>
    <tr><td><a href="alterf"><b>alterf</b></a></td>
      <td>Dump alter list to Monte Carlo output file</td></tr>
    <tr><td><a href="aspice"><b>aspice</b></a></td>
      <td>Initiate asynchronous run</td></tr>
    <tr><td><a href="cache"><b>cache</b></a></td>
      <td>Manipulate subcircuit/model cache</td></tr>
    <tr><td><a href="check"><b>check</b></a></td>
      <td>Initiate range analysis</td></tr>
    <tr><td><a href="dc"><b>dc</b></a></td>
      <td>Initiate dc analysis</td></tr>
    <tr><td><a href="delete"><b>delete</b></a></td>
      <td>Delete watchpoint</td></tr>
    <tr><td><a href="destroy"><b>destroy</b></a></td>
      <td>Delete plot</td></tr>
    <tr><td><a href="devcnt"><b>devcnt</b></a></td>
      <td>Print device counts</td></tr>
    <tr><td><a href="devload"><b>devload</b></a></td>
      <td>Load device module</td></tr>
    <tr><td><a href="devls"><b>devls</b></a></td>
      <td>List available devices</td></tr>
    <tr><td><a href="devmod"><b>devmod</b></a></td>
      <td>Change device model levels</td></tr>
    <tr><td><a href="disto"><b>disto</b></a></td>
      <td>Initiate distortion analysis</td></tr>
    <tr><td><a href="dump"><b>dump</b></a></td>
      <td>Print circuit matrix</td></tr>
    <tr><td><a href="findlower"><b>findlower</b></a></td>
      <td>Find lower edge of operating range</td></tr>
    <tr><td><a href="findrange"><b>findrange</b></a></td>
      <td>Find edges of operating range</td></tr>
    <tr><td><a href="findupper"><b>findupper</b></a></td>
      <td>Find upper edge of operating range</td></tr>
    <tr><td><a href="free"><b>free</b></a></td>
      <td>Delete circuits and/or plots</td></tr>
    <tr><td><a href="jobs"><b>jobs</b></a></td>
      <td>Check asynchronous jobs</td></tr>
    <tr><td><a href="sweep"><b>loop</b></a></td>
      <td>Alias for sweep command</td></tr>
    <tr><td><a href="mctrial"><b>mctrial</b></a></td>
      <td>Run a Monte Carlo trial</td></tr>
    <tr><td><a href="measure"><b>measure</b></a></td>
      <td>Set up a measurement</td></tr>
    <tr><td><a href="noise"><b>noise</b></a></td>
      <td>Initiate noise analysis</td></tr>
    <tr><td><a href="op"><b>op</b></a></td>
      <td>Compute operating point</td></tr>
    <tr><td><a href="pz"><b>pz</b></a></td>
      <td>Initiate pole-zero analysis</td></tr>
    <tr><td><a href="reset"><b>reset</b></a></td>
      <td>Reset simulator</td></tr>
    <tr><td><a href="resume"><b>resume</b></a></td>
      <td>Resume run in progress</td></tr>
    <tr><td><a href="rhostcom"><b>rhost</b></a></td>
      <td>Identify remote SPICE host</td></tr>
    <tr><td><a href="rspice"><b>rspice</b></a></td>
      <td>Initiate remote SPICE run</td></tr>
    <tr><td><a href="run"><b>run</b></a></td>
      <td>Initiate simulation</td></tr>
    <tr><td><a href="save"><b>save</b></a></td>
      <td>List vectors to save during run</td></tr>
    <tr><td><a href="sens"><b>sens</b></a></td>
      <td>Initiate sensitivity analysis</td></tr>
    <tr><td><a href="setcirc"><b>setcirc</b></a></td>
      <td>Set current circuit</td></tr>
    <tr><td><a href="show"><b>show</b></a></td>
      <td>List parameters</td></tr>
    <tr><td><a href="state"><b>state</b></a></td>
      <td>Print circuit state</td></tr>
    <tr><td><a href="status"><b>status</b></a></td>
      <td>Print trace status</td></tr>
    <tr><td><a href="step"><b>step</b></a></td>
      <td>Advance simulator</td></tr>
    <tr><td><a href="stop"><b>stop</b></a></td>
      <td>Specify stop condition</td></tr>
    <tr><td><a href="sweep"><b>sweep</b></a></td>
      <td>Perform analysis over parameter range</td></tr>
    <tr><td><a href="tf"><b>tf</b></a></td>
      <td>Initiate transfer function analysis</td></tr>
    <tr><td><a href="trace"><b>trace</b></a></td>
      <td>Set trace</td></tr>
    <tr><td><a href="tran"><b>tran</b></a></td>
      <td>Initiate transient analysis</td></tr>
    <tr><td><a href="vastep_cmd"><b>vastep</b></a></td>
      <td>Advance Verilog simulator</td></tr>
    <tr><td><a href="where"><b>where</b></a></td>
      <td>Print nonconvergence information</td></tr>

    <tr><th colspan=2><a href="datacmds">
        Data Manipulation Commands</a></th></tr>
    <tr><td><a href="compose"><b>compose</b></a></td>
      <td>Create vector</td></tr>
    <tr><td><a href="cross"><b>cross</b></a></td>
      <td>Vector cross operation</td></tr>
    <tr><td><a href="define"><b>define</b></a></td>
      <td>Define a macro function</td></tr>
    <tr><td><a href="deftype"><b>deftype</b></a></td>
      <td>Define a data type</td></tr>
    <tr><td><a href="diff"><b>diff</b></a></td>
      <td>Compare plots and vectors</td></tr>
    <tr><td><a href="display"><b>display</b></a></td>
      <td>Print vector list</td></tr>
    <tr><td><a href="fourier"><b>fourier</b></a></td>
      <td>Perform spectral analysis</td></tr>
    <tr><td><a href="let"><b>let</b></a></td>
      <td>Create or assign vectors</td></tr>
    <tr><td><a href="linearize"><b>linearize</b></a></td>
      <td>Linearize vector data</td></tr>
    <tr><td><a href="pick"><b>pick</b></a></td>
      <td>Create vector from reduced data</td></tr>
    <tr><td><a href="seed"><b>seed</b></a></td>
      <td>Seed random number generator</td></tr>
    <tr><td><a href="setdim"><b>setdim</b></a></td>
      <td>Set current plot dimensions</td></tr>
    <tr><td><a href="setplot"><b>setplot</b></a></td>
      <td>Set current plot</td></tr>
    <tr><td><a href="setscale"><b>setscale</b></a></td>
      <td>Assign scale to vector</td></tr>
    <tr><td><a href="settype"><b>settype</b></a></td>
      <td>Assign type to vector</td></tr>
    <tr><td><a href="spec"><b>spec</b></a></td>
      <td>Perform spectral analysis</td></tr>
    <tr><td><a href="undefine"><b>undefine</b></a></td>
      <td>Undefine macro function</td></tr>
    <tr><td><a href="unlet"><b>unlet</b></a></td>
      <td>Undefine vector</td></tr>

    <tr><th colspan=2><a href="graphcmds">
      Graphical Output Commands</a></th></tr>
    <tr><td><a href="asciiplot"><b>asciiplot</b></a></td>
      <td>Generate line printer plot</td></tr>
    <tr><td><a href="combine"><b>combine</b></a></td>
      <td>Combine plots</td></tr>
    <tr><td><a href="hardcopy"><b>hardcopy</b></a></td>
      <td>Send plot to printer</td></tr>
    <tr><td><a href="iplot"><b>iplot</b></a></td>
      <td>Plot during simulation</td></tr>
    <tr><td><a href="mplot"><b>mplot</b></a></td>
      <td>Plot range analysis output</td></tr>
    <tr><td><a href="plot"><b>plot</b></a></td>
      <td>Plot simulation results</td></tr>
    <tr><td><a href="plotwin"><b>plotwin</b></a></td>
      <td>Pop down and destroy plot windows</td></tr>
    <tr><td><a href="xgraph"><b>xgraph</b></a></td>
      <td>Plot simulation results using <tt>xgraph</tt></td></tr>

    <tr><th colspan=2><a href="misccmds">Miscellaneous Commands</a></th></tr>
    <tr><td><a href="bug"><b>bug</b></a></td>
      <td>Submit bug report</td></tr>
    <tr><td><a href="help"><b>help</b></a></td>
      <td>Enter help system</td></tr>
    <tr><td><a href="helpreset"><b>helpreset</b></a></td>
      <td>Clear help system cache</td></tr>
    <tr><td><a href="qhelp"><b>qhelp</b></a></td>
      <td>Print command summaries</td></tr>
    <tr><td><a href="quit"><b>quit</b></a></td>
      <td>Exit program</td></tr>
    <tr><td><a href="rusage"><b>rusage</b></a></td>
      <td>Print resource usage statistics</td></tr>
    <tr><td><a href="stats"><b>stats</b></a></td>
      <td>Print resource usage statistics</td></tr>
    <tr><td><a href="version"><b>version</b></a></td>
      <td>Print program version</td></tr>

    </table>
!!LATEX commands commands.tex
When a line is entered, it is interpreted in one of several ways. 

\begin{enumerate}
\item{An alias}\\
First, it may be an alias, in which case the line is replaced with the
result after alias substitution, and the line is re-parsed.

\item{A codeblock}\\
Second, it may be the name of a codeblock, which is a user-defined
command obtained from a script file, in which case the codeblock is
executed. 

\item{A command}\\
Third, it may be a pre-defined command, in which case it is executed. 

\item{An assignment, implivit {\cb let}}\\
Fourth, it may be an assignment statement, which consists of a vector
name, an `{\vt =}' symbol, and an expression, in which case it is
executed as if it were preceded by the word ``{\vt let}''.

\item{A circuit filename, implicit {\cb source}}\\
Fifth, it may be the name of a circuit file, in which case it is
loaded as if with a {\cb source} command, or it may be the name of a
command script -- {\WRspice} searches the current {\et sourcepath}
(search path) for the file and executes it when it is found.  The
effect of this is identical to the effect of ``{\vt source} {\it
file}'', except that the variables {\et argc} and {\et argv} are set.

\item{An opeerating system command}\\
Sixth, it may be a command known to the hosting operating system, in
which case if the variable {\et unixcom} is set, it is executed as
though it were typed to the operating system shell.

\item{An expression list}\\
Finally, if the command line can be recognized as a list of
expressions, the {\cb print} command is invoked on the line.
\end{enumerate}

The following table lists all built-in commands understood by
{\WRspice}.
\newpage

\begin{longtable}{|l|l|}\hline
\multicolumn{2}{|c|}{\bf Control Structures}\\ \hline
\cb cdump & Dump control structures for debugging\\ \hline
\hline
\multicolumn{2}{|c|}{\bf String Comparison and Global Return Value}\\ \hline
\cb strcmp & Compare strings\\ \hline
\cb strcicmp & Compare strings, case insensitive\\ \hline
\cb strprefix & Check if string is prefix of another\\ \hline
\cb strciprefix & Check if string is prefix of another, case insensitive\\ \hline
\cb retval & Set the global return value\\ \hline
\hline
\multicolumn{2}{|c|}{\bf User Interface Setup Commands}\\ \hline
\cb mapkey & Create keyboard mapping\\ \hline
\cb savefonts & Save current fonts to startup file\\ \hline
\cb setcase & Check/set case sensitivity for name classes\\ \hline
\cb setfont & Set graphical interface fonts\\ \hline
\cb setrdb & Set X resources\\ \hline
\cb tbupdate & Save tool window configuration\\ \hline
\cb wrupdate & Download/install program updates\\ \hline
\hline
\multicolumn{2}{|c|}{\bf Shell Commands}\\ \hline
\cb alias & Create alias\\ \hline
\cb cd & Change directory\\ \hline
\cb echo & Print string\\ \hline
\cb echof & Print string to file\\ \hline
\cb history & Print command history\\ \hline
\cb pause & Pause script execution\\ \hline
\cb pwd & Print the current working dirsctory\\ \hline
\cb rehash & Update command database\\ \hline
\cb set & Set a variable\\ \hline
\cb shell & Execute operating system commands\\ \hline
\cb shift & Shift argument list\\ \hline
\cb unalias & Destroy alias\\ \hline
\cb unset & Unset a variable\\ \hline
\cb usrset & Print list of internally used variables\\ \hline
\hline
\multicolumn{2}{|c|}{\bf Input and Output Commands}\\ \hline
\cb codeblock & Manipulate codeblocks\\ \hline
\cb dumpnodes & Print node voltages and branch currents\\ \hline
\cb edit & Edit text file\\ \hline
\cb listing & List current circuit\\ \hline
\cb load & Read plot data from file\\ \hline
\cb print & Print vectors\\ \hline
\cb printf & Print vectors to logging file\\ \hline
\cb return & Return from script immediately, possibly with a value\\ \hline
\cb sced & Bring up {\Xic} schematic editor\\ \hline
\cb source & Read circuit or script input file\\ \hline
\cb sprint & Print vectors to a string-type variable\\ \hline
\cb write & Write data to rawfile\\ \hline
\cb xeditor & Edit text file\\ \hline
\hline
\multicolumn{2}{|c|}{\bf Simulation Commands}\\ \hline
\cb ac & Perform ac analysis\\ \hline
\cb alter & Change circuit parameter\\ \hline
\cb alterf & Dump alter list to Monte Carlo output file\\ \hline
\cb aspice & Initiate asynchronous run\\ \hline
\cb cache & Manipulate subcircuit/model cache\\ \hline
\cb check & Initiate range analysis\\ \hline
\cb dc & Initiate dc analysis\\ \hline
\cb delete & Delete watchpoint\\ \hline
\cb destroy & Delete plot\\ \hline
\cb devcnt & Print device counts\\ \hline
\cb devload & Load device module\\ \hline
\cb devls & List available devices\\ \hline
\cb devmod & Change device model levels\\ \hline
\cb disto & Initiate distortion analysis\\ \hline
\cb dump & Print circuit matrix\\ \hline
\cb findlower & Find lower edge of operating range\\ \hline
\cb findrange & Find edges of operating range\\ \hline
\cb findupper & Find upper edge of operating range\\ \hline
\cb free & Delete circuits and/or plots\\ \hline
\cb jobs & Check asynchronous jobs\\ \hline
\cb loop & Alias for sweep command\\ \hline
\cb mctrial & Run a Monte Carlo trial\\ \hline
\cb measure & Set up a measurement\\ \hline
\cb noise & Initiate noise analysis\\ \hline
\cb op & Compute operating point\\ \hline
\cb pz & Initiate pole-zero analysis\\ \hline
\cb reset & Reset simulator\\ \hline
\cb resume & Resume run in progress\\ \hline
\cb rhost & Identify remote SPICE host\\ \hline
\cb rspice & Initiate remote SPICE run\\ \hline
\cb run & Initiate simulation\\ \hline
\cb save & List vectors to save during run\\ \hline
\cb sens & Initiate sensitivity analysis\\ \hline
\cb setcirc & Set current circuit\\ \hline
\cb show & List parameters\\ \hline
\cb state & Print circuit state\\ \hline
\cb status & Print trace status\\ \hline
\cb step & Advance simulator\\ \hline
\cb stop & Specify stop condition\\ \hline
\cb sweep & Perform analysis over parameter range\\ \hline
\cb tf & Initiate transfer function analysis\\ \hline
\cb trace & Set trace\\ \hline
\cb tran & Initiate transient analysis\\ \hline
\cb vastep & Advance Verilog simulator\\ \hline
\cb where & Print nonconvergence information\\ \hline
\hline
\multicolumn{2}{|c|}{\bf Data Manipulation Commands}\\ \hline
\cb compose & Create vector\\ \hline
\cb cross & Vector cross operation\\ \hline
\cb define & Define a macro function\\ \hline
\cb deftype & Define a data type\\ \hline
\cb diff & Compare plots and vectors\\ \hline
\cb display & Print vector list\\ \hline
\cb fourier & Perform spectral analysis\\ \hline
\cb let & Create or assign vectors\\ \hline
\cb linearize & Linearize vector data\\ \hline
\cb pick & Create vector from reduced data\\ \hline
\cb seed & Seed random number generator\\ \hline
\cb setdim & Set current plot dimensions\\ \hline
\cb setplot & Set current plot\\ \hline
\cb setscale & Assign scale to vector\\ \hline
\cb settype & Assign type to vector\\ \hline
\cb spec & Perform spectral analysis\\ \hline
\cb undefine & Undefine macro function\\ \hline
\cb unlet & Undefine vector\\ \hline
\hline
\multicolumn{2}{|c|}{\bf Graphical Output Commands}\\ \hline
\cb asciiplot & Generate line printer plot\\ \hline
\cb combine & Combine plots\\ \hline
\cb hardcopy & Send plot to printer\\ \hline
\cb iplot & Plot during simulation\\ \hline
\cb mplot & Plot range analysis output\\ \hline
\cb plot & Plot simulation results\\ \hline
\cb plotwin & Pop down and destroy plot windows\\ \hline
\cb xgraph & Plot simulation results using {\vt xgraph}\\ \hline
\hline
\multicolumn{2}{|c|}{\bf Miscellaneous Commands}\\ \hline
\cb bug & Submit bug report\\ \hline
\cb help & Enter help system\\ \hline
\cb helpreset & Clear help system cache\\ \hline
\cb qhelp & Print command summaries\\ \hline
\cb quit & Exit program\\ \hline
\cb rusage & Print resource usage statistics\\ \hline
\cb stats & Print resource usage statistics\\ \hline
\cb version & Print program version\\ \hline
\end{longtable}
!!

!!REDIRECT repeat       controlcmds#repeat
!!REDIRECT while        controlcmds#while
!!REDIRECT dowhile      controlcmds#dowhile
!!REDIRECT foreach      controlcmds#foreach
!!REDIRECT if           controlcmds#if
!!REDIRECT else         controlcmds#if
!!REDIRECT label        controlcmds#label
!!REDIRECT goto         controlcmds#goto
!!REDIRECT begin        controlcmds#goto
!!REDIRECT continue     controlcmds#continue
!!REDIRECT break        controlcmds#break
!!REDIRECT end          controlcmds#end
!!REDIRECT endif        controlcmds#end
!!REDIRECT endwhile     controlcmds#end
!!REDIRECT enddowhile   controlcmds#end
!!REDIRECT endforeach   controlcmds#end
!!REDIRECT endrepeat    controlcmds#end

!! ----------------------------------------------------------------------------
!! commands.tex 012209
!!KEYWORD
controlcmds
!!TITLE
Control Structures
!!HTML 
    Control structures operate on expressions involving vectors,
    constants, and ($-substituted) shell variables.  A non-zero result
    (of any element, if the length is greater than 1) indicates
    ``true''.

    <p>
    Although control structures are most commonly used in command
    scripts, they are also allowed from the command line.  While a
    block is active, the command prompt changes to one or more
    "<tt>></tt>" characters, the number of which represents the
    current depth into the control commands.  As with a UNIX shell,
    control structures can be used from the command line to repeat one
    or more commands.

    <p>
    The following control structures are available:
    <a name="repeat"></a>
    <dl>
    <dt><b>repeat block</b><dd>
 
    <p>
    <tt>repeat</tt> [<i>number</i>]
    <blockquote>
          statement<br>
          ...<br>
    </blockquote>
    <tt>end</tt>

    <p>
    Execute the statements in the block defined by the <b>repeat</b>
    line and the corresponding <b>end</b> statement <i>number</i>
    times, or indefinitely if no <i>number</i> is given.  The
    <i>number</i> must be a constant, or a shell variable reference
    that evaluates to a constant, which may be a vector reference in
    the <tt>$&</tt> form.  A vector name is not valid.
    </dl>

    <a name="while"></a>
    <dl>
    <dt><b>while block</b><dd>
 
    <p>
    <tt>while</tt> <i>condition</i>
    <blockquote>
          statement<br>
          ...<br>
    </blockquote>
    <tt>end</tt>

    <p>
    The <b>while</b> line, together with a matching <b>end</b>
    statement, defines a block of commands that are executed while the
    <i>condition</i> remains true.  The <i>condition</i> is an
    expression which is considered true if it evaluates to a nonzero
    value, or if a vector, any component is nonzero.  The test is
    performed at the top of the loop, so that if the <i>condition</i>
    is initially false, the statements are not executed.
    </dl>
 
    <a name="dowhile"></a>
    <dl>
    <dt><b>dowhile block</b><dd>

    <p>
    <tt>dowhile</tt> <i>condition</i>
    <blockquote>
          statement<br>
          ...<br>
    </blockquote>
    <tt>end</tt>

    <p>
    The <b>dowhile</b> line, together with a matching <b>end</b>
    statement, defines a block of commands that are executed while the
    <i>condition</i> remains true.  The <i>condition</i> is an
    expression which is considered true if it evaluates to a nonzero
    value, or if a vector, any component is nonzero.  Unlike the
    <b>while</b> statement, the test is performed at the bottom of the
    loop - so that the loop executes at least once.
    </dl>
 
    <a name="foreach"></a>
    <dl>
    <dt><b>foreach block</b><dd>

    <p>
    <tt>foreach</tt> <i>var value</i> ...
    <blockquote>
          statement<br>
          ...<br>
    </blockquote>
    <tt>end</tt>

    <p>
    The <b>foreach</b> statement opens a block which will be executed
    once for each <i>value</i> given.  Each time through, the
    <i>var</i> will be set to successive <i>value</i>s.  After the
    loop is exited it will have the last value that was assigned to
    it.  The <i>var</i> can be accessed in the loop with the
    <tt>$var</tt> notation, i.e., it should be treated as a shell
    variable, not a vector.  This is set to each <i>value</i> as a
    text item.
    </dl>
 
    <a name="if"></a>
    <dl>
    <dt><b>if block</b><dd>

    <p>
    <tt>if</tt> <i>condition</i>
    <blockquote>
          statement<br>
          ...<br>
    </blockquote>
    <tt>else</tt>
    <blockquote>
          statement<br>
          ...<br>
    </blockquote>
    <tt>end</tt>

    <p>
    If the <i>condition</i> is nonzero then the first set of
    statements is executed, otherwise the second set.  The
    <b>else</b> and the second set of statements may be omitted.
    </dl>
 
    <a name="label"></a>
    <dl>
    <dt><b>label statement</b><dd>

    <p>
    <tt>label</tt> <i>labelname</i>

    <p>
    This defines a label which can be used as an argument to a
    <b>goto</b> statement.
    </dl>
 
    <a name="goto"></a>
    <dl>
    <dt><b>goto statement</b><dd>

    <p>
    <tt>goto</tt> <i>label</i>

    <p>
    If there is a <b>label</b> statement defining the <i>label</i> in
    the block or an enclosing block, control is transferred there.  If
    the <b>goto</b> is used outside of a block, the label must appear
    ahead of the goto (i.e., a forward <b>goto</b> may occur only
    within a block.  There is a <b>begin</b> macro pre-defined as
    "<tt>if 1</tt>" which may be used if forward label references are
    required outside of a block construct.
    </dl>
 
    <a name="continue"></a>
    <dl>
    <dt><b>continue statement</b><dd>

    <p>
    <tt>continue</tt> [<i>number</i>]

    <p>
    If there is a <b>while</b>, <b>dowhile</b>, <b>foreach</b>, or
    <b>repeat</b> block enclosing this statement, the next iteration
    begins immediately and control passes to the top of the block. 
    Otherwise an error results.  If a <i>number</i> is given, that
    many surrounding blocks are continued.  If there are not that many
    blocks, an error results.
    </dl>

    <a name="break"></a>
    <dl>
    <dt><b>break statement</b><dd>

    <p>
    <tt>break</tt> [<i>number</i>]

    <p>
    If there is a <b>while</b>, <b>dowhile</b>, <b>foreach</b>, or
    <b>repeat</b> block enclosing this statement, control passes out
    of the block.  Otherwise an error results.  If a <i>number</i> is
    given, that number of enclosing blocks are exited.  If there are
    not that many blocks, an error results.
    </dl>
 
    <a name="end"></a>
    <dl>
    <dt><b>end statement</b><dd>

    <p>
    <tt>end</tt>

    <p>
    This statement terminates a block.  It is an error for an
    <b>end</b> to appear without a matching <b>if</b>, <b>while</b>,
    <b>dowhile</b>, <b>foreach</b>, or <b>repeat</b> statement.  The
    keywords <tt>endif</tt>, <tt>endwhile</tt>, <tt>enddowhile</tt>,
    <tt>endforeach</tt>, and <tt>endrepeat</tt> are internally aliased
    to <tt>end</tt>.
    </dl>
 
    <p>
    Control structures may be nested.  When a block is entered and the
    input is from the keyboard, the prompt becomes a number of >'s
    equalling the depth of blocks the user has entered.  The current
    control structures may be examined with the debugging command <a
    href="cdump"><b>cdump</b></a>.  The <b>cdump</b> command prints
    out the contents of the currently active control structures.
!!LATEX controlcmds commands.tex
Control structures operate on expressions involving vectors,
constants, and ({\vt \$}-substituted) shell variables.  A non-zero
result (of any element, if the length is greater than 1) indicates
``true''.  The following control structures are available:

Although control structures are most commonly used in command scripts,
they are also allowed from the command line.  While a block is active,
the command prompt changes to one or more ``$>$'' characters, the
number of which represents the current depth into the control
commands.  As with a UNIX shell, control structures can be used from
the command line to repeat one or more commands.

\begin{description}
\item{{\bf repeat} block}\\
\index{repeat block}

\begin{quote}
{\vt {\bf repeat} [{\it number\/}]}\\
\quad {\it statement}\\
\quad {...}\\
{\bf\vt end}
\end{quote}
Execute the statements in the block defined by the {\et repeat} line
and the corresponding {\et end} statement {\it number\/} times, or
indefinitely if no {\it number} is given.  The {\it number} must be a
constant, or a shell variable reference that evaluates to a constant,
which may be a vector reference in the {\vt \$\&} form.  A vector name
is not valid.

\item{{\bf while} block}\\
\index{while block}

\begin{quote}
{\bf\vt while} {\it condition}\\
\quad {\it statement}\\
\quad {...}\\
{\bf\vt end}
\end{quote}
The {\et while} line, together with a matching {\et end} statement,
defines a block of commands that are executed while the {\it
condition} remains true.  The {\it condition} is an expression which
is considered true if it evaluates to a nonzero value, or if a vector,
any component is nonzero.  The test is performed at the top of the
loop, so that if the {\it condition} is initially false, the
statements are not executed.

\item{{\bf dowhile} block}\\
\index{dowhile block}

\begin{quote}
{\bf\vt dowhile} {\it condition}\\
\quad {\it statement}\\
\quad {...}\\
{\bf\vt end}
\end{quote}
The {\et dowhile} line, together with a matching {\et end} statement,
defines a block of commands that are executed while the {\it
condition} remains true.  The {\it condition} is an expression which
is considered true if it evaluates to a nonzero value, or if a vector,
any component is nonzero.  Unlike the {\et while} statement, the test
is performed at the bottom of the loop -- so that the loop executes at
least once.

\item{{\bf foreach} block}\\
\index{foreach block}

\begin{quote}
{\bf\vt foreach} {\it var value\/} ...\\
\quad {\it statement}\\
\quad {...}\\
{\bf\vt end}
\end{quote}
The {\et foreach} statement opens a block which will be executed once
for each {\it value} given.  Each time through, the {\it var} will be
set to successive {\it value\/}s.  After the loop is exited it will
have the last value that was assigned to it.  The {\it var} can be
accessed in the loop with the {\vt \$var} notation, i.e., it should be
treated as a shell variable, not a vector.  This is set to each {\it
value} as a text item.

\item{{\bf if} block}\\
\index{if block}

\begin{quote}
{\bf\vt if} {\it condition}\\
\quad {\it statement}\\
\quad {...}\\
{\bf\vt else}\\
\quad {\it statement}\\
\quad {...}\\
{\bf\vt end}
\end{quote}
If the {\it condition\/} is non-zero then the first set of statements is
executed, otherwise the second set.  The {\et else} and the second set of
statements may be omitted.

\item{{\bf label} statement}\\
\index{label statement}

\begin{quote}
{\bf\vt label} {\it labelname}
\end{quote}
This defines a label which can be used as an argument to a {\et goto}
statememt.

\item{{\bf goto} statement}\\
\index{goto statement}

\begin{quote}
{\bf\vt goto} {\it label}
\end{quote}
If there is a {\et label} statement defining the {\it label} in the
block or an enclosing block, control is transfered there.  If the {\et
goto} is used outside of a block, the label must appear ahead of the
{\et goto} (i.e., a forward {\et goto} may occur only within a block). 
There is a {\et begin} macro pre-defined as ``{\vt if 1}'' which may
be used if forward label references are required outside of a block
construct.

\item{{\bf continue} statement}\\
\index{continue statement}

\begin{quote}
{\bf\vt continue [{\it number}]}
\end{quote}
If there is a {\et while}, {\et dowhile}, {\et foreach} or {\et
repeat} block enclosing this statement, the next iteration begins
immediately and control passes to the top of the block.  Otherwise an
error results.  If a {\it number} is given, that many surrounding
blocks are continued.  If there are not that many blocks, an error
results.

\item{{\bf break} statement}\\
\index{break statement}

\begin{quote}
{\bf\vt break [{\it number}]}
\end{quote}
If there is a {\et while}, {\et dowhile}, {\et foreach}, or {\et
repeat} block enclosing this statement, control passes out of the
block.  Otherwise an error results.  If a {\it number} is given, that
many surrounding blocks are exited.  If there are not that many
blocks, an error results.

\item{{\bf end} statement}\\
\index{end statement}

\begin{quote}
{\bf\vt end}
\end{quote}
This statement terminates a block.  It is an error for an {\et end} to
appear without a matching {\et if}, {\et while}, {\et dowhile}, {\et
foreach}, or {\et repeat} statement.  The keywords {\et endif}, {\et
endwhile}, {\et enddowhile}, {\et endforeach}, and {\et endrepeat} are
internally aliased to {\et end}.
\end{description}

Control structures may be nested.  When a block is entered and the
input is from the keyboard, the prompt becomes a number of $>$'s
equalling the depth of blocks the user has entered.  The current
control structures may be examined with the debugging command {\cb
cdump}.

!!SEEALSO
commands

!! commands.tex: 012709
!!KEYWORD
cdump
!!TITLE
cdump command
!!HTML 
    command: <tt>cdump</tt>
 
    <p>
    The <tt>cdump</tt> command prints out the contents of the
    currently active control structures.  The command takes no
    arguments.  It is intended primarily for debugging.
!!LATEX cdump commands.tex
The {\cb cdump} command prints out the contents of the currently
active control structures.  The command takes no arguments.  It is
intended primarily for debugging.
 
!!SEEALSO
controlcmds

!! ----------------------------------------------------------------------------
!! commands.tex: 030519
!!KEYWORD
strcmds
!!TITLE
String Comparison and Global Return Value
!!HTML 
    These commands are used for string comparison, and for setting the
    global return value.  The global return value is an internal
    global variable that can be set and queried from any script (with
    the <a href="variablesub"><tt>$?</tt></a> construct).  This can be
    used to pass numeric data from a script, but one must take
    care that the value is not overwritten before use, as its scope is
    global.  The string comparison functions return their comparison
    result in the global return value.  There is no native string data
    type in the scripting language, and the commands here provide
    basic string support.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2><a href="strcmds">String Comparison and Global
     Return Value</a></th>
    <tr><td><a href="strcmp"><b>strcmp</b></a></td>
      <td>Compare strings</td></tr>
    <tr><td><a href="strcicmp"><b>strcicmp</b></a></td>
      <td>Compare strings, case insensitive</td></tr>
    <tr><td><a href="strprefix"><b>strprefix</b></a></td>
      <td>Check is string is prefix of another</td></tr>
    <tr><td><a href="strciprefix"><b>strciprefix</b></a></td>
      <td>Check is string is prefix of another, case insensitive</td></tr>
    <tr><td><a href="retval"><b>retval</b></a></td>
      <td>Set the "global return value"</td></tr>
    </table>
!!LATEX strcmds commands.tex
These commands are used for string comparison, and for setting the
global return value.  The global return value is an internal global
variable that can be set and queried from any script (with the {\vt
\$?} construct).  This can be used to pass numeric data from a script,
but one must take care that the value is not overwritten before use,
as its scope is global.  The string comparison functions return their
comparison result in the global return value.  There is no native
string data type in the scripting language, and the commands here
provide basic string support.

\begin{tabular}{|l|l|}\hline
\cb strcmp & Compare strings\\ \hline
\cb strcicmp & Compare strings, case insensitive\\ \hline
\cb strprefix & Check if string is prefix of another\\ \hline
\cb strciprefix & Check if string is prefix of another, case insensitive\\ \hline
\cb retval & Set the global return value\\ \hline
\end{tabular}

!!SEEALSO
commands

!! commands.tex 080816
!!KEYWORD
strcmp
!!TITLE
strcmp command
!!HTML 
    command: <tt>strcmp</tt> [<i>varname</i>] <i>string1 string2</i>

    <p>
    The <b>strcmp</b> command is used for string comparison in control
    structures.  This supports the original Spice3 <b>strcmp</b>
    which returns is value in a given variable, and the <i>WRspice</i>
    convention where the comparison value is returned in the global
    return value (accessible with "<tt>$?</tt>").

    <p>
    In either case, the comparison value is a number that is less
    than, equal to, or greater than zero according to whether
    <i>string1</i> is lexically before, equal to, or after
    <i>string2</i>.

    <p>
    If three arguments are given, the first argument is taken as the
    name of a variable which is set to the comparison value.  This
    convention is supported for backwards compatibility, of this
    function only.  Otherwise, the global return value will be set to
    this value.  The other arguments are literal strings.

    <p>
    Example
    <blockquote><tt>
    .control<br>
    set str1="abcd efgh"<br>
    set str2="bbcd efgh"<br>
    strcmp "$str1" "$str2"<br>
    if ($? &#60; 0)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;echo "$str1" ahead of "$str2"<br>
    else<br>
    if ($? = 0)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;echo strings are the same<br>
    else<br>
    &nbsp;&nbsp;&nbsp;&nbsp;echo "$str1" after "$str2"<br>
    end<br>
    end<br>
    .endc
    </tt></blockquote>
!!LATEX strcmp commands.tex
The {\cb strcmp} command is used for string comparison in control
structures.
\begin{quote}\vt
strcmp [{\it varname\/}] {\it string1 string2}
\end{quote}
This supports the original Spice3 {\cb strcmp} which returns is value
in a given variable, and the {\WRspice} convention where the
comparison value is returned in the global return value (accessible
with ``{\vt \$?}'').

In either case, the comparison value is a number that is less than,
equal to, or greater than zero according to whether {\it string1} is
lexically before, equal to, or after {\it string2\/}.

If three arguments are given, the first argument is taken as the name
of a variable which is set to the comparison value.  This convention
is supported for backwards compatibility, of this function only. 
Otherwise, the global return value will be set to this value.  The
other arguments are literal strings.

Example
\begin{quote}\vt
.control\\
set str1="abcd efgh"\\
set str2="bbcd efgh"\\
strcmp "\$str1" "\$str2"\\
if (\$? < 0)\\
\hspace*{2em}echo "\$str1" ahead of "\$str2"\\    
else\\
if (\$? = 0)\\
\hspace*{2em}echo strings are the same\\    
else\\
\hspace*{2em}echo "\$str1" after "\$str2"\\    
end\\
end\\
.endc
\end{quote}

!!SEEALSO
strcmds

!! commands.tex 080816
!!KEYWORD
strcicmp
!!TITLE
strcicmp command
!!HTML 
    command: <tt>strcmp</tt> <i>string1 string2</i>

    <p>
    The <b>strcicmp</b> command is similar to <a
    href="strcmp"><b>strcmp</b></a>, however the comparison result is
    case-insensitive, and the Spice3 return convention is not
    supported.  The global return value (accessible as "<tt>$?</tt>")
    is set to the comparison value.  The comparison value is a number
    that is less than, equal to, or greater than zero according to
    whether <i>string1</i> is lexically before, equal to, or after
    <i>string2</i>.  The two arguments are literal strings.
!!LATEX strcicmp commands.tex
The {\cb strcicmp} command is used for string comparison in control
structures.
\begin{quote}\vt
strcicmp {\it string1 string2}
\end{quote}
The {\cb strcicmp} command is similar to {\cb strcmp}, however the
comparison result is case-insensitive, and the Spice3 return
convention is not supported.  The global return value (accessible as
``{\vt \$?}'') is set to the comparison value.  The comparison value
is a number that is less than, equal to, or greater than zero
according to whether {\it string1} is lexically before, equal to, or
after {\it string2}.  The two arguments are literal strings.

!!SEEALSO
strcmds

!! commands.tex 080816
!!KEYWORD
strprefix
!!TITLE
strprefix command
!!HTML 
    command: <tt>strprefix</tt> <i>string1 string2</i>

    <p>
    The <b>strprefix</b> command will set the global return value to
    one if <i>string1</i> is a prefix of <i>string2</i>, or zero if
    not.
!!LATEX strprefix commands.tex
The {\cb strprefix} command will set the global return value to one if
{\it string1} is a prefix of {\it string2\/}, or zero if not.
\begin{quote}\vt
strprefix {\it string1 string2}
\end{quote}

!!SEEALSO
strcmds

!! commands.tex 080816
!!KEYWORD
strciprefix
!!TITLE
strciprefix command
!!HTML 
    command: <tt>strciprefix</tt> <i>string1 string2</i>

    <p>
    The <b>strciprefix</b> command will set the global return value to
    one if <i>string1</i> is a case-insensitive prefix of
    <i>string2</i>, or zero if not.
!!LATEX strciprefix commands.tex
The {\cb strciprefix} command will set the global return value to one
if {\it string1} is a case-insensitive prefix of {\it string2\/}, or
zero if not.
\begin{quote}\vt
strciprefix {\it string1 string2}
\end{quote}

!!SEEALSO
strcmds

!! commands.tex 030519
!!KEYWORD
retval
!!TITLE
retval command
!!HTML 
    command: <tt>retval</tt> <i>value</i>

    <p>
    The <b>retval</b> command will set the global return value to the
    numeric value given.  This can be used to pass a value back from a
    script.  The value is initialized to zero whenever a script is
    executed, so that zero is the default return value.  The global
    return value is a global value available in any script and the
    command prompt line, and is accessed with the special variable
    name <a href="variablesub"><tt>$?</tt></a>.  The global return
    value is set by this function and the string comparison functions,
    and optionally by the <a href="return"><b>return</b></a> function.
!!LATEX retval commands.tex
The {\cb retval} command will set the global return value to the numeric
value given.
\begin{quote}\vt
retval {\it value}
\end{quote}
This can be used to pass a value back from a script.  The value is
initialized to zero whenever a script is executed, so that zero is the
default return value.  The global return value is a global value
available in any script and the command prompt line, and is accessed
with the special variable name {\vt \$?}.  The global return value is
set by this function and the string comparison functions, and
optionally by the {\cb return} function.

!!SEEALSO
strcmds

!! ----------------------------------------------------------------------------
!! commands.tex: 102817
!!KEYWORD
uicmds
!!TITLE
User Interface Setup Commands
!!HTML 
    These commands perform setup and control of aspects of the user
    interface, both graphical and non-graphical.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2>User Interface Setup Commands</th></tr>
    <tr><td><a href="mapkey"><b>mapkey</b></a></td>
      <td>Create keyboard mapping</td></tr>
    <tr><td><a href="savefonts"><b>savefonts</b></a></td>
      <td>Save current fonts to startup file</td></tr>
    <tr><td><a href="setcase"><b>setcase</b></a></td>
      <td>Check/set case sensitivity for name classes</td></tr>
    <tr><td><a href="setfont"><b>setfont</b></a></td>
      <td>Set graphical interface fonts</td></tr>
    <tr><td><a href="setrdb"><b>setrdb</b></a></td>
      <td>Set X resources</td></tr>
    <tr><td><a href="tbupdate"><b>tbupdate</b></a></td>
      <td>Save tool window configuration</td></tr>
    <tr><td><a href="wrupdate"><b>wrupdate</b></a></td>
      <td>Download/install program updates</td></tr>
    </table>
!!LATEX uicmds commands.tex
These commands perform setup and control of aspects of the user
interface, both graphical and non-graphical.

\begin{tabular}{|l|l|}\hline
\multicolumn{2}{|c|}{Uset Interface Setup Commands}\\ \hline
\cb mapkey & Create keyboard mapping\\ \hline
\cb savefonts & Save current fonts to startup file\\ \hline
\cb setcase & Check/set case sensitivity for name classes\\ \hline
\cb setfont & Set graphical interface fonts\\ \hline
\cb setrdb & Set X resources\\ \hline
\cb tbupdate & Save tool window configuration\\ \hline
\cb wrupdate & Download/install program updates\\ \hline
\end{tabular}

!!SEEALSO
commands

!! commands.tex 011909
!!KEYWORD
mapkey
!!TITLE
mapkey command
!!HTML 
    command: <tt>mapkey</tt> [ <tt>-r</tt> [<i>filename</i>] |
      <tt>-w</tt> [<i>filename</i>] | <i>keyname data</i> ]

    <p>
    The <b>mapkey</b> command provides limited keyboard mapping
    support.  Only the keys that are used for <a
    href="editing">command line editing</a> are mappable.  This is to
    account for "strange" terminals that may not send the expected
    data when a key is pressed.

    <p>
    The following keys can be mapped:
    <blockquote> <b>
    Ctrl-A<br>
    Ctrl-D<br>
    Ctrl-E<br>
    Ctrl-K<br>
    Ctrl-U<br>
    Ctrl-V<br>
    Tab<br>
    Backspace<br>
    Delete<br>
    LeftArrow<br>
    RightArrow<br>
    UpArrow<br>
    DownArrow<br>
    </b></blockquote>
    Of these, the arrow keys and <b>Delete</b> are most likely to need
    remapping.

    <p>
    If no argument is given, the user is prompted to press each of
    these keys, and the internal map is updated.  After doing this,
    the keys should have their expected effect when pressed while
    entering a <i>WRspice</i> command.

    <p>
    If "<tt>-w</tt> [<i>filename</i>]" is given, the present internal
    map will be saved in the named file, or "<tt>wrs_keymap</tt>" in
    the current directory if no <i>filename</i> is given.

    <p>
    If "<tt>-r</tt> [<i>filename</i>]" is given, the file will be read
    as a key mapping file, and the internal map will be updated.  The
    <i>filename</i>, if not given, defaults to "<tt>wrs_keymap</tt>". 
    If no path is given, it will be found in the current directory or
    the startup directory.

    <p>
    If "<i>keyname data...</i>" is given, a single key in the internal
    map can be updated.  The format is the same as the entries in the
    mapping file, i.e., one of the names above, followed by one or
    more hex bytes of data.  The bytes represent the stream sent when
    the named key is pressed, and will henceforth be interpreted as
    the pressing of that key.  The bytes should be in hex format, and
    the first byte of a multi-byte sequence must be the <b>Escape</b>
    character (1b).

    <p>
    Example (from real life):

    <p>
    After installing the latest X-window system, suppose one finds
    that, when running <i>WRspice</i> in an <tt>xterm</tt> window, the
    <b>Delete</b> key no longer deletes the character under the cursor
    in <i>WRspice</i>, but instead injects some gibberish.  There are
    three ways to fix this.  The first two are specific to the
    <tt>xterm</tt> program, and instruct the <tt>xterm</tt> to send
    the ASCII Del character when <b>Delete</b> is pressed, rather than
    use the new default which is to send the VT-100 "delete character"
    string.  The third method is to map this string into the delete
    function in <i>WRspice</i>.

    <ol>
    <li>From the main <tt>xterm</tt> menu, find and click on the
    "<b>Delete is DEL</b>" entry.  Usually, holding the <b>Ctrl</b>
    key and clicking in the <tt>xterm</tt> with button 1 displays this
    menu.

    <li>Create a file named "<tt>XTerm</tt>" in your home directory,
    containing the line
    <blockquote>
    <tt>*deleteIsDEL: true</tt>
    </blockquote>

    <li>In <i>WRspice</i>, type "<tt>mapkey</tt>" and follow the
    prompts.  You can save the new map, and add a line to a
    <tt>.wrspiceinit</tt> <a href="startup_files">startup file</a> to
    read it when <i>WRspice</i> starts.
    </ol>
!!LATEX mapkey commands.tex
The {\cb mapkey} command provides limited keyboard mapping support.
\begin{quote}\vt
mapkey [ -r [{\it filename\/}] | -w [{\it filename\/}] |
 {\it keyname data} ]
\end{quote}
Only the keys that are used for command line editing are mappable. 
This is to account for ``strange'' terminals that may not send the
expected data when a key is pressed.

The following keys can be mapped:
\begin{quote}\kb
Ctrl-A\\
Ctrl-D\\
Ctrl-E\\
Ctrl-K\\
Ctrl-U\\
Ctrl-V\\
Tab\\
Backspace\\
Delete\\
LeftArrow\\
RightArrow\\
UpArrow\\
DownArrow
\end{quote}
Of these, the arrow keys and {\kb Delete} are most likely to need
remapping.

If no argument is given, the user is prompted to press each of these
keys, and the internal map is updated.  After doing this, the keys
should have their expected effect when pressed while entering a
{\WRspice} command.

If ``{\vt -w} [{\it filename\/}]'' is given, the present internal
map will be saved in the named file, or ``{\vt wrs\_keymap}'' in the
current directory if no {\it filename} is given.

If ``{\vt -r} [{\it filename\/}]'' is given, the file will be read
as a key mapping file, and the internal map will be updated.  The
{\it filename}, if not given, defaults to ``{\vt wrs\_keymap}''.  If
no path is given, it will be found in the current directory or the
startup directory.

If ``{\it keyname data...}'' is given, a single key in the internal
map can be updated.  The format is the same as the entries in the
mapping file, i.e., one of the names above, followed by one or more
hex bytes of data.  The bytes represent the stream sent when the named
key is pressed, and will henceforth be interpreted as the pressing of
that key.  The bytes should be in hex format, and the first byte of a
multi-byte sequence must be the {\kb Escape} character (1b).

Example (from real life):

After installing the latest X-window system, suppose one finds that,
when running {\WRspice} in an {\vt xterm} window, the {\kb Delete} key
no longer deletes the character under the cursor in {\WRspice}, but
instead injects some gibberish.  There are three ways to fix this. 
The first two are specific to the {\vt xterm} program, and instruct
the {\vt xterm} to send the ASCII Del character when {\kb Delete} is
pressed, rather than use the new default which is to send the VT-100
``delete character'' string.  The third method is to map this string
into the delete function in {\WRspice}.

\begin{enumerate}
\item{From the main {\vt xterm} menu, find and click on the ``{\cb
Delete is DEL}'' entry.  Usually, holding the {\kb Ctrl} key and
clicking in the {\vt xterm} with button 1 displays this menu.}

\item{Create a file named ``{\vt XTerm}'' in your home directory,
containing the line
\begin{quote}
{\vt *deleteIsDEL: true}
\end{quote}}

\item{In {\WRspice}, type ``{\vt mapkey}'' and follow the prompts. 
You can save the new map, and add a line to a {\vt .wrspiceinit}
startup file to read it when {\WRspice} starts.}
\end{enumerate}

!!SEEALSO
uicmds

!! commands.tex 070925
!!KEYWORD
savefonts
!!TITLE
savefonts command
!!HTML
    command: <tt>savefonts</tt>

    <p>
    This command will create or update the list of fonts currently
    used by <i>WRspice</i> in the <a
    href="startup_files"><tt>.wrpiceinit</tt></a> file in the user's
    home directory, which will cause these fonts to be loaded in
    subsequent <i>WRspice</i> sessions.  This is equivalent to
    pressing the <b>Save Fonts</b> button in the <a
    href="filemenu"><b>File</b></a> menu of the <a
    href="toolbar"><b>Tool Control</b></a> window.  The needed <a
    href="setfont"><b>setfont</b></a> commands are inserted or
    replaced in the <tt>.wrspiceinit</tt> file.  The file is
    created if it does not exist.
!!LATEX savefonts commands.tex
Syntax: {\vt savefonts}

This command will create or update the list of fonts currently
used by {\WRspice} in the {\vt .wrpiceinit} file in the user's
home directory, which will cause these fonts to be loaded in
subsequent {\WRspice} sessions.  This is equivalent to pressing
the {\cb Save Fonts} button in the {\cb File} menu of the
{\cb Tool Control} window.  The needed {\cb setfont} commands
are inserted or replaced in the {\vt .wrspiceinit} file.  The
file is created if it does not exist.

!!SEEALSO
uicmds

!! commands.tex 121011
!!KEYWORD
setcase
!!TITLE
setcase command
!!HTML
    command: <tt>setcase</tt> [<i>flags</i>]

    <p>
    This command sets or reports the case sensitivity of various name
    classes in <i>WRspice</i>.  These classes are:

    <blockquote>
    Function names.<br>
    User-defined function names.<br>
    Vector names.<br>
    .PARAM names.<br>
    Codeblock names.<br>
    Node and device names.<br>
    </blockquote>

    <p>
    The <i>flags</i> is a word consisting of letters, each letter
    corresponds to a class from the list above.  If lower-case, the
    class will be case-sensitive.  If upper-case, the class will be
    case-insensitive.

    <p>
    The letters are <tt>f</tt>, <tt>u</tt>, <tt>v</tt>, <tt>p</tt>,
    <tt>c</tt>, and <tt>n</tt> corresponding to the classes listed
    above.  By default, all <i>WRspice</i> identifiers are
    case-insensitive, which corresponds to the string
    "<tt>FUVPCN</tt>".  Letters can appear in any order, and
    unrecognized characters are ignored.  Not all letters need be
    included, only those seen will be used.

    <p>
    If given an argument string as described above, and called from a
    <a href="startup_files">startup file</a>, the case sensitivities
    will be set.  This can <b>not</b> be done from the <i>WRspice</i>
    prompt.  Case sensitivity can also be set from the command line by
    using the <tt>-c</tt> <a href="arguments#-c">option</a>.

    <p>
    If no argument, a report of the case sensitivity status is printed.
    This can be done from the <i>WRspice</i> prompt.
!!LATEX setcase commands.tex
Syntax: {\vt setcase} [{\it flags\/}]

This command sets or reports the case sensitivity of various name
classes in {\WRspice}.  These classes are:

\begin{quote}
Function names.\\
User-defined function names.\\
Vector names.\\
.PARAM names.\\
Codeblock names.\\
Node and device names.\\
\end{quote}

The {\it flags} is a word consisting of letters, each letter
corresponds to a class from the list above.  If lower-case, the class
will be case-sensitive.  If upper-case, the class will be
case-insensitive.

The letters are {\vt f}, {\vt u}, {\vt v}, {\vt p}, {\vt c}, and {\vt
n} corresponding to the classes listed above.  By default, all
{\WRspice} identifiers are case-insensitive, which corresponds to the
string ``{\vt FUVPCN}''.  Letters can appear in any order, and
unrecognized characters are ignored.  Not all letters need be
included, only those seen will be used.

If given an argument string as described above, and called from a
startup file, the case sensitivities will be set.  This can {\bf not}
be done from the {\WRspice} prompt.  Case sensitivity can also be set
from the command line by using the {\vt -c} option.

If no argument, a report of the case sensitivity status is printed. 
This can be done from the {\WRspice} prompt.

!!SEEALSO
uicmds

!! commands.tex 071025
!!KEYWORD
setfont
!!TITLE
setfont command
!!HTML
    command: <tt>setfont</tt> <i>font_num</i> <i>font_specifier</i>

    <p>
    This command can be used to set the fonts employed in the
    graphical interface.  Although this can be given at a prompt, it
    is intended to be invoked in a startup script.

    <p>
    The first argument is an integer 1-6 which designates the font
    category.  The index corresponds to the entries in the drop-down
    menu of font categories found in the <a
    href="fontspanel"><b>Font Selection</b></a> panel from the
    <a href="toolsmenu"><b>Tools</b></a> menu.

    <p>
    The rest of the line is a font description string.  This may
    vary somewhat between graphics types, but a basic description
    consisting of a face name followed by a space-separated integer
    pixel height should be portable to all supported systems.
    <blockquote>
    Example: <tt>Lucida Console 12</tt>
    </blockquote>
    The font face name should be that of a font installed on the system,
    or a known alias.

    <p>
    You will probably never need to use the <b>setfont</b> command
    directly.  Lines containing <b>setfont</b> commands for all six
    fonts are saved or updated in the <tt>.wrspiceinit</tt>
    <a href="startup_files">startup file</a> when the <b>Save Fonts</b>
    menu button in the <a href="filemenu"><b>File</b></a> menu is
    pressed.  The <a href="savefonts"><b>savefonts</b></a> command
    does the same thing.
!!LATEX setfont commands.tex
Syntax: {\vt setfont} {\it font\_num} {\it font\_specifier}

This command can be used to set the fonts employed in the graphical
interface.  Although this can be given at a prompt, it is intended to
be invoked in a startup script.

The first argument is an integer 1--6 which designates the font
category.  The index corresponds to the entries in the drop-down menu
of font categories found in the {\cb Font Selection} panel from the
{\cb Tools} menu.

The rest of the line is a font description string.  This may vary
somewhat between graphics types, but a basic description consisting
of a face name followed by a space-separated integer pixel height
should be portable to all supported systems.
\begin{quote}
Example: {\vt Lucida Console 12}
</blockquote>
The font face name should be that of a font installed on the system,
or a known alias.

You will probably never need to use the {\cb setfont} command
directly.  Lines containing {\cb setfont} commands for all six
fonts are saved or updated in the {\vt .wrspiceinit} startup
file when the {\cb Save Fonts} menu button in the {\cb File}
menu is pressed.  The {\cb savefonts} command does the same thing.

!!SEEALSO
uicmds

!! commands.tex 012209
!!KEYWORD
setrdb
!!TITLE
setrdb command
!!HTML 
    command: <tt>setrdb</tt> <i>resource</i>: <i>value</i>

    <p>
    The <b>setrdb</b> command adds resources to the X resource
    database.  The user interface toolset currently used to implement
    the <i>WRspice</i> user interface is the GTK toolkit (<a
    href="http://www.gtk.org"><tt>www.gtk.org</tt></a>) which does not
    use the X resource mechanism.

    <p>
    <i>WRspice</i> presently only recognizes resource strings which
    set the plotting colors for the <a href="plot"><b>plot</b></a>
    command.  The names of these resources are "<tt>color0</tt>"
    through "<tt>color19</tt>", which correspond directly to the <a
    href="color">color<i>N</i></a> shell variables, and to the colors
    listed in the <b>Colors</b> tool of the <b>Tools</b> menu of the
    <a href="toolbar"><b>Tool Control</b></a> window.  To set a color
    using the <b>setrdb</b> command, one can use forms like
    <blockquote>
    <tt>setrdb *color2:  pink</tt>
    </blockquote>
!!LATEX setrdb commands.tex
The {\cb setrdb} command adds resources to the X resource database.
\begin{quote}\vt
setrdb {\it resource\/}: {\it value}
\end{quote}
The user interface toolset currently used to implement the {\WRspice}
user interface is the GTK toolkit ({\vt www.gtk.org}) which does not
use the X resource mechanism.

{\WRspice} presently only recognizes resource strings which set the
plotting colors for the {\cb plot} command.  The names of these
resources are ``{\vt color0}'' through ``{\vt color19}'', which
correspond directly to the shell variables of the same name, and to
the colors listed in the {\cb Colors} tool of the {\cb Tools} menu of
the {\cb Tool Control} window.  To set a color using the {\cb setrdb}
command, one can use forms like
\begin{quote}
``{\vt setrdb *color2:  pink}''
\end{quote}
 
!!SEEALSO
uicmds

!! commands.tex 030518
!!KEYWORD
tbupdate
!!TITLE
tbupdate command
!!HTML
    command: <tt>tbupdate</tt>

    <p>
    This command will update the user's <a
    href="startup_files"><tt>.wrspiceinit</tt></a> file in the home
    directory to reflect the current <a href="tbsetup">tool setup</a>. 
    The window arrangement should be the same the next time the user
    starts <i>WRspice</i>.  This command is also performed when the
    user presses the <b>Save Tools</b> button in the <b>File</b>
    menu of the <a href="toolbar"><b>Tool Control</b></a> window.
!!LATEX tbupdate commands.tex
This command will update the user's {\vt .wrspiceinit} file in the
home directory to reflect the current tool setup.
\begin{quote}\vt
tbupdate
\end{quote}
The window arrangement should be the same the next time the user
starts {\WRspice}.  This command is also performed when the user
presses the {\cb Save Tools} button in the {\cb File} menu of the
{\cb Tool Control} window.

!!SEEALSO
uicmds

!! commands.tex 042118
!!KEYWORD
wrupdate
!!TITLE
wrupdate command
!!HTML
    command: <tt>wrupdate</tt>

    <p>
    This command is equivalent to giving the special keyword
    "<tt>:xt_pkgs</tt>" to the help system, which brings up the
    <i>XicTools</i> <a href="update">package management</a> page.  The
    page lists installed and available packages for each of the
    <i>XicTools</i> programs for the current operating system, and
    provides buttons to download and install the packages.

    <p>  
    Unlike in earlier <i>WRspice</i> releases, there is no provision
    for automatic checking for updates, so this command or equivalent
    should be run periodically to check for updated packages.  The
    computer must have http access to the internet for successful use
    of this functionality.
!!LATEX wrupdate commands.tex
This command can be used to check for, download, and install updates
to the program.
\begin{quote}
{\vt wrupdate}
\end{quote}
This command is equivalent to giving the special keyword ``{\vt
:xt\_pkgs}'' to the help system, which brings up the {\XicTools}
package management page (see \ref{update}).  The page lists installed
and available packages for each of the {\XicTools} programs for the
current operating system, and provides buttons to download and install
the packages.

Unlike in earlier {\WRspice} releases, there is no provision for
automatic checking for updates, so this command or equivalent should
be run periodically to check for updated packages.  The computer must
have http access to the internet for successful use of this
functionality.
 
!!SEEALSO
uicmds

!! ----------------------------------------------------------------------------
!! commands.tex 012709
!!KEYWORD
shellcmds
!!TITLE
Shell Commands
!!HTML 
    The commands listed below are built into the <i>WRspice</i> shell,
    or control shell operation.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2>Shell Commands</th>
    <tr><td><a href="alias"><b>alias</b></a></td>
      <td>Create alias</td></tr>
    <tr><td><a href="cd"><b>cd</b></a></td>
      <td>Change directory</td></tr>
    <tr><td><a href="echo"><b>echo</b></a></td>
      <td>Print string</td></tr>
    <tr><td><a href="echof"><b>echof</b></a></td>
      <td>Print string to file</td></tr>
    <tr><td><a href="historycomm"><b>history</b></a></td>
      <td>Print command history</td></tr>
    <tr><td><a href="pause"><b>pause</b></a></td>
      <td>Pause script execution</td></tr>
    <tr><td><a href="pwd"><b>pwd</b></a></td>
      <td>Print the current working directory</td></tr>
    <tr><td><a href="rehash"><b>rehash</b></a></td>
      <td>Update command database</td></tr>
    <tr><td><a href="set"><b>set</b></a></td>
      <td>Set a variable</td></tr>
    <tr><td><a href="shell"><b>shell</b></a></td>
      <td>Execute operating system commands</td></tr>
    <tr><td><a href="shift"><b>shift</b></a></td>
      <td>Shift argument list</td></tr>
    <tr><td><a href="unalias"><b>unalias</b></a></td>
      <td>Destroy alias</td></tr>
    <tr><td><a href="unset"><b>unset</b></a></td>
      <td>Unset a variable</td></tr>
    <tr><td><a href="usrset"><b>usrset</b></a></td>
      <td>Print list of internally used variables</td></tr>
    </table>
!!LATEX shellcmds commands.tex
The commands listed below are built into the {\WRspice} shell, or
control shell operation. 
    
\begin{tabular}{|l|l|}\hline
\multicolumn{2}{|c|}{Shell Commands}\\ \hline
\cb alias & Create alias\\ \hline
\cb cd & Change directory\\ \hline
\cb echo & Print string\\ \hline
\cb echof & Print string to file\\ \hline
\cb history & Print command history\\ \hline
\cb pause & Pause script execution\\ \hline
\cb pwd & Print the current working dirsctory\\ \hline
\cb rehash & Update command database\\ \hline
\cb set & Set a variable\\ \hline
\cb shell & Execute operating system commands\\ \hline
\cb shift & Shift argument list\\ \hline
\cb unalias & Destroy alias\\ \hline
\cb unset & Unset a variable\\ \hline
\cb usrset & Print list of internally used variables\\ \hline
\end{tabular}

!!SEEALSO
commands

!! commands.tex 011909
!!KEYWORD
alias
!!TITLE
alias command
!!HTML 
    command: <tt>alias</tt> [<i>word</i>] [<i>text</i>]

    <p>
    The <b>alias</b> command is used to create aliases, as in the
    C-shell.  The <b>alias</b> command causes <i>word</i> to be aliased
    to <i>text</i>.  Whenever a command line beginning with
    <i>word</i> is typed, <i>text</i> is substituted.  Arguments are
    either appended to the end, or substituted in if history
    characters are present in the text.  With no argument, a list of
    the current aliases is displayed.
 
    <p>
    In the body if the alias text, any strings of the form
    !:<i>number</i> are replaced with the <i>number</i>'th argument of
    the actual command line.  Note that when the alias is defined with
    the <b>alias</b> command, these strings must be quoted to prevent
    history substitution from replacing the !'s before the alias
    command can get to them.  Thus the command
    <blockquote>
         <tt>alias foo echo '!:2' '!:1'</tt>
    </blockquote>
    Causes "<tt>foo bar baz</tt>" to be replaced with "<tt>echo baz
    bar</tt>".  Other !  modifiers as described in the section on <a
    href="historysub">history substitution</a> may also be used,
    always referring to the actual command line arguments given.  If a
    command line starts with a backslash '<tt>\</tt>' any alias
    substitution is inhibited.
!!LATEX alias commands.tex
The {\cb alias} command is used to create aliases, as in the C-shell.
\begin{quote}\vt
alias [{\it word\/}] [{\it text\/}]
\end{quote}
The {\cb alias} command causes {\it word\/} to be aliased to {\it
text}.  Whenever a command line beginning with {\it word} is typed,
{\it text} is substituted.  Arguments are either appended to the end,
or substituted in if history characters are present in the text.  With
no argument, a list of the current aliases is displayed.

In the body of the alias text, any strings of the form {\vt !:}{\it
number} are replaced with the {\it number\/}'th argument of the actual
command line.  Note that when the alias is defined with the {\cb
alias} command, these strings must be quoted to prevent history
substitution from replacing the {\vt !}'s before the alias command can
get to them.  Thus the command
\begin{quote}\vt
alias foo echo '!:2' '!:1'
\end{quote}
causes ``{\vt foo bar baz"}'' to be replaced with ``{\vt echo baz
bar}''.  Other {\vt !} modifiers as described in the section on
history substitution may also be used, always referring to the actual
command line arguments given.  If a command line starts with a
backslash `{\vt \symbol{92}}' any alias substitution is inhibited.

!!SEEALSO
unalias
aliases
spshell
shellcmds

!! commands.tex 011909
!!KEYWORD
cd
!!TITLE
cd command
!!HTML 
    command: <tt>cd</tt> [<i>directory</i>]

    <p>
    The <b>cd</b> command is used to change the current working
    directory.  The command will change the current working directory
    to <i>directory</i>, or to the user's home directory if none is
    given.
!!LATEX cd commands.tex
The {\cb cd} command is used to change the current working directory.
\begin{quote}\vt
cd [{\it directory\/}]
\end{quote}
The command will change the current working directory to {\it
directory\/}, or to the user's home directory if none is given.

!!SEEALSO
shellcmds
 
!! commands.tex 011909
!!KEYWORD
echo
!!TITLE
echo command
!!HTML 
    command: <tt>echo</tt> [<tt>-n</tt>] [<i>stuff</i> ...]

    <p>
    The <b>echo</b> command will print its arguments on the standard
    output.  If the <tt>-n</tt> flag is given, then the arguments are
    echoed without a trailing newline.
!!LATEX echo commands.tex
The {\cb echo} command will print its arguments on the standard output.
\begin{quote}\vt
echo [-n][{\it stuff} ...]
\end{quote}
If the {\vt -n} option is given, then the arguments are echoed without
a trailing newline.

!!SEEALSO
shellcmds
 
!! commands.tex 012709
!!KEYWORD
echof
!!TITLE
echof command
!!HTML
    This command is only available from the control scripts which are
    active during <a href="monte">Monte Carlo</a> or <a
    href="oprng_analysis">operating range</a> analysis.

    <p>
    The <tt>echof</tt> command is used in the same manner as the <a
    href="echo"><b>echo</b></a> command, however the text is directed
    to the output file being generated as the analysis is run.  If the
    file is not open, there is no action.  This command can be used in
    the scripts to insert text, such as the Monte Carlo trial values,
    into the output file.
!!LATEX echof commands.tex
This command is only available from the control scripts which are
active during Monte Carlo or operating range analysis. 

The {\cb echof} command is used in the same manner as the {\cb echo}
command, however the text is directed to the output file being
generated as the analysis is run.  If the file is not open, there is
no action.  This command can be used in the scripts to insert text,
such as the Monte Carlo trial values, into the output file.

!!SEEALSO
shellcmds

!! commands.tex 011909
!!KEYWORD
historycomm
!!TITLE
history command
!!HTML 
    command: <tt>history</tt> [<tt>-r</tt>] [<i>number</i>]

    <p>
    The <b>history</b> command prints the last commands executed.  The
    command will print out the last <i>number</i> commands typed by
    the user, or all the commands saved if <i>number</i> is not given. 
    The number of commands saved is determined by the value of the <a
    href="historyvar"><tt>history</tt></a> variable.  If the
    <tt>-r</tt> flag is given, the list is printed in reverse order.
!!LATEX historycomm commands.tex
The {\cb history} command prints the last commands executed.
\begin{quote}\vt
history [-r] [{\it number\/}]
\end{quote}
The command will print out the last {\it number} commands typed by the
user, or all the commands saved if {\it number} is not given.  The
number of commands saved is determined by the value of the {\et
history} variable.  If the {\vt -r} flag is given, the list is printed
in reverse order.
 
!!SEEALSO
historysub
shellcmds

!! commands.tex 011909
!!KEYWORD
pause
!!TITLE
pause command
!!HTML 
    command: <tt>pause</tt>

    <p>
    The <b>pause</b> command is used in scripts to cause the executing
    script to wait for a keypress.  The function takes no arguments,
    and the keypress is discarded.
!!LATEX pause commands.tex
The {\cb pause} command is used in scripts to cause the executing
script to wait for a keypress.  The function takes no arguments, and
the keypress is discarded.

!!SEEALSO
shellcmds

!! commands.tex 091714
!!KEYWORD
pwd
!!TITLE
pwd command
!!HTML 
    command: <tt>pwd</tt>

    Print the current working directory.
!!LATEX pwd commands.tex
Print the current working directory.

!!SEEALSO
shellcmds

!! commands.tex 011909
!!KEYWORD
rehash
!!TITLE
rehash command
!!HTML 
    command: <tt>rehash</tt>

    <p>
    The <b>rehash</b> command rebuilds the command list from the files
    found along the user's executable file search path.  The command
    will recalculate the internal hash tables used when looking up
    operating system commands, and make all operating system commands
    in the user's <b>PATH</b> available for command completion.  This
    command takes no arguments, and has effect only when the <a
    href="unixcom"><tt>unixcom</tt></a> variable is set.
!!LATEX rehash commands.tex
The {\cb rehash} command rebuilds the command list from the files
found along the user's executable file search path.  The command
will recalculate the internal hash tables used when looking up
operating system commands, and make all operating system commands in
the user's {\et PATH} available for command completion.  This
command takes no arguments, and has effect only when the {\et
unixcom} variable is set.
 
!!SEEALSO
shellcmds
unixcomcomm

!! commands.tex 012624
!!KEYWORD
set
!!TITLE
set command
!!HTML 
    command: <tt>set</tt> [<i>varname</i> [= <i>value</i>] ...]

    <p>
    The <b>set</b> command allows the user to examine and set shell
    variables.  It is also possible to assign vectors with the
    <b>set</b> command.  In addition, shell variables are set which
    correspond to definitions supplied on the <a
    href=".options"><tt>.options</tt></a> line of the current circuit,
    and there are additional shell variables which are set
    automatically in accord with the current plot.  The shell
    variables that are currently active can be listed with the
    <b>set</b> command given without arguments, and are also listed
    within the <b>Variables</b> window brought up from the
    <b>Tools</b> menu of the <b>Tool Control</b> window.  In these
    listings, a '<tt>+</tt>' symbol is prepended to variables defined
    from a <tt>.options</tt> line in the current circuit, and a '*'
    symbol is prepended to those variables defined for the current
    plot.  These variable definitions will change as the current
    circuit and current plot change.  Some variables are read-only and
    may not be changed by the user, though this is not indicated in
    the listing.

    <p>
    Before a simulation starts, the options from the <tt>.options</tt>
    line of the current circuit are merged with any of the same name
    that have been set using the shell.  The result of the merge is
    that options that are booleans will be set if set in either case,
    and those that take values will assume the value set through the
    shell if conflicting definitions are given.  The merge will be
    suppressed if the shell variable <a
    href="noshellopts"><tt>noshellopts</tt></a> is set <i>from the
    shell</i>, in which case the only options used will be those from
    the <tt>.options</tt> line, and those that are redefined using the
    <b>set</b> command will be ignored.

    <p>
    Above, the <i>varname</i> is the name of the shell variable to
    set, and <i>value</i>, if present, is a single token to be
    assigned.  Multiple variables can be assigned with a single
    <b>set</b> command.  If <i>value</i> is missing (along with the
    '<tt>=</tt>'), then <i>varname</i> is of boolean type and always
    taken as "true" when set.  If <i>value</i> is a pure number not
    double quoted, then <i>varname</i> will reference that number. 
    Otherwise, <i>varname</i> will reference <i>value</i> as a
    character string, unless <i>value</i> is a list.  A list is a
    space-separated list of tokens in space-separated parentheses, as
    in
    <blockquote>
    <tt>set mylist = ( abc def 1.2 xxdone )</tt>
    </blockquote>
    which sets the variable <tt>mylist</tt> to the list of four
    tokens.

    <p>
    The <a href="unset"><b>unset</b></a> command can be used
    to delete a variable.

    <p>
    The value of a variable <i>word</i> may be inserted into a command
    by writing <tt>$</tt><i>word</i>.  If a variable is set to a list
    of values that are enclosed in parentheses (which must be
    separated from their values by white space), the value of the
    variable is the list.

    <p>
    A list variable can be indexed, for example
    <blockquote>
    <tt>> set list = ( a s d f g )</tt><br>
    <tt>> echo $list[2]</tt><br>
    <tt>d</tt>
    </blockquote>
    This does not work for non-list variables.

    <p>
    The syntax <tt>set var = "$list"</tt> will set the variable
    <tt>var</tt> to the text of the list variable, as a string and not
    a list.  Note that if the double quotes are not given,
    <tt>var</tt> is set to the first element of the list, and remining
    elements of the list would be set by name as booleans, probably not
    what is wanted.  To copy the list to a new variable, the syntax
    <tt>set var = ( $list )</tt> should be used.  This same syntax
    can be used the create a true list from the string representation
    as in the first example in this paragraph.  Note that the
    parentheses must be separated by white space.

    <p>
    The set command can also be used to assign values to <a
    href="plotvec">vectors</a>.  The syntax in this case is

    <blockquote>
      <tt>set &</tt><i>vector</i> <tt>=</tt> <i>value</i>
    </blockquote>

    which is equivalent to

    <blockquote>
      <tt>let</tt> <i>vector</i> <tt>=</tt> <i>value</i>
    </blockquote>

    <p>
    When entering this form from the <i>WRspice</i> command line, the
    '<tt>&</tt>' character must be hidden from the shell, perhaps most
    conveniently be preceding it with a backslash.  The <i>value</i>
    must be numeric, and a value must be given, unlike for a variable
    which can be set as a boolean.

    <p>
    There are a number of variables with internal meaning to
    <i>WRspice</i>, and in fact this is the mechanism by which most
    <i>WRspice</i> defaults are specified.  Several of the other
    buttons in the <a href="toolsmenu"><b>Tools</b></a> menu,
    including <a href="cmdopts"><b>Commands</b></a>, <a
    href="dbgopts"><b>Debug</b></a>, <a href="plotopts"><b>Plot
    Opts</b></a>, <a href="shellopts"><b>Shell</b></a>, and <a
    href="simopts"><b>Sim Opts</b></a> bring up panels from which
    these special variables can be modified.

    <p>
    The <a href="variables">predefined variables</a> which have
    meaning to <i>WRspice</i> can be listed with the <a
    href="usrset"><b>usrset</b></a> command.  In general, variables
    set in the <tt>.options</tt> line are available for expansion in
    $<i>varname</i> references, but do not otherwise affect the
    functionality of the shell.
!!LATEX set commands.tex
The {\cb set} command allows the user to examine and set shell
variables.  It is also possible to assign vectors with the {\cb set}
command.
\begin{quote}\vt
set [{\it varname} [= {\it value}] ...]
\end{quote}
In addition, shell variables are set which correspond to definitions
supplied on the {\vt .options} line of the current circuit, and there
are additional shell variables which are set automatically in accord
with the current plot.  The shell variables that are currently active
can be listed with the {\cb set} command given without arguments, and
are also listed within the {\cb Variables} window brought up from the
{\cb Tools} menu of the {\cb Tool Control} window.  In these listings,
a `{\vt +}' symbol is prepended to variables defined from a {\vt
.options} line in the current circuit, and a `{\vt *}' symbol is
prepended to those variables defined for the current plot.  These
variable definitions will change as the current circuit and current
plot change.  Some variables are read-only and may not be changed by
the user, though this is not indicated in the listing.

Before a simulation starts, the options from the {\vt .options} line
of the current circuit are merged with any of the same name that have
been set using the shell.  The result of the merge is that options
that are booleans will be set if set in either case, and those that
take values will assume the value set through the shell if conflicting
definitions are given.  The merge will be suppressed if the shell
variable {\et noshellopts} is set {\it from the shell}, in which case
the only options used will be those from the {\vt .options} line, and
those that are redefined using the {\cb set} command will be ignored.

Above, the {\it varname} is the name of the shell variable to set, and
{\it value}, if present, is a single token to be assigned. 
Multiple variables can be assigned with a single {\cb set} command. 
If {\it value} is missing (along with the `{\vt =}'), then {\it
varname} is of boolean type and always taken as ``true'' when set. 
If {\it value} is a pure number not double quoted, then {\it
varname} will reference that number.  Otherwise, {\it varname} will
reference {\it value} as a character string, unless {\it value} is
a list.  A list is a space-separated list of tokens in space-separated
parentheses, as in
\begin{quote}\vt
set mylist = ( abc def 1.2 xxdone )
\end{quote}
which sets the variable {\vt mylist} to the list of four tokens.

The {\cb unset} command can be used to delete a variable.

The value of a variable {\it word\/} may be inserted into a command by
writing {\vt \${\it word}}.  If a variable is set to a list of values
that are enclosed in parentheses (which must be separated from their
values by white space), the value of the variable is the list.

A list variable can be indexed, for example
\begin{quote}\vt
> set list = ( a s d f g )\\
> echo \$list[2]\\
d
\end{quote}
This does not work for non-list variables.

The syntax {\vt set var = "\$list"} will set the variable {\vt var} to
the text of the list variable, as a string and not a list.  Note that
if the double quotes are not given, {\vt var} is set to the first
element of the list, and remining elements of the list would be set by
name as booleans, probably not what is wanted.  To copy the list to a
new variable, the syntax {\vt set var = ( \$list )} should be used. 
This same syntax can be used the create a true list from the string
representation as in the first example in this paragraph.  Note that
the parentheses must be separated by white space.

The set command can also be used to assign values to vectors (vectors
are described in \ref{vectors}).  The syntax in this case is
 
\begin{quote}
{\vt set \&}{\it vector} {\vt =} {\it value}
\end{quote}
 
which is equivalent to
 
\begin{quote}
{\vt let} {\it vector} {\vt =} {\it value}
\end{quote}
 
When entering this form from the {\WRspice} command line, the `{\vt
\&}' character must be hidden from the shell, perhaps most
conveniently be preceding it with a backslash.  The {\it value} must
be numeric, and a value must be given, unlike for a variable which can
be set as a boolean.

There are a number of variables with internal meaning to {\WRspice},
and in fact this is the mechanism by which most {\WRspice} defaults
are specified.  Several of the other buttons in the {\cb Tools} menu,
including {\cb Commands}, {\cb Debug}, {\cb Plot Opts}, {\cb Shell},
and {\cb Sim Opts} bring up panels from which these special variables
can be modified.

The predefined variables which have meaning to {\WRspice} (see
\ref{variables}) can be listed with the {\cb usrset} command.  In
general, variables set in the {\vt .options} line are available for
expansion in {\vt \$}{\it varname} references, but do not otherwise
affect the functionality of the shell.
 
!!SEEALSO
variablesub
setandlet
shellcmds

!! commands.tex 011909
!!KEYWORD
shell
!!TITLE
shell command
!!HTML 
    command: <tt>shell</tt> [<i>command</i>]
 
    <p>
    The <b>shell</b> command will pass its arguments to the operating
    system shell.  The command will fork a shell if no <i>command</i>
    is given, or execute the arguments as a command to the operating
    system.
!!LATEX shell commands.tex
The {\cb shell} command will pass its arguments to the operating system
shell.
\begin{quote}\vt
shell [{\it command\/}]
\end{quote}
The command will fork a shell if no {\it command\/} is given, or
execute the arguments as a command to the operating system.
 
!!SEEALSO
shellcmds
unixcom

!! commands.tex 011909
!!KEYWORD
shift
!!TITLE
shift command
!!HTML 
    command: <tt>shift</tt> [<i>varname</i>] [<i>number</i>]

    <p>
    The <b>shift</b> command facilitates handling of list variables in
    shell scripts.  If <i>varname</i> is the name of a list variable,
    it is shifted to the left by <i>number</i> elements, i.e, the
    <i>number</i> leftmost elements are removed.  The default
    <i>varname</i> is <tt>argv</tt>, and the default <i>number</i> is
    1.
!!LATEX shift commands.tex
The {\cb shift} command facilitates handling of list variables in
shell scripts.
\begin{quote}\vt
shift [{\it varname\/}] [{\it number\/}]
\end{quote}
If {\it varname} is the name of a list variable, it is shifted to
the left by {\it number} elements, i.e., the {\it number} leftmost
elements are removed. The default {\it varname} is {\vt argv}, and
the default {\it number} is 1.
 
!!SEEALSO
shellcmds
variables

!! commands.tex 011909
!!KEYWORD
unalias
!!TITLE
unalias command
!!HTML 
    command: <tt>unalias</tt> [<i>word</i> ...]

    <p>
    The <b>unalias</b> command is used to remove aliases previously
    set with the <a href="alias"><b>alias</b></a> command.  The
    command removes any aliases associated with each of the
    <i>word</i>s.  The argument may be "*", in which case all aliases
    are deleted.
!!LATEX unalias commands.tex
The {\cb unalias} command is used to remove aliases previously set with
the {\cb alias} command.
\begin{quote}\vt
unalias [{\it word} ...]
\end{quote}
The command removes any aliases associated with each of the {\it
word\/}s.  The argument may be ``{\vt *}'', in which case all aliases
are deleted.
 
!!SEEALSO
aliases
shellcmds

!! commands.tex 011909
!!KEYWORD
unset
!!TITLE
unset command
!!HTML 
    command: <tt>unset</tt> [<i>varname</i> ...]

    <p>
    The <b>unset</b> command will remove the definitions of shell
    variables, previously defined with the <a
    href="set"><b>set</b></a> command, passed as arguments.  All of
    the named variables are unset (undefined).  The argument may be
    "*", in which case all variables are unset (although this is
    usually not something that one would want to do).
!!LATEX unset commands.tex
The {\cb unset} command will remove the definitions of shell
variables, previously defined with the {\cb set} command, passed as
arguments.
\begin{quote}\vt
unset [{\it varname} ...]
\end{quote}
All of the named variables are unset (undefined).  The argument may be
``{\vt *}'', in which case all variables are unset (although this is
usually not something that one would want to do).
 
!!SEEALSO
shellcmds
variablesub
variables

!! commands.tex 011909
!!KEYWORD
usrset 
!!TITLE
usrset command
!!HTML
    command: <tt>usrset [-c][-d][-p][-sh][-si]</tt> [<i>keyword</i> ...]

    <p>
    The <b>usrset</b> command prints a (long) list of all of the
    variables used internally by <i>WRspice</i> which can be set with
    the <a href="set"><b>set</b></a> command.  <i>WRspice</i> provides
    a substantial number of internal switches and variables which can
    be configured with the <b>set</b> command.  The <b>usrset</b>
    command prints a listing and brief description of each of the
    variables with internal significance to <i>WRspice</i>.  If no
    arguments are given, all of the variables which control
    <i>WRspice</i> will be printed.  The options print sets of
    keywords associated with certain functions, which are in turn
    associated with a particular panel accessible from the <a
    href="toolbar"><b>Tool Control</b></a> window.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th>Option <th>Toolbar Button <th> Description</tr>
    <tr><td><tt>-c</tt> <td><b>Commands</b>
         <td>Variables which control <i>WRspice</i> commands</tr>
    <tr><td><tt>-d</tt> <td><b>Debug</b>
         <td>Debugging variables</tr>
    <tr><td><tt>-p</tt> <td><b>Plot Opts</b>
         <td>Variables which control plotting</tr>
    <tr><td><tt>-sh</tt> <td><b>Shell</b>
         <td>Variables which control the shell</tr>
    <tr><td><tt>-si</tt> <td><b>Sim Opts</b>
         <td>Simulation control and SPICE options</tr>
    </table>

    <p>
    Other arguments are taken as variable names, which will result in
    a description of that variable being printed.
!!LATEX usrset commands.tex
The {\cb usrset} command prints a (long) list of all of the variables
used internally by {\WRspice} which can be set with the {\cb set}
command.
\begin{quote}\vt
usrset [-c][-d][-p][-sh][-si] [{\it keyword} ...]
\end{quote}
{\WRspice} provides a substantial number of internal switches and
variables which can be configured with the {\cb set} command.  The
{\cb usrset} command prints a listing and brief description of each of
the variables with internal significance to {\WRspice}.  If no
arguments are given, all of the variables which control {\WRspice}
will be printed.  The options print sets of keywords associated with
certain functions, which are in turn associated with a particular
panel accessible from the {\cb Tool Control} window.
\begin{quote}
\begin{tabular}{|l|l|l|}\hline
Option & Toolbar Button & Description\\ \hline\hline
\vt -c & \cb Commands & Variables which control {\WRspice} commands\\ \hline
\vt -d & \cb Debug & Debugging variables\\ \hline
\vt -p & \cb Plot Opts & Variables which control plotting\\ \hline
\vt -sh & \cb Shell & Variables which control the shell\\ \hline
\vt -si & \cb Sim Opts & Simulation control and SPICE options\\ \hline
\end{tabular}
\end{quote}
Other arguments are taken as variable names, which will result in
a description of that variable being printed.
 
!!SEEALSO
shellcmds

!! ----------------------------------------------------------------------------
!! commands.tex 012224
!!KEYWORD
iocmds
!!TITLE
Input and Output Commands
!!HTML 
    These commands manage input to <i>WRspice</i>, or allow
    <i>WRspice</i> output to be saved in files.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2>Input and Output Commands</th></tr>
    <tr><td><a href="codeblock"><b>codeblock</b></a></td>
      <td>Manipulate codeblocks</td></tr>
    <tr><td><a href="dumpnodes"><b>dumpnodes</b></a></td>
      <td>Print node voltages and branch currents</td></tr>
    <tr><td><a href="edit"><b>edit</b></a></td>
      <td>Edit text file</td></tr>
    <tr><td><a href="listing"><b>listing</b></a></td>
      <td>List current circuit</td></tr>
    <tr><td><a href="load"><b>load</b></a></td>
      <td>Read plot data from rawfile</td></tr>
    <tr><td><a href="print"><b>print</b></a></td>
      <td>Print vectors</td></tr>
    <tr><td><a href="printf"><b>printf</b></a></td>
      <td>Print vectors to logging file</td></tr>
    <tr><td><a href="return"><b>return</b></a></td>
      <td>Return from script immediately, possibly with a value</td></tr>
    <tr><td><a href="sced"><b>sced</b></a></td>
      <td>Bring up <i>Xic</i> schematic editor</td></tr>
    <tr><td><a href="source"><b>source</b></a></td>
      <td>Read circuit or script input file</td></tr>
    <tr><td><a href="sprint"><b>sprint</b></a></td>
      <td>Print vectors to a string-type variable</td></tr>
    <tr><td><a href="write"><b>write</b></a></td>
      <td>Write data to rawfile</td></tr>
    <tr><td><a href="xeditorcom"><b>xeditor</b></a></td>
      <td>Edit text file</td></tr>
    </table>
!!LATEX iocmds commands.tex
These commands manage input to {\WRspice}, or allow {\WRspice}
output to be saved in files.

\begin{tabular}{|l|l|}\hline
\multicolumn{2}{|c|}{Input and Output Commands}\\ \hline
\cb codeblock & Manipulate codeblocks\\ \hline
\cb dumpnodes & Print node voltages and branch currents\\ \hline
\cb edit & Edit text file\\ \hline
\cb listing & List current circuit\\ \hline
\cb load & Read plot data from file\\ \hline
\cb print & Print vectors\\ \hline
\cb printf & Print vectors to logging file\\ \hline
\cb return & Return from script immediately, possibly with a value\\ \hline
\cb sced & Bring up {\Xic} schematic editor\\ \hline
\cb source & Read circuit or script input file\\ \hline
\cb sprint & Print vectors to a string-type variable\\ \hline
\cb write & Write data to rawfile\\ \hline
\cb xeditor & Edit text file\\ \hline
\end{tabular}

!!SEEALSO
commands

!! commands.tex 032320
!!KEYWORD
codeblock
!!TITLE
codeblock command
!!HTML 
    command: <tt>codeblock</tt> [<tt>-options</tt>] [<i>filename</i>]

    <p>
    The <b>codeblock</b> command manipulates codeblocks.  A codeblock
    is a stored executable structure derived from a script file. 
    Being internal representations, codeblocks execute more
    efficiently than script files.  A codeblock generally has the same
    name as the script file from which it was derived.

    <p>
    Option characters, which may be grouped or given as separate tokens,
    following a '-' character, are listed below.
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td align="left"><tt>p</tt></td>
      <td>print the text of the block (synonym t)</td></tr>
    <tr><td align="left"><tt>d</tt></td>
      <td>delete the block (synonym f)</td></tr>
    <tr><td align="left"><tt>a</tt></td>
      <td>add a block</td></tr>
    <tr><td align="left"><tt>b</tt></td>
      <td>bind a codeblock to the "controls" of the current circuit</td></tr>
    <tr><td align="left"><tt>be</tt></td>
      <td>bind a codeblock to the "execs" of the current circuit</td></tr>
    <tr><td align="left"><tt>c</tt></td>
      <td>list bound codeblocks of the current circuit</td></tr>
    </table><br>

    <p>
    If no <i>filename</i> is given, and neither of the bind options is
    given, all of the blocks in the internal list are listed by name,
    and their commands are printed if <tt>p</tt> is given, and the
    blocks are deleted if <tt>d</tt> is given.  In the latter case,
    the current circuit codeblock references become empty.

    <p>
    If no <i>filename</i> is given and one of the bind options is
    given, the respective bound codeblock reference in the current
    circuit is removed.  Only one of <tt>b</tt> or <tt>be</tt> can
    be given.

    <p>
    In either case, if <tt>c</tt> is given, the bound codeblocks in
    the current circuit are listed, after other operations.  The
    <tt>a</tt> option is ignored if no <i>filename</i> is given.
    
    <p>
    The bound codeblocks for the current circuit are also listed in
    the <a href="listing"><b>listing</b></a> command.

    <p>
    Otherwise, when a name is given, the named file/block is acted on. 
    If no option is given, the add option is assumed.  Added blocks
    overwrite existing blocks of the same name.  The options all apply
    if given, and the operations are performed in the order
    <blockquote>
    <tt>p</tt> (if <tt>a</tt> not given)<br>
    <tt>d</tt><br>
    <tt>a</tt><br>
    <tt>p</tt> (if <tt>a</tt> given)<br>
    <tt>b</tt> or <tt>be</tt><br>
    <tt>c</tt>
    </blockquote>

    <p>
    When a command is entered in response to a prompt or in a script
    (or another codeblock), the blocks are checked first, then the
    <i>WRspice</i> internal commands, then scripts, then vectors (for
    the implicit <a href="let"><b>let</b></a> in <i>vector</i> =
    <i>something</i>) and finally operating system commands if <a
    href="unixcom"><tt>unixcom</tt></a> is set.

    <p>
    Thus, once a codeblock has been added, it can be executed by
    simply entering its name, as if it were a shell command.  If a
    name conflicts with an internal command or script, the codeblock
    has precedence.

    <p>
    A codeblock can be "bound" to the current circuit with the
    <tt>b</tt> and <tt>be</tt> options.  If <tt>be</tt>, the block is
    bound as an "exec" codeblock, and if <tt>b</tt> is given, the
    block is bound as a "control" codeblock.  Each circuit has one of
    each type, which are by default derived from the <a
    href=".exec"><tt>.exec</tt></a> and <a
    href=".control"><tt>.control</tt></a> statements from the circuit
    file.  Binding an external codeblock overrides the blocks obtained
    from the file.  If no <i>filename</i> was given, the existing
    binding is deleted from the current circuit, according to whether
    the <tt>b</tt> or <tt>be</tt> was given.  Separate calls are
    required to unbind both blocks.

    <p>
    Note:  Bound codeblocks are parameter expanded, named codeblocks
    are not.  In a named codeblock, parameters are available through
    the <tt>@</tt><i>parmname</i> (<a href="specialvec">special
    vector</a>) syntax.

    <p>
    <a href="oprng_analysis">Operating range</a> and <a
    href="monte">Monte Carlo</a> analysis can make use of "bound"
    codeblocks.  In both types of analysis, the "controls" codeblock
    execution sets a variable indicating whether the circuit simulated
    properly according to user specified criteria.  When a margin
    analysis file is input, the lines between <tt>.control</tt> and
    <tt>.endc</tt> become the default controls codeblock.  Similarly,
    the lines between <tt>.exec</tt> and <tt>.endc</tt> become the
    default exec codeblock.  A bound codeblock will always supersede
    the default codeblock.
!!LATEX codeblock commands.tex
The {\cb codeblock} command manipulates codeblocks.
\begin{quote}\vt
codeblock [{\it -options\/}] [{\it filename\/}]
\end{quote}
A codeblock is a stored executable structure derived from a script
file.  Being internal representations, codeblocks execute more
efficiently than script files.  A codeblock generally has the same
name as the script file from which it was derived.

Option characters, which may be grouped or given as separate tokens,
following a '--' character, are listed below.
\begin{quote}
\begin{tabular}{|l|l|}\hline
{\vt p} & print the text of a block (synonym {\vt t})\\ \hline
{\vt d} & delete the block (synonym {\vt f})\\ \hline
{\vt a} & add a block\\ \hline
{\vt b} & bind the block to the ``controls'' of the current circuit\\ \hline
{\vt be} & bind the block to the ``execs'' of the current circuit\\ \hline
{\vt c} & list bound codeblocks of the current circuit\\ \hline
\end{tabular}
\end{quote}

If no {\it filename} is given, and neither of the bind options is
given, all of the blocks in the internal list are listed by name, and
their commands are printed if {\vt p} is given, and the blocks are
deleted if {\vt d} is given.  In the latter case, the current circuit
codeblock references become empty.

If no {\it filename} is given and one of the bind options is given,
the respective bound codeblock reference in the current circuit is
removed.  Only one of {\vt b} or {\vt be} can be given.

In either case, if {\vt c} is given, the bound codeblocks in the
current circuit are listed, after other operations.  The {\vt a}
option is ignored if no {\it filename} is given.

The bound codeblocks for the current circuit are also listed in the
{\cb listing} command.

Otherwise, when a name is given, the named file/block is acted on.
If no option is given, the add option is assumed.  Added blocks
overwrite existing blocks of the same name.  The options all apply
if given, and the operations are performed in the order
\begin{quote}
{\vt p} (if {\vt a} not given)\\
{\vt d}\\
{\vt a}\\
{\vt p} (if {\vt a} given)\\
{\vt b} or {\vt be}\\
{\vt c}
\end{quote}

When a command is entered in response to a prompt or in a script (or
another codeblock), the blocks are checked first, then the {\WRspice}
internal commands, then scripts, then vectors (for the implicit {\cb
let} in {\it vector} = {\it something\/}) and finally operating system
commands if {\et unixcom} is set.

Thus, once a codeblock has been added, it can be executed by simply
entering its name, as if it were a shell command.  If a name conflicts
with an internal command or script, the codeblock has precedence.

A codeblock can be ``bound'' to the current circuit with the {\vt b}
and {\vt be} options.  If {\vt be}, the block is bound as an ``exec''
codeblock, and if {\vt b} is given, the block is bound as a
``control'' codeblock.  Each circuit has one of each type, which are
by default derived from the {\vt .exec} and {\vt .control} statements
from the circuit file.  Binding an external codeblock overrides the
blocks obtained from the file.  If no {\it filename} was given, the
existing binding is deleted from the current circuit, according to
whether the {\vt b} or {\vt be} was given.  Separate calls are
required to unbind both blocks.

Note:  Bound codeblocks are parameter expanded, named codeblocks
are not.  In a named codeblock, parameters are available through
the {\vt @}{\it parmname} (special vector) syntax.

Operating range and Monte Carlo analysis can make use of ``bound''
codeblocks.  In both types of analysis, the ``controls'' codeblock
execution sets a variable indicating whether the circuit simulated
properly according to user specified criteria.  When a margin analysis
file is input, the lines between {\vt .control} and {\vt .endc} become
the default controls codeblock.  Similarly, the lines between {\vt
.exec} and {\vt .endc} become the default exec codeblock.  A bound
codeblock will always supersede the default codeblock.

!!SEEALSO
oprngfile
iocmds

!! commands.tex 092611
!!KEYWORD
dumpnodes
!!TITLE
dumpnodes command
!!HTML 
    command: <tt>dumpnodes</tt>

    <p>
    This command prints, on the standard output, a table of the most
    recently computed node voltages (and branch currents) for the
    current circuit.
!!LATEX dumpnodes commands.tex
\begin{quote}\vt
dumpnodes
\end{quote}

This command prints, on the standard output, a table of the most
recently computed node voltages (and branch currents) for the current
circuit.

!!SEEALSO
iocmds

!! commands.tex 093015
!!KEYWORD
edit
!!TITLE
edit command
!!HTML 
    command: <tt>edit</tt> [<i>-n</i>][<i>-r</i>] [<i>filename</i>]

    <p>
    The <b>edit</b> command allows the text of an input file to be
    edited.  The command will bring up a text editor loaded with the
    named file.  If no file name is given, the file associated with
    the current circuit will be edited.  If no file is associated with
    the current circuit, the current circuit will be printed into a
    temporary file which is opened for editing.  If no circuits are
    present, an empty file is opened for editing.  Pressing the
    <b>Text Editor</b> button in the <b>Edit</b> menu of the <a
    href="toolbar"><b>Tool Control</b></a> window is equivalent to
    giving the <b>edit</b> command without arguments.

    <p>
    It should be noted that one can also provide input to
    <i>WRspice</tt> from an arbitrary text editor by "saving" the
    file to the active <a href="fifo">fifo</a> file that
    <i>WRspice</i> creates in the user's home directory.  This is a
    special file the contains a port into <i>WRspice</i>, whereby data
    written to the fifo appear in <i>WRspice</i> as if sourced from a
    regular file (if <i>WRspice</i> is busy, the fifo write will block
    until <i>WRspice</i> is ready).

    <p>
    The editor used is named by the <a
    href="editor"><tt>editor</tt></a> variable, the
    <b>SPICE_EDITOR</b> <a href="environment">environment</a>
    variable, or the <b>EDITOR</b> environment variable, in that
    order.  If none of these is set, or the first one found is set to
    "<tt>xeditor</tt>", the <a href="xeditor">internal editor</a> is
    used, if graphics is available.  If graphics is not available and
    no editor is specified, <i>WRspice</i> will attempt to use the
    "<tt>vi</tt>" editor.  The internal editor has the advantage of
    asynchronous deck sources with the edit window displayed at all
    times, through the <b>Source</b> button in the editor's
    <b>Options</b> menu.  The <a href="xeditorcom"><b>xeditor</b></a>
    command is similar to the <b>edit</b> command, but will always
    call the internal editor.

    <p>
    If an external editor is used, if graphics is available the
    default action is to start the editor in a new <tt>xterm</tt>
    window.  This can be suppressed if the <a
    href="noeditwin"><tt>noeditwin</tt></a> variable is set.  This
    variable should be set if the external editor creates its own
    window to avoid the unneeded <tt>xterm</tt>.  It can also be set
    for an editor such as <tt>vi</tt>, in which case the editing will
    take place in the same window used to interact with
    <i>WRspice</i>.

    <p>
    The <tt>-r</tt> and <tt>-n</tt> options are relevant only when the
    internal editor is <i>not</i> being used, and the editor is a
    text-mode editor such as <tt>vi</tt> and <tt>noeditwin</tt> is set
    so that editing takes place in the console controlling
    <i>WRspice</i>.  If this is the case, after quitting the editor,
    the file will be sourced automatically if the text was saved.  The
    <tt>-n</tt> (no source) option prevents this, and should be given
    if the editor is used to browse files that are not SPICE input
    files.  The <tt>-r</tt> (reuse) option will reuse the existing
    circuit for the automatic source, rather than creating a new one. 
    This saves memory, but prevents revisiting earlier revisions of
    the circuit.  If the internal editor, or any editor that creates
    its own window is used, <i>WRspice</i> will pop up the editor and
    resume command prompting.  There is no automatic source in this
    case.
!!LATEX edit commands.tex
The {\cb edit} command allows the text of an input file to be edited.
\begin{quote}\vt
edit [-n][-r] [{\it filename\/}]
\end{quote}
The command will bring up a text editor loaded with the named file. 
If no file name is given, the file associated with the current circuit
will be edited.  If no file is associated with the current circuit,
the current circuit will be printed into a temporary file which is
opened for editing.  If no circuits are present, an empty file is
opened for editing.  Pressing the {\cb Text Editor} button in the {\cb
Edit} menu of the {\cb Tool Control} window is equivalent to giving
the {\cb edit} command without arguments.

It should be noted that one can also provide input to {\WRspice}> from
an arbitrary text editor by ``saving'' the file to the active fifo
file (see \ref{fifo}) that {\WRspice} creates in the user's home
directory.  This is a special file the contains a port into
{\WRspice}, whereby data written to the fifo appear in {\WRspice} as
if sourced from a regular file (if {\WRspice} is busy, the fifo write
will block until {\WRspice} is ready).

The editor used is named by the {\et editor} variable, the {\et
SPICE\_EDITOR} environment variable, or the {\et EDITOR} environment
variable, in that order.  If none of these is set, or the first one
found is set to ``{\vt xeditor}'', the internal editor is used, if
graphics is available.  If graphics is not available and no editor is
specified, {\WRspice} will attempt to use the ``{\vt vi}'' editor. 
The internal editor has the advantage of asynchronous deck sources
with the edit window displayed at all times, through the {\cb Source}
button in the editor's {\cb Options} menu.  The {\cb xeditor} command
is similar to the {\cb edit} command, but will always call the
internal editor.  See \ref{xeditor} for a description of the internal
editor.

If an external editor is used, if graphics is available the default
action is to start the editor in a new {\vt xterm} window.  This can
be suppressed if the {\et noeditwin} variable is set.  This variable
should be set if the external editor creates its own window to avoid
the unneeded {\vt xterm}.  It can also be set for an editor such as
{\vt vi}, in which case the editing will take place in the same window
used to interact with {\WRspice}.

The {\vt -r} and {\vt -n} options are available only when the internal
editor is {\it not} being used, and the editor is a text-mode editor
such as {\vt vi} and {\et noeditwin} is set so that editing takes
place in the console controlling {\WRspice}.  If this is the case,
after quitting the editor, the file will be sourced automatically if
the text was saved.  The {\vt -n} (no source) option prevents this,
and should be given if the editor is used to browse files that are not
SPICE input files.  The {\vt -r} (reuse) option will reuse the
existing circuit for the automatic source, rather than creating a new
one.  This saves memory, but prevents revisiting earlier revisions of
the circuit.  If the internal editor, or any editor that creates its
own window is used, {\WRspice} will pop up the editor and resume
command prompting.  There is no automatic source in this case.

!!SEEALSO
setcirc
iocmds
fifo

!! commands.tex 022514
!!KEYWORD
listing
!!TITLE
listing command
!!HTML 
    command: <tt>listing</tt> [<tt>l</tt>[<tt>ogical</tt>]]
        [<tt>p</tt>[<tt>hysical</tt>]] [<tt>d</tt>[<tt>eck</tt>]]
        [<tt>e</tt>[<tt>xpand</tt>]] [<tt>n</tt>[<tt>ocontinue</tt>]]

    <p>
    The <b>listing</b> command is used to generate a listing of the
    current circuit.  The command will print a listing of the current
    circuit to the standard output.  The arguments control the format
    of the listing.  A <tt>logical</tt> listing is one in which
    comments are removed and continuation lines are appended to the
    end of the continued line.  A <tt>physical</tt> listing is one in
    which comments and continuation lines are preserved.  A
    <tt>deck</tt> listing is a <tt>physical</tt> listing without line
    numbers, so as to be acceptable to the circuit parser - it
    recreates the input file verbatim.  The last option,
    <tt>expand</tt>, is orthogonal to the previous three - it requests
    that the circuit be printed after subcircuit expansion.  Note that
    only in an expanded listing are error messages associated with
    particular lines visible.  When using <tt>deck</tt> and
    <tt>expand</tt>, by default long lines are broken into
    continuation lines.  If the <tt>nocontinue</tt> option is also
    given, this will not be done.  This option is ignored in other
    cases.

    <p>
    If no argument is given, <tt>logical</tt> is understood.
!!LATEX listing commands.tex
The {\cb listing} command is used to generate a listing of the current
circuit.
\begin{quote}\vt
listing [l[ogical]] [p[hysical]] [d[eck]] [e[xpand]] [n[ocontinue]]
\end{quote}
The command will print a listing of the current circuit to the
standard output.  The arguments control the format of the listing.  A
{\vt logical} listing is one in which comments are removed and
continuation lines are appended to the end of the continued line.  A
{\vt physical} listing is one in which comments and continuation lines
are preserved.  A {\vt deck} listing is a {\vt physical} listing
without line numbers, so as to be acceptable to the circuit parser ---
it recreates the input file verbatim.  The last option, {\vt expand},
is orthogonal to the previous three --- it requests that the circuit
be printed after subcircuit expansion.  Note that only in an expanded
listing are error messages associated with particular lines visible. 
When using {\vt deck} and {\vt expand}, by default long lines are
broken into continuation lines.  If the {\vt nocontinue} option is
also given, this will not be done.  This option is ignored in other
cases.

If no argument is given, {\vt logical} is understood.
 
!!SEEALSO
iocmds
source

!! commands.tex 120424
!!KEYWORD
load
!!TITLE
load command
!!HTML 
    command: <tt>load</tt> [<i>filename</i>] [<tt>-p</tt> <i>printfile</i>]
      [<tt>-c</tt><i>N</i>[<tt>+</tt>[<i>M</i>]] <i>datafile</i>] [...]

    <p>
    The <b>load</b> command loads data from the files given.  Several
    file formats are supported, as is discussed below.

    <p>
    The file data will be converted into internal plot structures
    containing vectors available for printing, plotting, and other
    manipulation just as if the analysis had been run.  The last plot
    read becomes the current plot.  Data files can also be loaded from
    the <b>Load</b> button in the <b>Files</b> menu of the <a
    href="toolbar"><b>Tool Control</b></a> window.  A file name given
    without a path prefix is searched for in the <a
    href="sourcepath">source path</a>.
 
    <p>
    The <b>load</b> command is internet aware, i.e., if a given
    filename has an <tt>http://</tt> or <tt>ftp://</tt> prefix, the
    file will be downloaded from the internet and loaded.  The file is
    transferred as a temporary file, so if a permanent local copy is
    desired, the <a href="write"><b>write</b></a> command should be
    used to save a file to disk.

    <p>
    ASCII and binary rawfiles can be listed without options.  These
    formats are auto-detected and the file data will be processed
    appropriately.  The rawfile format is the native format used in
    <i>WRspice</i> and Berkeley SPICE3.

    <p>
    An additional supported auto-detected file format is the
    <a href="csdffilefmt">Common Simulation Data Format (CSDF)</a>.
    This is considered to be obsolete but is still supported (for
    now) for backward compatibility.  Originally, CSDF was generated
    by <a href="hspicesim">HSPICE</a> and read by the WaveView
    plotting tool, and support provided interoperability between the
    three tools.  Presently (Dec. 2024) CSDF is not generated by
    HSPICE nor is it accepted by WaveView, however WaveView will now
    accept rawfiles, so the original reason for CSDF support no
    longer applies.

    <p>
    In earlier releases of HSPICE, "<tt>.options csdf=1</tt>" and
    "<tt>.options post=csdf</tt>" would produce CSDF files.

    <p>
    Addditionally, <a href="csvfilefmt">CSV files</a> are recognized
    by a "<tt>.csv</tt>" extension.  With special comments, these
    "comma separated variable" files contain most of the data found
    in the rawfile format.

    <p>
    In <i>WRspice</i> rawfiles, CSV files, or CSDF files can be
    produced by the <b>Save Plot</b> button in <a
    href="plotpanel"><b>plot</b></a> windows,
    the <a href="write"><b>write</b></a> and <a
    href="run"><b>run</b></a> commands, and may be generated in <a
    href="batchmode">batch mode</a>.

    <p>
    If no argument is given, <i>WRspice</i> will attempt to load a
    file with a default name.  The default name is the value of the <a
    href="rawfile"><tt>rawfile</tt></a> variable if set, or the
    argument to the <a href="-r"><tt>-r</tt></a> command line option
    if one was given, or "<tt>rawspice.raw</tt>".

    <p>
    If the option flag <tt>-p</tt> appears before a file name, the
    file that follows is assumed to be a file produced with the
    <i>WRspice</i> <a href="print"><b>print</b></a> command.  This
    works for the default columnar print format only.  The format is
    common to other SPICE programs.  This can be useful on occasion,
    but the print format lacks to expressiveness of the plot data file
    formats.

    <p>
    The <tt>-c</tt> option will allow parsing of general columnar
    numerical data, and is useful for extracting data from output from
    other programs, or report text files.  The option has several forms.

    <dl>
    <dt><tt>-c</tt><i>N</i><dd>
    <i>N</i> is an integer greater than 0, representing the number of
    numerical columns.  A plot with <i>N</i> vectors will be created,
    with names "<tt>column_0</tt>", "<tt>column_1</tt>", etc.  The
    <tt>column_0</tt> vector will be taken as the scale vector.  The
    file is read, amd all lines that start with <i>N</i> space or
    comma-separated numbers will contribute to the vectors.  Any
    additional text on the line following the numbers is ignored. 
    Lines that don't provide <i>N</i> numbers are also ignored.
    </dl>

    <dl>
    <dt><tt>-c</tt><i>N</i><tt>+</tt><dd>
    As above, but lines must provide exactly <i>N</i> numbers or will
    be ignored.  Parsing of a line stops if a token is read that is
    not a number, so that any numbers following a non-number in the
    line will always be ignored.
    </dl>

    <dl>
    <dt><tt>-c</tt><i>N</i><tt>+</tt><i>M</i><dd>
    This assumes that there are <i>N</i> columns of numbers in a
    logical block, followed by a logical block containing <i>M</i>
    columns of numbers.  We assume that there are <i>N</i> + <i>M</i>
    vectors, and the lines have been broken to avoid being too long,
    as is done in the SPICE printing if the number of columns to be
    printed would exceed the page width.  However, it is required that
    <i>M</i> be less than <i>N</i>, and only one "wrap" can be
    accommodated.  If for some reason the <i>M</i> vectors end up
    being a different length than the <i>N</i> vectors, they will be
    truncated or zero-padded so that all vectors will have the same
    length.
    </dl>

    <p>
    When reading columnar or print data, the scale vector is checked
    for cyclicity, and the plot dimensions will be set if found.
    Only two-dimensional vectors are produced, higher dimensions
    can not be determined.
!!LATEX load commands.tex
The {\cb load} command loads data from the files given.
\begin{quote}\vt
load [{\it filename\/}] [{\vt -p} {\it printfile\/}]
 [{\vt -c}{\it N\/}[{\vt +}[{\it M\/}]] [{\it datafile\/}] [...]
\end{quote}

Several file formats are supported, as is discussed below.

The file data will be converted into internal plot structures
containing vectors available for printing, plotting, and other
manipulation just as if the analysis had been run.  The last plot read
becomes the current plot.  Data files can also be loaded from the {\cb
Load} button in the {\cb Files} menu of the {\cb Tool Control} window. 
A file name given without a path prefix is searched for in the source
path.

The {\cb load} command is internet aware, i.e., if a given filename
has an {\vt http://} or {\vt ftp://} prefix, the file will be
downloaded from the internet and loaded.  The file is transferred as a
temporary file, so if a permanent local copy is desired, the {\cb
write} command should be used to save a file to disk.

ASCII and binary rawfiles can be listed without options.  These
formats are auto-detected and the file data will be processed
appropriately.  The rawfile format is the native format used in
{\WRspice} and Berkeley SPICE3.

An additional supported auto-detected file format is the Common
Simulation Data Format (CSDF).  This is considered to be obsolete
but is still supported (for now) for backward compatibility.
Originally, CSDF was generated by HSPICE and read by the WaveView
plotting tool, and support provided interoperability between the
three tools.  Presently (Dec. 2024) CSDF is not generated by HSPICE
nor is it accepted by WaveView, however WaveView will now accept
rawfiles, so the original reason for CSDF support no longer
applies.

In earlier releases of HSPICE ``{\vt .options csdf=1}'' and ``{\vt
.options post=csdf}'' would produce CSDF files.

Addditionally, CSV files are recognized by a ``{\vt .csv}''
extension.  With special comments, these ``comma separated variable''
files contain most of the data found in the rawfile format.

In {\WRspice} rawfiles, CSV files, or CSDF files can be produced
by the {\cb Save Plot} button in {\cb plot} windows, the {\cb write}
and {\cb run} commands, and may be generated in batch mode.

If no argument is given, {\WRspice} will attempt to load a file with a
default name.  The default name is the value of the {\et rawfile}
variable if set, or the argument to the {\vt -r} command line option
if one was given, or ``{\vt rawspice.raw}''.

If the option flag {\vt -p} appears before a file name, the file that
follows is assumed to be a file produced with the {\WRspice} {\cb
print} command.  This works for the default columnar print format
only.  The format is common to other SPICE programs.  This can be
useful on occasion, but the print format lacks to expressiveness of
the plot data file formats.

The {\vt -c} option will allow parsing of general columnar numerical
data, and is useful for extracting data from output from other
programs, or report text files.  The option has several forms.

\begin{description}
\item{\vt -c}{\it N}\\
{\it N} is an integer greater than 0, representing the number of
numerical columns.  A plot with {\it N} vectors will be created,
with names ``{\vt column\_0}'', ``{\vt column\_1}'', etc.  The
{\vt column\_0} vector will be taken as the scale vector.  The file is
read, amd all lines that start with {\it N} space or comma-separated
numbers will contribute to the vectors.  Any additional text on the
line following the numbers is ignored.  Lines that don't provide
{\it N} numbers are also ignored.

\item{\vt -c}{\it N\/}{\vt +}\\
As above, but lines must provide exactly {\it N} numbers or will
be ignored.  Parsing of a line stops if a token is read that is
not a number, so that any numbers following a non-number in the
line will always be ignored.

\item{-c}{\it N\/}{\vt +}{\it M}\\
This assumes that there are {\it N} columns of numbers in a logical
block, followed by a logical block containing {\it M} columns of
numbers.  We assume that there are {\it N} + {\it M} vectors, and the
lines have been broken to avoid being too long, as is done in the
SPICE printing if the number of columns to be printed would exceed the
page width.  However, it is required that {\it M} be less than {\it
N}, and only one ``wrap'' can be accommodated.  If for some reason the
{\it M} vectors end up being a different length than the {\it N}
vectors, they will be truncated or zero-padded so that all vectors
will have the same length.
\end{description}

When reading columnar or print data, the scale vector is checked for
cyclicity, and the plot dimensions will be set if found.  Only
two-dimensional vectors are produced, higher dimensions can not be
determined.

!!SEEALSO
rawfilefmt
iocmds

!!REDIRECT formatstr print#format

!! commands.tex 012624
!!KEYWORD
print
!!TITLE
print command
!!HTML 
    command: <tt>print</tt> [/<i>format</i>] [<tt>col | line</tt>]
    <i>expr</i> [...]

    <p>
    The <b>print</b> command is used to print vector data on-screen or
    to a file using output redirection.  The command prints the values
    of the given <a href="explists">expressions</a> to the standard
    output.

    <p>
    If command line input can be recognized as an expression list, the
    print command will be invoked implicitly.  In this case, the line
    cannot contain directives or a format string, This saves a bit of
    typing when using the <i>WRspice</i> command line as a calculator,
    for example.

    <p>
    The default is to use exponential format for all values, with the
    number of digits given by the <a href="numdgt"><tt>numdgt</tt></a>
    variable.  However this, and some other presentation attributes,
    can be specified in the format string, if given.  If given, the
    format string must be the first argument, and the string must
    start with a '/' (forward slash) character.  The syntax is further
    described below.
    
    <p>
    All vectors listed will be printed in the same format, except for
    the scale vector, which is printed by default in the
    "<tt>col</tt>" mode, and is printed with the default notation.

    <p>
    If <tt>line</tt> is specified, the value of each expression is
    printed on one line (or more if needed).  If all expressions have
    a length of 1, the default style is <tt>line</tt>, otherwise
    <tt>col</tt> is the default.
 
    <p>
    If <tt>col</tt> is specified, the values are printed in columns. 
    This is the default if any of the vectors are multi-valued.  This
    mode makes use of the <a href="height"><tt>height</tt></a> and <a
    href="width"><tt>width</tt></a> variables to define the page size. 
    By default, per-page formatting is applied, with page eject
    characters between pages.  With column formatting, by default the
    scale vector (<tt>time</tt>, <tt>frequency</tt>) will be shown in
    the first column.  If there are more vectors that can be
    accommodated with the page width, the print will be repeated, with
    a new set of columns (other than the scale) until all variables
    have been printed.

    <p>
    If the expression is "<tt>all</tt>", all of the vectors in the
    current plot are printed.  If no arguments are given, the
    arguments to the last given <b>print</b> command are used.  If
    only the format argument is given, the arguments from the last
    given <b>print</b> command other than the format are used, with
    the new format.

    <p>
    If the argument list contains a token consisting of a single
    period ("."), this is replaced with the vector list found in the
    first <a href=".print"><tt>.print</tt></a> line from the input
    file with the same analysis type as the current plot.  For
    example, if the input file contains
    <blockquote><tt>
    .tran .1u 10u<br>
    .print tran v(1) v(2)
    </tt></blockquote>
    then one can type "<tt>run</tt>" followed by "<tt>print .</tt>" to
    print <tt>v(1)</tt> and <tt>v(2)</tt>.

    <p>
    The related syntax <tt>.@</tt><i>N</i> is also recognized, where
    <i>N</i> is an integer representing the <i>N</i>'th matching
    <tt>.print</tt> line.  The count is 1-based, but <i>N</i>=0 is
    equivalent to <i>N</i>=1.  The token is effectively replaced by
    the vector list from the specified <tt>.print</tt> line found in
    the circuit deck.

    <p>
    The print command is responsive to the following variables.

    <dl>
    <dt><a href="width"><tt>width</tt></a>,
      <a href="height"><tt>height</tt></a><dd>
    These option variables set the page size (in characters and lines)
    assumed for the output when directed to a flie or device.  If not
    set, a standard A-size page is assumed.  When printing on-screen,
    the actual screen or window size will be used.
    </dl>

    <dl>
    <dt><a href="nopage"><tt>nopage</tt></a><dd>
    This boolean option will suppress page breaks between pages when
    set.  This is always true when printing to a screen.  Page breaks
    consist of a form-feed character, which may be followed by a
    two-line page header.
    </dl>

    <p>
    The following variables are all booleans, and apply only to column
    mode of the <b>print</b> command.

    <dl>
    <dt><a href="printautowidth"><tt>printautowidth</tt></a><dd>
    When set, the window width or the setting of the <tt>width</tt>
    variable is ignored, and a line width sufficient to include
    columns for all variables being printed is used, if possible. 
    There is a hard limit of 2048 characters in the lines.  Variables
    that don't fit are printed subsequently, as in the case with
    <tt>printautowidth</tt> not set.
    </dl>

    <dl>
    <dt><a href="printnoheader"><tt>printnoheader</tt></a><dd>
    When set, don't print the top header, which consists of the plot
    title, circuit name, data, and a line of "<tt>-</tt>" characters
    (three lines).  This is normally printed at the top of the first
    page of output.
    </dl>

    <dl>
    <dt><a href="printnoindex"><tt>printnoindex</tt></a><dd>
    When set, don't print the vector indices, which are otherwise
    printed in the leftmost column of each page.
    </dl>

    <dl>
    <dt><a href="printnopageheader"><tt>printnopageheader</tt></a><dd>
    When set, don't print the page header.  The page header, which
    consists of the variable names at the top of each column and a
    line of "<tt>-</tt>" characters, is otherwise printed at the top
    of each page of output.
    </dl>

    <dl>
    <dt><a href="printnoscale"><tt>printnoscale</tt></a><dd>
    When set, don't print the scale vector in the leftmost data
    column.  This is otherwise done for each set of variables printed. 
    The Spice3 <tt>noprintscale</tt> variable is an alias, but
    deprecated.
    </dl>

    <a name="format"></a>
    <p>
    The syntax of the format string to the <b>print</b> command allows
    overriding the states of the switches listed above while printing. 
    The format string, if used, must be the first argument given to
    the <b>print</b> command, and must begin with a '<tt>/</tt>'
    (forward slash) character.  It contains no space, and is a
    sequence of the characters and forms shown below, all of which are
    optional.  This format string syntax also applies to the <a
    href="sprint"><b>sprint</b></a> command.

    <dl>
    <dt><i>integer</i><dd>
    The <i>integer</i> is the number of figures to the right of the
    decimal point to print.  If not given, the value of the <a
    href="numdgt"><tt>numdgt</tt></a> variable is used if set,
    otherwise a default of 6 is used.

    <dt><tt>e</tt><dd>
    Use exponential print format.  This is the deffault so this input
    is redundant.

    <dt><tt>f</tt><dd>
    If '<tt>f</tt>' is found in the string, data values will be printed
    using a fixed-point format, rather than the default exponential
    format.  If the vector has assigned units, then the printing will
    use SPICE scaling codes and the units abbreviation will be
    appended, e.g. 2.34mA.

    <dt><tt>g</tt><dd>
    Use a fixed-point format with SPICE scaling codes for all values,
    and do not print units abbreviations.
    </dl>

    The remaining options apply/unapply the switches, whose defaults
    are set by the <tt>print...</tt> variables described above.  The
    format string always overrides the variables.

    <dl>
    <dt><tt>-</tt><dd>
    Negate the effect of options that follow.
    <dt><tt>+</tt><dd>
    Don't negate effect of options that follow.  This is redundant
    unless it follows '<tt>-</tt>'.
    <dt><tt>a</tt><dd>
    Take <tt>printautowidth</tt> as if set, or not set if negated.
    <dt><tt>b</tt><dd>
    Take <tt>nopage</tt> as if set, or not set if negated.
    <dt><tt>h</tt><dd>
    Take <tt>printnoheader</tt> as if set, or not set if negated.
    <dt><tt>i</tt><dd>
    Take <tt>printnoindex</tt> as if set, or not set if negated.
    <dt><tt>p</tt><dd>
    Take <tt>printnopageheader</tt> as if set, or not set if negated.
    <dt><tt>s</tt><dd>
    Take <tt>printnoscale</tt> as if set, or not set if negated.
    <dt><tt>n</tt><dd>
    Alias for "<tt>abhips</tt>".
    </dl>

    <p>
    Examples
    <blockquote>
      <tt>print /3f+ahi-ps ...</tt>
    </blockquote>
    Print using a fixed three decimal place format, and as if
    <tt>printautowidth</tt>, <tt>printnoheader</tt>, and
    <tt>printnoindex</tt> were set, and <tt>printnopageheader</tt> and
    <tt>printnoscale</tt> were unset.

    <blockquote>
      <tt>print /n ...</tt>
    </blockquote>
    Print the vectors listed, and nothing but the vectors listed. 
    This is useful when one wants to simply feed a list of numbers to
    another application.

    <blockquote>
      <tt>print /n-s ...</tt>
    </blockquote>
    As above, but print the scale in the first column.  The
    '<tt>-</tt>' can be used as shown to undo individual implicit
    settings from '<tt>n</tt>'.

    <blockquote>
     <tt>print /3f v(5)</tt>
    </blockquote>
    This prints v(5) to three decimal places in fixed-point notation.
    <blockquote>
      <tt>print /4f v(2) v(3) v(4) > myfile</tt>
    </blockquote>
    This prints the vectors to four decimal places in the file "myfile".
    <blockquote>
      <tt>print 2*v(2)+v(3) v(4)-v(1)</tt>
    </blockquote>
    This prints the computed quantities using the default format.
!!LATEX print commands.tex
The {\cb print} command is used to print vector data on-screen or
to a file using output redirection.
\begin{quote}\vt
print [/{\it format\/}] [col | line] {\it expr\/} [...]
\end{quote}
The command prints the values of the given expressions to the standard
output.

If command line input can be recognized as an expression list, the
print command will be invoked implicitly.  In this case, the line
cannot contain directives or a format string, This saves a bit of
typing when using the {\WRspice} command line as a calculator, for
example.

The default is to use exponential format for all values, with the
number of digits given by the {\et numdgt} variable.  However this,
and some other presentation attributes, can be specified in the format
string, if given.  If given, the format string must be the first
argument, and the string must start with a '/' (forward slash)
character.  The syntax is further described below.

All vectors listed will be printed in the same format, except for the
scale vector, which is printed by default in the {\vt col} mode, which
is printed with the default notation.

If {\vt line} is specified, the value of each expression is printed on
one line (or more if needed).  If all expressions have a length of 1,
the default style is {\vt line}, otherwise {\vt col} is the default.

If {\vt col} is specified, the values are printed in columns.  This is
the default if any of the vectors are multi-valued.  This mode makes
use of the {\vt height} and {\vt width} variables to define the page
size.  By default, per-page formatting is applied, with page eject
characters between pages.  With column formatting, by default the
scale vector ({\et time}, {\et frequency}) will be shown in the first
column.  If there are more vectors that can be accommodated with the
page width, the print will be repeated, with a new set of columns
(other than the scale) until all variables have been printed.

If the expression is ``{\vt all}'', all of the vectors in the current
plot are printed.  If no arguments are given, the arguments to the
last given {\cb print} command are used.  If only the format argument
is given, the arguments from the last given {\cb print} command other
than the format are used, with the new format.

If the argument list contains a token consisting of a single period
(``.''), this is replaced with the vector list found in the first {\vt
.print} line from the input file with the same analysis type as the
current plot.  For example, if the input file contains
\begin{quote}\vt
    .tran .1u 10u\\
    .print tran v(1) v(2)\\
\end{quote}
then one can type ``{\vt run}'' followed by ``{\vt print .}'' to print
{\vt v(1)} and {\vt v(2)}.

The related syntax {\vt .@}{\it N} is also recognized, where {\it N}
is an integer representing the {\it N\/}'th matching {\vt .print} line. 
The count is 1-based, but {\it N\/}=0 is equivalent to {\it N\/}=1. 
The token is effectively replaced by the vector list from the
specified {\vt .print} line found in the circuit deck.

The print command is responsive to the following variables.

\begin{description}
\item{{\et width}, {\et height}}\\
These option variables set the page size (in characters and lines)
assumed for the output when directed to a flie or device.  If not set,
a standard A-size page is assumed.  When printing on-screen, the
actual screen or window size will be used.

\item{\et nopage}\\
This boolean option will suppress page breaks between pages when set. 
This is always true when printing to a screen.  Page breaks consist of
a form-feed character, which may be followed by a two-line page
header.
\end{description}

The following variables are all booleans, and apply only to column
mode of the {\cb print} command.

\begin{description}
\item{\et printautowidth}\\
When set, the window width or the setting of the {\et width} variable
is ignored, and a line width sufficient to include columns for all
variables being printed is used, if possible.  There is a hard limit
of 2048 characters in the lines.  Variables that don't fit are printed
subsequently, as in the case with {\et printautowidth} not set.

\item{\et printnoheader}\\
When set, don't print the top header, which consists of the plot
title, circuit name, data, and a line of ``{\vt -}'' characters (three
lines).  This is normally printed at the top of the first page of
output.

\item{\et printnoindex}\\
When set, don't print the vector indices, which are otherwise printed
in the leftmost column of each page.

\item{\et printnopageheader}\\
When set, don't print the page header.  The page header, which
consists of the variable names at the top of each column and a line of
``{\vt -}'' characters, is otherwise printed at the top of each page
of output.

\item{\et printnoscale}\\
When set, don't print the scale vector in the leftmost data column. 
This is otherwise done for each set of variables printed.  The Spice3
{\et noprintscale} variable is an alias, but deprecated.
\end{description}

\index{format string}

The syntax of the format string to the {\cb print} command allows
overriding the states of the switches listed above while printing. 
The format string, if used, must be the first argument given to the
{\cb print} command, and must begin with a `{\vt /}' (forward slash)
character.  It contains no space, and is a sequence of the characters
and forms shown below, all of which are optional.  The format string
syntax also applies to the {\cb sprint} command.

\begin{description}
\item{\it integer}\\
The {\it integer} is the number of figures to the right of the decimal
point to print.  If not given, the value of the {\et numdgt} variable
is used if set, otherwise a default of 6 is used.

\item{\vt e}\\
Use exponential print format.  This is the default so this input is
redundant.

\item{\vt f}\\
If `{\vt f}' is found in the string, data values will be printed using
a fixed-point format, rather than the default exponential format.  If
the vector has assigned units, then the printing will use SPICE
scaling codes and the units abbreviation will be appended, e.g.
2.34mA.

\item{\vt g}\\
Use a fixed-point format with SPICE scaling codes for all values, and
do not print units abbreviations.
\end{description}

The remaining options apply/unapply the switches, whose defaults are
set by the {\et print...} variables described above.  The format
string always overrides the variables.

\begin{description}
\item{\vt -}\\
Negate the effect of options that follow.
\item{\vt +}\\
Don't negate effect of options that follow.  This is redundant
unless it follows `{\vt -}'.
\item{\vt a}\\
Take {\et printautowidth} as if set, or not set if negated.
\item{\vt b}\\
Take {\et nopage} as if set, or not set if negated.
\item{\vt h}\\
Take {\et printnoheader} as if set, or not set if negated.
\item{\vt i}\\
Take {\et printnoindex} as if set, or not set if negated.
\item{\vt p}\\
Take {\et printnopageheader} as if set, or not set if negated.
\item{\vt s}\\
Take {\et printnoscale} as if set, or not set if negated.
\item{\vt n}\\
Alias for ``{\vt abhips}''.
\end{description}

Examples
\begin{quote}\vt
print /3f+ahi-ps ...
\end{quote}
Print using a fixed three decimal place format, and as if {\et
printautowidth}, {\et printnoheader}, and {\et printnoindex} were set,
and {\et printnopageheader} and {\et printnoscale} were unset.
\begin{quote}\vt
print /n ...
\end{quote}
Print the vectors listed, and nothing but the vectors listed.  This is
useful when one wants to feed a simple list of numbers to another
application.
\begin{quote}\vt
print /n-s ...
\end{quote}
As above, but print the scale in the first column.  The `{\vt -}' can
be used as shown to undo individual implicit settings from `{\vt n}'.
\begin{quote}\vt
print /3f v(5)
\end{quote}
This prints v(5) to three decimal places in fixed-point notation.
\begin{quote}\vt
print /4f v(2) v(3) v(4) > myfile
\end{quote}
This prints the vectors to four decimal places in the file "myfile".
\begin{quote}\vt
print 2*v(2)+v(3) v(4)-v(1)
\end{quote}
This prints the computed quantities using the default format.

!!SEEALSO
iocmds

!! commands.tex 011721
!!KEYWORD
printf
!!TITLE
printf command
!!HTML 
    command: <tt>printf</tt> [/<i>format</i>] [<tt>col | line</tt>]
    <i>expr</i> [...]

    <p>
    This is equivalent to the <a href="print"><b>print</b></a>
    command, however output goes to the logging file generated during
    <a href="oprng_analysis">operating ramge</a> and <a
    href="monte">Monte Carlo</a> analysis.  This is used in codeblocks
    evaluated while those processes are active.
!!LATEX printf commands.tex
The {\cb printf} command is equivalent to the {\cb print} command,
however output goes to the logging file for use in operating range and
Monte Carlo analysis.
\begin{quote}\vt
print [/{\it format\/}] [col | line] {\it expr\/} [...]
\end{quote}
This is used in codeblocks evaluated while those processes are active.

!!SEEALSO
iocmds

!! commands.tex 030519
!!KEYWORD
return
!!TITLE
return command
!!HTML
   command: <tt>return</tt> [<i>expression</i> ...]

   <p>
   This will cause the currently executing script or <a
   href="codeblock">codeblock</a> to terminate immediately and return
   to the caller.  If an expression follows, it will be evaluated and
   the <a href="strcmds">global return value</a> will be set to the
   result.  The global return value is an internal global variable
   that can be set and queried from any script or the command prompt
   as the special variable name <a href="variablesub"><tt>$?</tt></a>.
   The <a href="retval"><b>retval</b></a> command is used to set the
   global return value without immediately returning.
!!LATEX return commands.tex
This will cause the currently executing script or codeblock to
terminate immediately and return to the caller.
\begin{quote}\vt
return [{\it expression\/}]
\end{quote}
If an expression follows, it will be evaluated and the global return
value will be set to the result.  The global return value is an
internal global variable that can be set and queried from any script
or the comand prompt as the special variable name {\vt \$?}.  The {\cb
retval} command is used to set the global return value without
immediately returning.

!!SEEALSO
iocmds
retval
source

!! commands.tex 012109
!!KEYWORD
sced
!!TITLE
sced command
!!HTML
   command: <tt>sced</tt> [<i>filename</i> ...]

   <p>
   The <b>sced</b> command brings up the <i>Xic</i> graphical editor
   (if available) in electrical mode.  This allows schematic capture,
   with most of the <i>WRspice</i> functionality directly available
   through the <i>Xic</i> interface.  If the <i>Xic</i> graphical
   editor is not available for execution, this command will exit with
   a message indicating that <i>Xic</i> is not available.  Otherwise,
   the <b>sced</b> command will bring up the schematic capture
   front-end with file <i>filename</i>, which must be an <i>Xic</i>
   input file (<i>not</i> a standard <i>WRspice</i> circuit file!). 
   If the current circuit originated from <i>Xic</i>, that file will
   be loaded into <i>Xic</i> if no <i>filename</i> is given.

   <p>
   When <i>Xic</i> saves a native-mode top-level cell containing a
   schematic, the circuit SPICE listing is appended to the file. 
   <i>WRspice</i> is smart enough to ignore the geometric information
   in these files and read only the circuit listing.

   <p>
   <i>Xic</i> can also be started from the <b>Xic</b> button in the
   <b>Edit</b> menu of the <b>Tool Control</b> window.
!!LATEX sced commands.tex
The {\cb sced} command brings up the {\Xic} graphical editor (if
available) in electrical mode.
\begin{quote}\vt
sced [{\it filename} ...]
\end{quote}
This allows schematic capture, with most of the {\WRspice}
functionality directly available through the {\Xic} interface.  If the
{\Xic} graphical editor is not available for execution, this command
will exit with a message indicating that {\Xic} is not available. 
Otherwise, the {\cb sced} command will bring up the schematic capture
front-end with file {\it filename\/}, which must be an {\Xic} input
file ({\it not} a standard {\WRspice} circuit file!).  If the current
circuit originated from {\Xic}, that file will be loaded into {\Xic}
if no {\it filename} is given. 

When {\it Xic} saves a native-mode top-level cell containing a
schematic, the circuit SPICE listing is appended to the file. 
{\WRspice} is smart enough to ignore the geometric information in
these files and read only the circuit listing.

{\Xic} can also be started from the {\cb Xic} button in the {\cb Edit}
menu of the {\cb Tool Control} window.

!!SEEALSO
xic:info
iocmds

!! commands.tex 051516
!!KEYWORD
source
!!TITLE
source command
!!HTML 
    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="source#implicit"><b>Implicit Source</b></a><br>
    <a href="source#input"><b>Input Format Notes</b></a>
    </dt></dr></table>

    <p>
    command: <tt>source</tt> [<tt>-r</tt>][<tt>-n</tt>][<tt>-c</tt>]
    <i>file</i> [<i>files</i> ...]

    <p>
    The <b>source</b> command is used to load circuit files and
    command scripts.

    <p>
    If more than one file name is given, the files will be
    concatenated into a temporary file, which is read.  The command
    will read and process circuit descriptions and command text from
    the file(s).  If <a href=".newjob"><tt>.newjob</tt></a> lines are
    found within the files, the input will be partitioned into two or
    more circuit decks, divided by the <tt>.newjob</tt> lines.  Each
    circuit deck is processed independently and in sequence.

    <p>
    If a file does not have a path prefix, it is searched for in the
    search path specified by the <a
    href="sourcepath"><tt>sourcepath</tt></a> variable.  If not in the
    search path or current directory, a full path name must be given.

    <p>
    The <b>source</b> command is internet aware, i.e., if a given
    filename has an <tt>http://</tt> or <tt>ftp://</tt> prefix, the
    file will be downloaded from the internet and sourced.  The file
    is transferred as a temporary file, so if a permanent local copy
    is desired, the <a href="edit"><b>edit</b></a> or <a
    href="listing"><b>listing</b></a> commands should be used to save
    the circuit description to disk.

    <p>
    When an input file or set of files is "sourced", the following
    steps are performed for each circuit deck found.  The logic is
    rather complex, and the following steps illustrate but perhaps
    oversimplify the process.  In particular, the subcircuit/model <a
    href=".cache">cache</a> substitution is omitted here.

    <ol>
    <li>The input is read into a "deck" in memory.  Line continuation
    is applied.

    <li>In interactive mode, the <a href="titleinc">title line</a>
    from the circuit is printed on-screen, unless the <a
    href="noprtitle"><b>noprtitle</b></a> variable is set, in which
    case this printing is suppressed.  The variable can be set by
    checking the box in the <b>source</b> page of the <a
    href="cmdopts"><b>Command Options</b></a> tool from the <a
    href="toolsmenu"><b>Tools</b></a> menu.

    <li>The deck is scanned for <tt>.param</tt> lines which are
    outside of subcircuit definitions.  These are shell expanded, and
    used to evaluate <tt>.if</tt>, <tt>.elif</tt> and similar lines. 
    Lines that are not in scope are ignored.

    <li>Files referenced from <tt>.include</tt> and <tt>.lib</tt>
    lines are resolved and read.  At each level, parameters are
    scanned again, so that <tt>.if</tt>, etc.  lines do the right
    thing at each level.

    <li>Verilog blocks, <tt>.exec</tt> blocks, and <tt>.control</tt>
    blocks are moved out of the main deck into separate storage.

    <li>The <tt>.exec</tt> lines, if any, are executed by the shell.

    <li>The <tt>.options</tt> lines are extracted, shell expanded, and
    evaluated.  During evaluation, the shell receives the assignment
    definitions.

    <li>The remaining lines in the deck are shell expanded.

    <li>Subcircuit expansion is performed.  This takes care of
    parameter expansion within subcircuit definition blocks. 

    <li>The circuit (if any) is parsed, and added to the internal
    circuits list.

    <li>The <tt>.control</tt> lines, if any, and executed by the shell.
    </ol>

    After a <b>source</b>, the current circuit will be the last
    circuit parsed.

    <p>
    There are three option flags available, which modify the behavior
    outlined above.  These can be grouped or given as individual tokens,
    following a '-' character.  Note that if a file name starts with '-',
    it must be quoted with double-quote marks.  The options are applied
    before files are read.

    <dl>
    <dt><tt>r</tt><dd>
    Reuse the current circuit.  The current circuit is destroyed before
    the new circuit is created, which becomes the current circuit.
    This option is ignored if <tt>-n</tt> is also given.
    </dl>

    <dl>
    <dt><tt>n</tt><dd>
    Ignore any circuit definition lines in input.  Executable lines will
    still be executed, but no new circuit will be produced.
    </dl>

    <dl>
    <dt><tt>c</tt>
    Ignore any <tt>.control</tt> commands.  However, <tt>.exec</tt> lines
    will still be executed.
    </dl>

    <dl>
    <dt><tt>n</tt> and <tt>c</tt><dd>
    If both of the <tt>n</tt> and <tt>c</tt> options are given, all lines
    of input except for the first "title" line are taken to be executable,
    and are executed, as if for a startup file.
    </dl>

    <a name="implicit"></a>
    <h2>Implicit Source</h2>

    In many cases, the "<tt>source</tt>" is optional.  If the name of
    an existing file is given as a command, the <tt>source</tt> is
    applied implicitly, provided that the file name does not clash
    with a <i>WRspice</i> command.

    <a name="input"></a>
    <h2>Input Format Notes</h2>

    <p>
    The first line in the input file (after concatenation of multiple
    input files), and the first line following a <tt>.newjob</tt>
    line, is considered a title line and is not parsed but kept as the
    name of the circuit.  The exceptions to this rule are old format
    margin analysis input files and <i>Xic</i> files.

    <p>
    Command lines must be surrounded by the lines <tt>.exec</tt> or
    <tt>.control</tt> and <tt>.endc</tt> in the file, or prefixed by
    "<tt>*@</tt>" or "<tt>*#</tt>" in order to be recognized as
    commands, except in startup files where all lines but the title
    line are taken as executable.  Commands found in <tt>.exec</tt>
    blocks or <tt>*@</tt> lines are executed before the circuit is
    parsed, thus can set variables used in the circuit.  Commands
    found in <tt>.control</tt> blocks or <tt>*#</tt> lines are
    executed after the circuit is parsed.  so a control line of
    "<tt>ac ...</tt>" will work the same as the corresponding
    <tt>.ac</tt> line, for example.  Use of the "comment" control
    prefixes <tt>*@</tt> and <tt>*#</tt> makes it possible to embed
    commands in <i>WRspice</i> input files that will be ignored by
    earlier versions of SPICE.

    <p>
    Shell variables found in the circuit deck (but not in the commands
    text) are evaluated during the source.  The <a
    href="reset"><b>reset</b></a> command can be used to update these
    variables if they are later changed by the shell after sourcing.
!!LATEX source commands.tex
The {\cb source} command is used to load circuit files and command
scripts.
\begin{quote}\vt
source [{\vt -r}] [{\vt -n}] [{\vt -c}] {\it file} [{\it file} ...]
\end{quote}
If more than one file name is given, the files will be concatenated
into a temporary file, which is read.  The command will read and
process circuit descriptions and command text from the file(s).  If
{\vt .newjob} lines are found within the files, the input will be
partitioned into two or more circuit decks, divided by the {\vt
.newjob} lines.  Each circuit deck is processed independently and in
sequence.

If a file does not have a path prefix, it is searched for in the
search path specified by the {\et sourcepath} variable.  If not in the
search path or current directory, a full path name must be given.

The {\cb source} command is internet aware, i.e., if a given filename
has an ``{\vt http://}'' or ``{\vt ftp://}'' prefix, the file will be
downloaded from the internet and sourced.  The file is transferred as
a temporary file, so if a permanent local copy is desired, the {\cb
edit} or {\cb listing} commands should be used to save the circuit
description to disk. 

When an input file or set of files is ``sourced'', the following steps
are performed for each circuit deck found.  The logic is rather
complex, and the following steps illustrate but perhaps oversimplify
the process.  In particular, the subcircuit/model cache substitution
is omitted here.

\begin{enumerate}
\item{The input is read into a ``deck'' in memory.  Line continuation
is applied.}

\item{In interactive mode, the title line from the circuit is printed
on-screen, unless the {\et noprtitle} variable is set, in which case
this printing is suppressed.  The variable can be set by checking the
box in the {\cb source} page of the {\cb Command Options} tool from
the {\cb Tools} menu.}

\item{The deck is scanned for {\vt .param} lines which are outside of
subcircuit definitions.  These are shell expanded, and used to
evaluate {\vt .if}, {\vt .elif} and similar lines.  Lines that are not
in scope are ignored.}

\item{Files referenced from {\vt .include} and {\vt .lib} lines are
resolved and read.  At each level, parameters are scanned again, so
that {\vt .if}, etc.  lines do the right thing at each level.}

\item{Verilog blocks, {\vt .exec} blocks, and {\vt .control} blocks
are moved out of the main deck into separate storage.}

\item{The {\vt .exec} lines, if any, are executed by the shell.}

\item{The {\vt .options} lines are extracted, shell expanded, and
evaluated.  During evaluation, the shell receives the assignment
definitions.}

\item{The remaining lines in the deck are shell expanded.}

\item{Subcircuit expansion is performed.  This takes care of parameter
expansion within subcircuit definition blocks.}

\item{The circuit (if any) is parsed, and added to the internal
circuits list.}

\item{The {\vt .control} lines, if any, and executed by the shell.}
\end{enumerate}

After a {\cb source}, the current circuit will be the last circuit
parsed.

There are three option flags available, which modify the behavior
outlined above.  These can be grouped or given as individual tokens,
following a `--' character.  Note that if a file name starts with
`--', it must be quoted with double-quote marks.  The options are
applied before files are read.

\begin{description}
\item{\vt r}\\
Reuse the current circuit.  The current circuit is destroyed before
the new circuit is created, which becomes the current circuit.  This
option is ignored if {\vt -n} is also given.

\item{\vt n}\\
Ignore any circuit definition lines in input.  Executable lines will
still be executed, but no new circuit will be produced.

\item{\vt c}\\
Ignore any {\vt .control} commands.  However, {\vt .exec} lines will
still be executed.

\item{{\vt n} and {\vt c}}\\
If both of the {\vt n} and {\vt c} options are given, all lines of
input except for the first ``title'' line are taken to be executable,
and are executed, as if for a startup file.
\end{description}

\subsubsection{Implicit Source}
\index{source, implicit}
\index{implicit source}

In many cases, the ``{\vt source}'' is optional.  If the name of an
existing file is given as a command, the {\cb source} is applied
implicitly, provided that the file name does not clash with a
{\WRspice} command.

\subsubsection{Input Format Notes}

The first line in the input file (after concatenation of multiple
input files), and the first line following a {\vt /newjob} line, is
considered a title line and is not parsed but kept as the name of the
circuit.  The exceptions to this rule are old format margin analysis
input files and {\Xic} files.

Command lines must be surrounded by the lines {\vt .exec} or {\vt
.control} and {\vt .endc} in the file, or prefixed by ``{\vt *@}'' or
``{\vt *\#}'' in order to be recognized as commands, except in startup
files where all lines but the title line are taken as executable. 
Commands found in {\vt .exec} blocks or {\vt *@} lines are executed
before the circuit is parsed, thus can set variables used in the
circuit.  Commands found in {\vt .control} blocks or {\vt *\#} lines
are executed after the circuit is parsed, so a control line of ``{\vt
ac ...}'' will work the same as the corresponding {\vt .ac} line, for
example.  Use of the ``comment'' control prefixes {\vt *@} and {\vt *\#}
makes it possible to embed commands in {\WRspice} input files
that will be ignored by earlier versions of SPICE.

Shell variables found in the circuit deck (but not in the
commands text) are evaluated during the source.  The {\cb reset}
command can be used to update these variables if they are later
changed by the shell after sourcing. 

!!SEEALSO
fifo
iocmds

!! commands.tex 012224
!!KEYWORD
sprint
!!TITLE
sprint command
!!HTML 
    command: <tt>sprint</tt> <i>vname</i> [/<i>format</i>] [<tt>line</tt>]
    <i>expr</i> [...]

    <p>
    This is very similar to the <a href="print"><b>print</b></a> command,
    however by default output is created as a text string in a <a
    href="variables">variable</a> whose name is given in the first
    argument.  Variable substitution can then be used to poke the
    string text into other commands or output.  However, if the first
    argument is a hyphen ('-'), then the text is printed to the
    standard output, as for the <b>print</b> command.

    <p>
    The output consists of a single line of text, which may be
    formatted according to the format string, which if given must be
    the second argument and is prefixed by a forward slash ('/')
    character.  This is identical to the <a href="formatstr">format
    string</a> as described for the <b>print</b> command, with
    inapplicable modes or flags ignored.  Only the '<tt>line</tt>'
    mode of the <b>print</b> command is supported, if the explicit
    keyword is given it is ignored, however if the '<tt>col</tt>'
    keyword is given explicitly, an error results.  The default format
    is <tt>line</tt> so the keyword is never needed.

    <p>
    The values of vector results from expressions that follow are
    formatted and appear in the result string.  Each vector index
    value will appear so that the resulting string can be quite long. 
    It is likely that this function will be used only for single
    scalar values.
!!LATEX sprint commands.tex
The {\cb sprint} command is used to print vector data to a string-type
variable.
\begin{quote}\vt
sprint {\it vname} [/{\it format\/}] [line] {\it expr\/} [...]
\end{quote}

This is very similar to the {\cb print} command, however by default
output is created as a text string in a variable whose name is given in
the first argument.  Variable substitution can then be used to poke the
string text into other commands or output.  However, if the first
argument is a hyphen (`-'), then the text is printed to the standard
output, as for the {\cb print} command.

The output consists of a single line of text, which may be formatted
according to the format string, which if given must be the second
argument and is prefixed by a forward slash (`/') character.  This is
identical to the format string as described for the {\cb print}
command, with inapplicable modes or flags ignored.  Only the `{\vt
line}' mode of the {\cb print} command is supported, if the explicit
keyword is given it is ignored, however if the `{\cb col}' keyword is
given explicitly, an error results.  The default format is {\vt line}
so the keyword is never needed.

The values of vector results from expressions that follow are
formatted and appear in the result string.  Each vector index value
will appear so that the resulting string can be quite long.  It is
likely that this function will be used only for single scalar values.

!!SEEALSO
print

!! commands.tex 120424
!!KEYWORD
write
!!TITLE
write command
!!HTML 
    command: <tt>write</tt> [-a] [-w] [-f <i>filename</i>] [<i>expr</i> ...]

    <p>
    The <b>write</b> command is used to save simulation data to a
    file.

    <p>
    If <tt>-a</tt> is given, the output is appended to the output
    file if it exists.  When <tt>-w</tt> is given and the
    <a href="appendwrite><tt>appendwrite</tt></a> variable is set,
    output will overwrite an existing output file.  The output file
    is specified with the <tt>-f</tt> option in the token that
    follows.  These options and the <i>filename</i> must occur ahead
    of the list of expressions to plot.  If no <tt>-f</tt> is given,
    the first unrecognized token found is taken as the output file
    name.

    <p>
    There are three data formats universally available, the <a
    href="rawfilefmt">rawfile format</a> native to <i>WRspice</i> and
    other simulators based on Berkeley SPICE3, the <a
    href="csvfilefmt"> comma separated variable (CSV) format</a>, and
    the <a href="csdffilefmt">Common Simulation Data Format (CSDF)</a>. 
    The CSDF is obsolete, but was once supported by
    href="hspicesim">HSPICE</a> and is retained for backward
    compatibility.  Currently, WaveView supports the rawfile format,
    so CSDF is not required to use WaveView.

    <p>
    In the CentOS 7 and 8 releases, an additional output format is
    available:  the Cadence PSF format.  This support is provided
    through third-party libraries which support only the indicated
    operating systems.  Unlike the other formats, PSF output can not
    be read back into <i>WRspice</i>.  This format is used by the
    waveform viewer component of the Cadence Analog Design Environment
    (ADE) product.

    <p>
    PSF output consists of files created in a specified directory. 
    Presently, output is available only for AC, DC, transient, and
    operating-point analysis.  Only simple analysis is supported, no
    <a href="multidc">chained DC</a> or <a href="sweep">looping</a>.

    <p>
    To specify PSF output, one gives a "filename", for example to the
    <b>write</b> command or the <a
    href="rawfile"><tt>rawfile</tt></a> variable, in the form

    <blockquote>
    <tt>psf</tt>[<tt>@</tt><i>path</i>]
    </blockquote>

    If this is simply "<tt>psf</tt>", output goes to a directory named
    <tt>psf</tt> in the current directory.  Otherwise, the
    <tt>psf</tt> keyword can be followed by a '<tt>@</tt>' character
    and a path to a directory, with no white space around the
    <tt>@</tt>.  Output will go to the indicated directory.  In either
    case, the directory will be created if it doesn't exist, but in
    the second case and parent directories must currently exist, they
    won't be created.

    <p>
    If the file name is given an extension from among those listed
    below, CSDF output will be generated.  Otherwise, rawfile format
    will be used.  NOTE: CSDF is obsolete and no longer supported by
    HSPICE or WaveView.
    <blockquote>
    <tt>.csdf</tt><br>
    <tt>.tr</tt><i>N</i><br>
    <tt>.ac</tt><i>N</i><br>
    <tt>.sw</tt><i>N</i>
    </blockquote>
    The <i>N</i> is an integer, and <tt>tr</tt>, <tt>ac</tt>, and
    <tt>sw</tt> correspond to transient, ac, and dc sweep results,
    respectively.  This is the same convention as used by HSPICE when
    generating files for post-processing.

    <p>
    A <tt>.csv</tt> extension will specify a CSV file.

    <p>
    If no <i>expr</i> is given, then all vectors in the current plot
    will be written, the same as giving the word "<tt>all</tt>" as an
    <i>expr</i>.  If, in addition, no file name is given, a default
    name will be used.  The default name is the value of the <a
    href="rawfile"><tt>rawfile</tt></a> variable if set, or the
    argument to the <a href="-r"><tt>-r</tt></a> command line option
    if one was given, or "<tt>rawspice.raw</tt>".

    <p>
    The command writes out the <i>exprs</i> to the
    <i>file</i>.  First, vectors are grouped together by plots, and
    written out as such.  For example, if the expression list
    contained three vectors from one plot and two from another, then
    two plots will be written, one with three vectors and one with
    two.  Additionally, if the scale for a vector isn't present, it is
    automatically written out as well.

    <p>
    The default rawfile format is ASCII, but this may be changed with
    the <a href="filetype"><tt>filetype</tt></a> variable or the
    <b>SPICE_ASCIIRAWFILE</b> <a href="environment">environment</a>
    variable.

    <p>
    If the <a href="appendwrite"><tt>appendwrite</tt></a> variable is
    set, the data will be appended to an existing file.

    <p>
    Files that have been appended to, or have multiple plots, are
    concatenations of data for a single plot.  This is expected and
    perfectly legitimate for rawfiles, and for CSV and CSDF files used
    only by <i>WRspice</i>, but concatenated CSDF files may not be
    portable to other applications.
!!LATEX write commands.tex
The {\cb write} command is used to save simulation data to a file.
\begin{quote}\vt
write [{\vt -a}] [{\vt -w}] [{\vt -f} {\it filename\/}] [{\it expr} ...]
\end{quote}
If {\vt -a} is given, the output is appended to the output file if it
exists.  When {\vt -w} is given and the {\et appendwrite} variable is set,
output will overwrite an existing output file.  The output file is
specified with the {\vt -f} option in the token that follows.  These
options and the {\it filename} must occur ahead of the list of expressions
to plot.  If no {\vt -f} is given, the first unrecognized token found
is taken as the output file name.

There are three data formats universally available, the ``rawfile''
format native to {\WRspice} and other simulators based on Berkeley
SPICE3, the comma separated variable (CSV) format, and the Common
Simulation Data Format (CSDF).  The CSDF is obsolete, but was once
supported by HSPICE and WaveView, and is retained for backward
compatibility.  Currently, WaveView supports the rawfile format,
so CSDF is not required to use WaveView.

\index{PSF file format}
In the CentOS 7 and 8 releases, a third output format is available: 
the Cadence PSF format.  This support is provided through third-party
libraries which support only the indicated operating systems.  Unlike
the other formats, PSF output can not be read back into {\WRspice}. 
This format is used by the waveform viewer component of the Cadence
Analog Design Environment (ADE) product.

PSF output consists of files created in a specified directory. 
Presently, output is available only for AC, DC, transient, and
operating-point analysis.  Only simple analysis is supported, no
chained DC or looping.

To specify PSF output, one gives a ``filename'', for example to the
{\cb write} command or the {\vt rawfile} variable, in the form

\begin{quote}
{\vt psf}[{\vt @}{\it path\/}]
\end{quote}

If this is simply ``{\vt psf}'', output goes to a directory named {\vt
psf} in the current directory.  Otherwise, the {\vt psf} keyword can
be followed by a `{\vt @}' character and a path to a directory, with
no white space around the {\vt @}.  Output will go to the indicated
directory.  In either case, the directory will be created if it
doesn't exist, but in the second case and parent directories must
currently exist, they won't be created.

\index{CSDF file format}
If the file name is given an extension from among those listed
below, CSDF output will be generated.  Otherwise, rawfile format
will be used.  NOTE:  CSDF is obsolete and is no longer supported
by HSPICE or WaveView.
\begin{quote}
{\vt .csdf}\\
{\vt .tr}{\it N}\\
{\vt .ac}{\it N}\\
{\vt .sw}{\it N}
\end{quote}
The {\it N} is an integer, and {\vt tr}, {\vt ac}, and {\vt sw}
correspond to transient, ac, and dc sweep results, respectively.  This
is the same convention as used by HSPICE when generating files for
post-processing.

A {\vt .csv} extension will specify a CSV file.
 
If no {\it expr} is given, then all vectors in the current plot will
be written, the same as giving the word ``{\vt all}'' as an {\it
expr}.  If, in addition, no file name is given, a default name will be
used.  The default name is the value of the {\et rawfile} variable if
set, or the argument to the {\vt -r} command line option if one was
given, or ``{\vt rawspice.raw}''.
 
The command writes out the {\it exprs} to the {\it file}.  First,
vectors are grouped together by plots, and written out as such.  For
example, if the expression list contained three vectors from one plot
and two from another, then two plots will be written, one with three
vectors and one with two.  Additionally, if the scale for a vector
isn't present, it is automatically written out as well.

The default rawfile format is ASCII, but this may be changed with the
{\et filetype} variable or the {\et SPICE\_ASCIIRAWFILE} environment
variable.

If the {\et appendwrite} variable is set, the data will be appended to
an existing file.

Files that have been appended to, or have multiple plots, are
concatenations of data for a single plot.  This is expected and
perfectly legitimate for rawfiles, and for CSV and CSDF files used
only by {\WRspice}, but concatenated CSDF files may not be portable to
other applications.

!!SEEALSO
load
expressions
iocmds

!! commands.tex 012209
!!KEYWORD
xeditorcom
!!TITLE
xeditor command
!!HTML 
    command: <tt>xeditor</tt> [<i>file</i>]

    <p>
    The <b>xeditor</b> command invokes a <a href="xeditor">text
    editing window</a> for editing circuit and other text files.  It
    is available only when graphics is enabled.  This is similar to
    the <a href="edit"><b>edit</b></a> command, however the internal
    editor is always used.  The <a href="editor"><tt>editor</tt></a>
    variable and the <a href="environment">environment</a> variables
    used by the <b>edit</b> command are ignored by the <b>xeditor</b>
    command.

    <p>
    The <b>xeditor</b> command brings up a general-purpose text editor
    window.  The same pop-up editor is invoked in read-only mode by
    the <b>Notes</b> button of the <b>Help</b> menu in the <a
    href="toolbar"><b>Tool Control</b></a> window for use as a file
    viewer.  In that mode, commands which modify the text are not
    available.
!!LATEX xeditorcom commands.tex
The {\cb xeditor} command invokes a text editing window for editing
circuit and other text files.  It is available only when graphics is
enabled.
\begin{quote}\vt
xeditor [{\it file\/}]
\end{quote}
This is similar to the {\cb edit} command, however the internal editor
is always used.  The {\et editor} variable and the environment
variables used by the {\cb edit} command are ignored by the {\cb
xeditor} command.

The {\cb xeditor} command brings up a general-purpose text editor
window.  The same pop-up editor is invoked in read-only mode by the
{\cb Notes} button of the {\cb Help} menu in the {\cb Tool Control}
window for use as a file viewer.  In that mode, commands which modify
the text are not available.

See \ref{textedit} for more information about the text editor.

!!SEEALSO
iocmds

!!REDIRECT runop        simcmds#runop

!! ----------------------------------------------------------------------------
!! commands.tex 032420
!!KEYWORD
simcmds
!!TITLE
Simulation Commands
!!HTML 
    The commands described in this section initiate, control, and
    monitor <i>WRspice</i> simulations.  One can monitor the progress
    of a run in two ways, in addition to the percentage complete that
    is printed in the <a href="toolbar"><b>Tool Control</b></a>
    window.  First, the <a href="iplot"><b>iplot</b></a> command
    can be used to plot one or more variables as the simulation is
    progressing.  To plot <tt>v(1)</tt>, for example, one would type,
    before the run is started, "<tt>iplot v(1)</tt>".  During the run,
    <tt>v(1)</tt> will be plotted on screen, with the plot rescaled as
    necessary.  Second, one can print variables.  For example, the <a
    href="trace"><b>trace</b></a> command can be used, by typing
    "<tt>trace time</tt>" before the run starts, to cause the time
    value to be printed at each output point during transient
    analysis.

    <a name="runop"></a>
    <h4>Runops</h4>

    The <b>iplot</b> and <b>trace</b> commands are examples of what
    are called "runops".  Other runops include the <a
    href="stop"><b>stop</b></a> and <a
    href="measure"><b>measure</b></a> commands.  A runop remains in
    effect until deleted with the <a href="delete"><b>delete</b></a>
    command, and the runops in effect can be listed with the <a
    href="status"><b>status</b></a> command.  The runops can also be
    listed, deleted, or made inactive with the <b>Trace</b> tool from
    the <b>Tools</b> menu in the <a href="toolbar"><b>Tool
    Control</b></a> window.  All runops are available as commands,
    which apply to any circuit while in force.  Some runops can be
    specified from within the <i>WRspice</i> input file, in which case
    the runop applies when simulating that file only.  The table below
    lists the runops that are presently available.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2>Runops</th?</tr>
    <tr><th>Command</th> <th>Input Keyword</th></tr>
    <tr><td><a href="save"><b>save</b></a></td>
      <td><a href=".save"><tt>.save</tt></a></td></tr>
    <tr><td><a href="trace"><b>trace</b></a></td>
      <td>-</td></tr>
    <tr><td><a href="iplot"><b>iplot</b></a></td>
      <td>-</td></tr>
    <tr><td><a href="measure"><b>measure</b></a></td>
      <td><a href=".measure"><tt>.measure</tt></a></td></tr>
    <tr><td><a href="stop"><b>stop</b></a></td>
      <td><a href=".stop"><tt>.stop</tt></a></td></tr>
    </table>

    <p>
    The run can be paused at any time by typing <b>Ctrl-C</b> in the
    controlling text window.  The run can be resumed with the <a
    href="resume"><b>resume</b></a> command, or reset with the <a
    href="reset"><b>reset</b></a> command.

    <p>
    It is possible to transparently execute simulations on a remote
    machine while in <i>WRspice</i>, if the remote machine has a <a
    href="wrspiced"><tt>wrspiced</tt> daemon</a> running.  It is also
    possible to run simulations asynchronously on the present machine. 
    These jobs are not available for use with the <b>iplot</b>
    command, however.  The <a href="jobs"><b>jobs</b></a> command can
    be used to monitor their status.

    <p>
    Many of these commands operate on the "current circuit" which by
    default is the last circuit entered into <i>WRspice</i> explicitly
    with the <a href="source"><b>source</b></a> command, or implicitly
    by typing the file name.  The <a href="setcirc"><b>setcirc</b></a>
    command can be used to change the current circuit.  The
    <b>Circuits</b> button in the <b>Tools</b> menu also allows
    setting of the current circuit.

    <p>
    When a circuit file is read, any references to shell variables are
    expanded to their definitions.  Shell variables are referenced as
    <tt>$</tt><i>name</i>, where <i>name</i> has been set with the <a
    href="set"><b>set</b></a> command or in the <a
    href=".options"><tt>.options</tt></a> line.  This expansion occurs
    only when the file is sourced, or the <a
    href="reset"><b>reset</b></a> command is given, so that if the
    variable is changed, the circuit must be sourced or reset to make
    the change evident in the circuit.  If a variable is set in the
    shell and also in the <tt>.options</tt> line, the value from the
    shell is used.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2>Simulation Commands</th></tr>
    <tr><td><a href="ac"><b>ac</b></a></td>
      <td>Perform ac analysis</td></tr>
    <tr><td><a href="alter"><b>alter</b></a></td>
      <td>Change circuit parameter</td></tr>
    <tr><td><a href="alterf"><b>alterf</b></a></td>
      <td>Dump alter list to Monte Carlo output file</td></tr>
    <tr><td><a href="aspice"><b>aspice</b></a></td>
      <td>Initiate asynchronous run</td></tr>
    <tr><td><a href="cache"><b>cache</b></a></td>
      <td>Manipulate subcircuit/model cache</td></tr>
    <tr><td><a href="check"><b>check</b></a></td>
      <td>Initiate range analysis</td></tr>
    <tr><td><a href="dc"><b>dc</b></a></td>
      <td>Initiate dc analysis</td></tr>
    <tr><td><a href="delete"><b>delete</b></a></td>
      <td>Delete watchpoint</td></tr>
    <tr><td><a href="destroy"><b>destroy</b></a></td>
      <td>Delete plot</td></tr>
    <tr><td><a href="devcnt"><b>devcnt</b></a></td>
      <td>Print device counts</td></tr>
    <tr><td><a href="devload"><b>devload</b></a></td>
      <td>Load device module</td></tr>
    <tr><td><a href="devls"><b>devls</b></a></td>
      <td>List available devices</td></tr>
    <tr><td><a href="devmod"><b>devmod</b></a></td>
      <td>Change device model levels</td></tr>
    <tr><td><a href="disto"><b>disto</b></a></td>
      <td>Initiate distortion analysis</td></tr>
    <tr><td><a href="dump"><b>dump</b></a></td>
      <td>Print circuit matrix</td></tr>
    <tr><td><a href="findlower"><b>findlower</b></a></td>
      <td>Find lower edge of operating range</td></tr>
    <tr><td><a href="findrange"><b>findrange</b></a></td>
      <td>find edges of operating range</td></tr>
    <tr><td><a href="findupper"><b>findupper</b></a></td>
      <td>Find upper edge of operating range</td></tr>
    <tr><td><a href="free"><b>free</b></a></td>
      <td>Delete circuits and/or plots</td></tr>
    <tr><td><a href="jobs"><b>jobs</b></a></td>
      <td>Check asynchronous jobs</td></tr>
    <tr><td><a href="sweep"><b>loop</b></a></td>
      <td>Alias for sweep command</td></tr>
    <tr><td><a href="mctrial"><b>mctrial</b></a></td>
      <td>Run a Monte Carlo trial</td></tr>
    <tr><td><a href="measure"><b>measure</b></a></td>
      <td>Set up a measurement</td></tr>
    <tr><td><a href="noise"><b>noise</b></a></td>
      <td>Initiate noise analysis</td></tr>
    <tr><td><a href="op"><b>op</b></a></td>
      <td>Compute operating point</td></tr>
    <tr><td><a href="pz"><b>pz</b></a></td>
      <td>Initiate pole-zero analysis</td></tr>
    <tr><td><a href="reset"><b>reset</b></a></td>
      <td>Reset simulator</td></tr>
    <tr><td><a href="resume"><b>resume</b></a></td>
      <td>Resume run in progress</td></tr>
    <tr><td><a href="rhostcom"><b>rhost</b></a></td>
      <td>Identify remote SPICE host</td></tr>
    <tr><td><a href="rspice"><b>rspice</b></a></td>
      <td>Initiate remote SPICE run</td></tr>
    <tr><td><a href="run"><b>run</b></a></td>
      <td>Initiate simulation</td></tr>
    <tr><td><a href="save"><b>save</b></a></td>
      <td>List vectors to save during run</td></tr>
    <tr><td><a href="sens"><b>sens</b></a></td>
      <td>Initiate sensitivity analysis</td></tr>
    <tr><td><a href="setcirc"><b>setcirc</b></a></td>
      <td>Set current circuit</td></tr>
    <tr><td><a href="show"><b>show</b></a></td>
      <td>List parameters</td></tr>
    <tr><td><a href="state"><b>state</b></a></td>
      <td>Print circuit state</td></tr>
    <tr><td><a href="status"><b>status</b></a></td>
      <td>Print trace status</td></tr>
    <tr><td><a href="step"><b>step</b></a></td>
      <td>Advance simulator</td></tr>
    <tr><td><a href="stop"><b>stop</b></a></td>
      <td>Specify stop condition</td></tr>
    <tr><td><a href="sweep"><b>sweep</b></a></td>
      <td>Perform analysis over parameter range</td></tr>
    <tr><td><a href="tf"><b>tf</b></a></td>
      <td>Initiate transfer function analysis</td></tr>
    <tr><td><a href="trace"><b>trace</b></a></td>
      <td>Set trace</td></tr>
    <tr><td><a href="tran"><b>tran</b></a></td>
      <td>Initiate transient analysis</td></tr>
    <tr><td><a href="vastep_cmd"><b>vastep</b></a></td>
      <td>Advance Verilog simulator</td></tr>
    <tr><td><a href="where"><b>where</b></a></td>
      <td>Print nonconvergence information</td></tr>
    </table>
!!LATEX simcmds commands.tex
The commands described in this section initiate, control, and monitor
{\WRspice} simulations.  One can monitor the progress of a run in two
ways, in addition to the percentage complete that is printed in the
{\cb Tool Control} window.  First, the {\cb iplot} command can be used
to plot one or more variables as the simulation is progressing.  To
plot {\vt v(1)}, for example, one would type, before the run is
started, ``{\vt iplot v(1)}''.  During the run, {\vt v(1)} will be
plotted on screen, with the plot rescaled as necessary.  Second, one
can print variables.  For example, the {\cb trace} command can be
used, by typing ``{\vt trace time}'' before the run starts, to cause
the time value to be printed at each output point during transient
analysis.

\index{runops}
\label{runop}
The {\cb iplot} and {\cb trace} commands are examples of what are
called ``runops''.  Other runops include the {\cb stop} and {\cb
measure} commands.  A runop remains in effect until deleted with the
{\cb delete} command, and the runops in effect can be listed with the
{\cb status} command.  The runops can also be listed, deleted, or made
inactive with the {\cb Trace} tool from the {\cb Tools} menu in the
{\cb Tool Control} window.  All runops are available as commands,
which apply to any circuit while in force.  Some runops can be
specified from within the {\WRspice} input file, in which case the
runop applies when simulating that file only.  The table below lists
the runops that are presently available.

\begin{tabular}{|l|l|}\hline
\multicolumn{2}{|c|}{Runops}\\ \hline
\cb Command & \cb Input Keyword\\ \hline\hline
\cb save & \vt .save\\ \hline
\cb trace & \vt -\\ \hline
\cb iplot & \vt -\\ \hline
\cb measure & \vt .measure\\ \hline
\cb stop & \vt .stop\\ \hline
\end{tabular}

The run can be paused at any time by typing {\kb Ctrl-C} in the
controlling text window.  The run can be resumed with the {\cb resume}
command, or reset with the {\cb reset} command.

It is possible to transparently execute simulations on a remote
machine while in {\WRspice}, if the remote machine has a {\vt
wrspiced} daemon running.  It is also possible to run simulations
asynchronously on the present machine.  These jobs are not available
for use with the {\cb iplot} command, however.  The {\cb jobs} command
can be used to monitor their status.

Many of these commands operate on the ``current circuit'' which by
default is the last circuit entered into {\WRspice} explicitly with
the {\cb source} command, or implicitly by typing the file name.  The
{\cb setcirc} command can be used to change the current circuit.  The
{\cb Circuits} button in the {\cb Tools} menu also allows setting of
the current circuit.

When a circuit file is read, any references to shell variables are
expanded to their definitions.  Shell variables are referenced as {\vt
\$}{\it name}, where {\it name} has been set with the {\cb set}
command or in the {\vt .options} line.  This expansion occurs only
when the file is sourced, or the {\cb reset} command is given, so that
if the variable is changed, the circuit must be sourced or reset to
make the change evident in the circuit.  If a variable is set in the
shell and also in the {\vt .options} line, the value from the shell
is used.

\begin{tabular}{|l|l|}\hline
\multicolumn{2}{|c|}{Simulation Commands}\\ \hline
\cb ac & Perform ac analysis\\ \hline
\cb alter & Change circuit parameter\\ \hline
\cb alterf & Dump alter list to Monte Carlo output file\\ \hline
\cb aspice & Initiate asynchronous run\\ \hline
\cb cache & Manipulate subcircuit/model cache\\ \hline
\cb check & Initiate range analysis\\ \hline
\cb dc & Initiate dc analysis\\ \hline
\cb delete & Delete watchpoint\\ \hline
\cb destroy & Delete plot\\ \hline
\cb devcnt & Print device counts\\ \hline
\cb devload & Load device module\\ \hline
\cb devls & List available devices\\ \hline
\cb devmod & Change device model levels\\ \hline
\cb disto & Initiate distortion analysis\\ \hline
\cb dump & Print circuit matrix\\ \hline
\cb findlower & Find lower edge of operating range\\ \hline
\cb findrange & Find edges of operating range\\ \hline
\cb findupper & Find upper edge of operating range\\ \hline
\cb free & Delete circuits and/or plots\\ \hline
\cb jobs & Check asynchronous jobs\\ \hline
\cb loop & Alias for sweep command\\ \hline
\cb mctrial & Run a Monte Carlo trial\\ \hline
\cb measure & Set up a measurement\\ \hline
\cb noise & Initiate noise analysis\\ \hline
\cb op & Compute operating point\\ \hline
\cb pz & Initiate pole-zero analysis\\ \hline
\cb reset & Reset simulator\\ \hline
\cb resume & Resume run in progress\\ \hline
\cb rhost & Identify remote SPICE host\\ \hline
\cb rspice & Initiate remote SPICE run\\ \hline
\cb run & Initiate simulation\\ \hline
\cb save & List vectors to save during run\\ \hline
\cb sens & Initiate sensitivity analysis\\ \hline
\cb setcirc & Set current circuit\\ \hline
\cb show & List parameters\\ \hline
\cb state & Print circuit state\\ \hline
\cb status & Print trace status\\ \hline
\cb step & Advance simulator\\ \hline
\cb stop & Specify stop condition\\ \hline
\cb sweep & Perform analysis over parameter range\\ \hline
\cb tf & Initiate transfer function analysis\\ \hline
\cb trace & Set trace\\ \hline
\cb tran & Initiate transient analysis\\ \hline
\cb vastep & Advance Verilog simulator\\ \hline
\cb where & Print nonconvergence information\\ \hline
\end{tabular}

!!SEEALSO
commands

!! commands.tex 011909
!!KEYWORD
ac
!!TITLE
ac command
!!HTML 
    command: <tt>ac</tt> <i>ac_args</i> [<tt>dc</tt> <i>dc_args</i>]
 
    <p>
    The <b>ac</b> command will initiate an <a href=".ac">ac
    analysis</a> of the current circuit.  The <i>ac_args</i> are the
    same as appear in a <tt>.ac</tt> line.  If a <a href=".dc">dc
    sweep</a> specification follows, the ac analysis is performed at
    each point of the dc analysis.
!!LATEX ac commands.tex
The {\cb ac} command initiates an ac analysis of the current circuit.
\begin{quote}\vt
ac {\it ac\_args} [dc {\it dc\_args\/}]
\end{quote}
The {\it ac\_args} are the same as appear in a {\vt .ac} line (see
\ref{acline}).  If a dc sweep specification follows, the ac analysis
is performed at each point of the dc analysis (see \ref{dcline}).
 
!!SEEALSO
simcmds

!! commands.tex 041711
!!KEYWORD
alter
!!TITLE
alter command
!!HTML 
    command: <tt>alter</tt> [<i>device_list</i> , <i>param</i> [=]
    <i>value</i> [<i>param</i> [=] <i>value</i> ... ]]

    <p>
    The <b>alter</b> command allows circuit parameters to be changed
    for the next simulation run.  The parameters will revert to
    original values on subsequent runs, unless the <b>alter</b>
    command is reissued.

    <p>
    If given without arguments, a list of previously entered
    alterations of the current circuit, to be applied in the next
    analysis run, is printed.  List entries may have come from previously
    given <b>alter</b> commands, or from assignments to the
    <tt>@</tt><i>device</i><tt>[</tt><i>param</i><tt>]</tt>
    special vectors.

    <p>
    The <i>device_list</i> is a list of one or more device or model
    names found in the circuit.  The names are separated by white
    space, and the list is terminated with a comma.  Following the
    comma is one or more name/value pairs, optionally an equal sign
    can appear between the two tokens.  The name is a device or model
    keyword, which should be applicable to all of the names listed in
    the <i>device_list</i>.  Note that this probably means that the
    <i>device_list</i> can contain device names or models, but not
    both.  The device and model keywords can be obtained from the <a
    href="show"><b>show</b></a> command.

    <p>
    The <b>alter</b> command can be issued multiple times, to set
    parameters of devices or models which can't be intermixed
    according to the rule above.

    <p>
    The <i>device_list</i> can contain "globbing" (wild-card)
    characters with similar behavior to globbing (<a
    href="glob">global substitution</a>) in the <i>WRspice</i> <a
    href="spshell">shell</a>.  Briefly, '<tt>?</tt>' matches any
    character, '<tt>*</tt>' matches any set of characters or no
    characters, "<tt>[abc]</tt>" matches the characters '<tt>a</tt>',
    '<tt>b</tt>', and '<tt>c</tt>', and "<tt>a{bc,de}</tt>" matches
    "<tt>abc</tt>" and "<tt>ade</tt>".

    <p>
    When the next simulation run of the current circuit is started,
    the given parameters will be substituted.  Thus, the <b>show</b>
    command, if given before the next run, will not show the altered
    values.  The internal set of altered values will be destroyed
    after the substitutions.

    <p>
    Examples:
    <blockquote>
    <tt>alter R2, resistance=50<br>
    alter c{1,2,3}, capacitance 105p</tt>
    </blockquote>
!!LATEX alter commands.tex
The {\cb alter} command allows circuit parameters to be changed for
the next simulation run.
\begin{quote}\vt
alter [{\it device\_list\/} , {\it param} [{\vt =}] {\it value\/}
  [{\it param} [{\vt =}]  {\it value\/} ... ]]
\end{quote}
The parameters will revert to original values on subsequent runs,
unless the {\cb alter} command is reissued.

If given without arguments, a list of previously entered alterations
of the current circuit, to be applied in the next analysis run, is
printed.  List entries may have come from previously given {\cb alter}
commands, or from assignments to the {\vt @}{\it device\/}{\vt [}{\it
param\/}{\vt ]} special vectors.

The {\it device\_list} is a list of one or more device or model names
found in the circuit.  The names are separated by white space, and the
list is terminated with a comma.  Following the comma is one or more
name/value pairs, optionally an equal sign can appear between the two
tokens.  The name is a device or model keyword, which should be
applicable to all of the names listed in the {\it device\_list}.  Note
that this probably means that the {\it device\_list} can contain
device names or models, but not both.  The device and model keywords
can be obtained from the {\cb show} command.

The {\cb alter} command can be issued multiple times, to set
parameters of devices or models which can't be intermixed according to
the rule above.

The {\it device\_list} can contain ``globbing'' (wild-card)
characters with similar behavior to globbing (global substitution) in
the {\WRspice} shell.  Briefly, `{\vt ?}' matches any character, '{\vt
*}' matches any set of characters or no characters, ``{\vt [abc]}''
matches the characters `{\vt a}', `{\vt b}', and `{\vt c}', and ``{\vt
a}\{{\vt bc,de}\}'' matches ``{\vt abc}'' and ``{\vt ade}''.

When the next simulation run of the current circuit is started, the
given parameters will be substituted.  Thus, the {\cb show} command,
if given before the next run, will not show the altered values.  The
internal set of altered values will be destroyed after the
substitutions.

Examples:
\begin{quote}
{\vt alter R2, resistance=50}\\
{\vt alter c\{1,2,3\}, capacitance 105p}
\end{quote}
 
!!SEEALSO
simcmds

!! commands.tex 011721
!!KEYWORD
alterf
!!TITLE
alterf command
!!HTML 
    command: <tt>alterf</tt>

    <p>
    This will dump the <a href="alter">alter list</a> to the output
    file, for use in <a href="monte">Monte Carlo</a> analysis.  In
    this approach, the <b>alter</b> command, or equivalently forms
    like "<tt>let @</tt><i>device</i><tt>[</tt><i>param</i><tt>]</tt>
    = <i>trial_value</i>" are used to set trial values in the
    <tt>exec</tt> block.  Once set, this can be called to dump the
    values into the output file.

    <p>
    In 4.3.13, these are added to the logging file automatically, so
    this command may be obsolete.
!!LATEX alterf commands.tex
This will dump the alter list to the output file, for use in Monte
Carlo analysis.
\begin{quote}\vt
alterf
\end{quote}
In this approach, the {\cb alter} command, or equivalently forms like
``{\vt let @}{\it device\/}{\vt [}{\it param\/}{\vt ]} {\vt =} {\it
trial\_value}'' are used to set trial values in the {\vt exec} block. 
Once set, this can be called to dump the values into the output file.

In 4.3.13, these are added to the logging file automatically, so
this command may be obsolete.
 
!!SEEALSO
simcmds

!! commands.tex 011909
!!KEYWORD
aspice
!!TITLE
aspice command
!!HTML 
    command: <tt>aspice</tt> <i>infile</i> [<i>outfile</i>]

    <p>
    The <b>aspice</b> command allows simulation jobs to be run in the
    background on the present machine.  This command will run a
    simulation asynchronously with <i>infile</i> as an input circuit. 
    If <i>outfile</i> is given, the output is saved in this file,
    otherwise a temporary file is used.  After this command is issued,
    the job is started in the background, and one may continue using
    <i>WRspice</i> interactively.  When the job is finished, the
    rawfile is loaded and becomes the current plot, and any output
    generated is printed.  Specifically, <i>WRspice</i> forks off a
    new process with the standard input set to <i>infile</i>, and
    which writes the standard output to <i>outfile</i>.  The forked
    program is expected to create a rawfile with name given by a <a
    href="-r">-r</a> command line option.  The forked command is
    effectively "<i>program</i> <tt>-S -r</tt> <i>rawfile</i> &#60;
    <i>infile</i> > <i>outfile</i>", where <i>program</i> is the <a
    href="spicepath"><tt>spicepath</tt></a> variable (which defaults
    to calling <i>WRspice</i>), <i>rawfile</i> is a temporary file
    name, and <i>outfile</i> is the file given, or a temporary file
    name.  Although the <tt>aspice</tt> command is designed for use
    with <i>WRspice</i>, it may be used with other simulators capable
    of emulating the <i>WRspice</i> server mode protocol.  One may
    specify the pathname of the program to be run with the
    <tt>spicepath</tt> variable, or by setting an <a
    href="environment">environment</a> variable.
!!LATEX aspice commands.tex
The {\cb aspice} command allows simulation jobs to be run in the
background on the present machine.
\begin{quote}\vt
aspice {\it infile} [{\it outfile\/}]
\end{quote}
This command will run a simulation asynchronously with
{\it infile} as an input circuit.  If {\it outfile} is given, the
output is saved in this file, otherwise a temporary file is used. 
After this command is issued, the job is started in the background,
and one may continue using {\WRspice} interactively.  When the job is
finished, the rawfile is loaded and becomes the current plot, and any
output generated is printed.  Specifically, {\WRspice} forks off a new
process with the standard input set to {\it infile}, and which writes
the standard output to {\it outfile}.  The forked program is expected
to create a rawfile with name given by a {\vt -r} command line option. 
The forked command is effectively ``{\vt {\it program} -S -r {\it
rawfile} <{\it infile} >{\it outfile}}, where {\it program} is the
{\et spicepath} variable (which defaults to calling {\WRspice}), {\it
rawfile} is a temporary file name, and {\it outfile} is the file
given, or a temporary file name.  Although the {\cb aspice} command is
designed for use with {\WRspice}, it may be used with other simulators
capable of emulating the {\WRspice} server mode protocol.  One may
specify the pathname of the program to be run with the {\et spicepath}
variable, or by setting an environment variable.
 
!!SEEALSO
jobs
rspice
simcmds

!! commands.tex 011909
!!KEYWORD
cache
!!TITLE
cache command
!!HTML 
    command: <tt>cache</tt> [<i>keyword</i>] [<i>tagname</i> ...]

    <p>
    This function provides a control interface to the subcircuit/model
    cache.  The subcircuit/model cache contains representations of
    blocks of input lines that were enclosed in <a
    href=".cache"><tt>.cache</tt></a> and <tt>.endcache</tt> lines. 
    These representations are used instead of the actual lines of
    input, reducing setup time.

    <p>
    The command can have the following forms, the first argument is a
    keyword (or letter).  additional arguments are tag names (the
    names that follow "<tt>.cache</tt>" in SPICE input).

    <dl>
    <dt><tt>cache h</tt>[<tt>elp</tt>]<dd>
    Print command usage information.
    </dl><dl>
    <dt><tt>cache l</tt>[<tt>ist</tt>]<dd>
    Print a list of the tag names currently in the cache.  The
    <b>cache</b> command with no arguments does the same thing.
    </dl><dl>
    <dt><tt>cache d</tt>[<tt>ump</tt>] [<i>tagname</i> ...]<dd>
    This will dump the lines saved in the cache, for each
    <i>tagname</i> given, or for all names if no <i>tagname</i> is
    given.  Presently, <tt>.param</tt> lines are listed as comments;
    the actual parameters are in an internal representation and not
    explicitly listed.
    </dl><dl>
    <dt><tt>cache r</tt>[<tt>emove</tt>] <i>tagname</i>
    [<i>tagname</i> ...]<dd>
    This will remove the cached data associated with each
    <i>tagname</i> given.  The given names will no longer be in the
    cache.
    </dl><dl>
    <dt><tt>cache c</tt>[<tt>lear</tt>]<dd>
    This will clear all data from the cache.
    </dl>
!!LATEX cache commands.tex
This function provides a control interface to the subcircuit/model cache.
\begin{quote}\vt
cache [{\it keyword\/}] [{\it tagname\/}]
\end{quote}

The subcircuit/model cache contains representations of blocks of input
lines that were enclosed in {\vt .cache} and {\vt .endcache} lines. 
These representations are used instead of the actual lines of input,
reducing setup time.

The command can have the following forms, the first argument is a
keyword (or letter).  additional arguments are tag names (the names
that follow ``{\vt .cache}'' in SPICE input).

\begin{description}
\item{\vt cache h}[{\vt elp}]\\
Print command usage information.
\item{\vt cache l}[{\vt ist}]\\
Print a list of the tag names currently in the cache.  The
{\cb cache} command with no arguments does the same thing.
\item{\vt cache d}[{\vt ump}] [{\it tagname}...]\\
This will dump the lines saved in the cache, for each
{\it tagname} given, or for all names if no {\it tagname} is
given.  Presently, {\vt .param} lines are listed as comments; 
the actual parameters are in an internal representation and not
explicitly listed.
\item{\vt cache r}[{\vt emove}] {\it tagname} [{\it tagname} ...]\\
This will remove the cached data associated with each
{\it tagname} given.  The given names will no longer be in the cache.
\item{\vt cache c}[{\vt lear}]\\
This will clear all data from the cache.
\end{description}
 
!!SEEALSO
simcmds

!! commands.tex 032520
!!KEYWORD
check
!!TITLE
check command
!!HTML 
    command: <tt>check</tt> [<tt>-a</tt>] [<tt>-b</tt>] [<tt>-c</tt>]
        [<tt>-m</tt>] [<tt>-r</tt>] [<tt>-f</tt>] [<tt>-s</tt>]
        [<tt>-k</tt>] [<tt>-h</tt>] [<tt>-v</tt>]
        [[<i>pstr1</i>] <i>val1</i> <i>del1</i> <i>stp1</i>]
        [[<i>pstr2</i>] <i>val2</i> <i>del2</i> <i>stp2</i>]
        [<i>analysis</i>]

    <p>
    The <b>check</b> command is used to initiate <a
    href="marganal">margin analysis</a>.  Margin analysis can consist
    of either a swept <a href="oprng_analysis">operating range</a>
    analysis, or a <a href="monte">Monte Carlo</a> analysis.  The
    current circuit is evaluated, and must have an associated block of
    control statements which contain the pass/fail script.  A second
    associated block of executable statements contains initialization
    commands.  These blocks can be provided in the circuit file, or be
    previously defined <a href="codeblock">codeblocks</a> bound to the
    circuit.  Setting up the file in one of the recommended formats
    will ensure that these blocks are created and bound transparently,
    however it is possible to do this by hand.

    <p>
    The option characters can be grouped following a single '-', or
    entered separately.

    <dl>
    <dt><tt>-a</tt><dd>
    If the <tt>-a</tt> flag is given, operating range analysis is
    performed at every point (all points mode).  Otherwise, the
    analysis attempts to limit computation by identifying the contour
    containing the points of operation.  This algorithm can be
    confused by operating ranges with strange shapes, or which possess
    islands of fail points.  If the input file contained a
    <tt>.checkall</tt> line, the <tt>-a</tt> option is redundant, all
    points will be checked in this case.
    </dl>

    <dl>
    <dt><tt>-b</tt><dd>
    If this is given, the analysis will be paused after setup and the
    <b>check</b> command will return.  This is the start for <a
    href="atomic">atomic Monte Carlo</a>; a script can call the <a
    href="mctrial"><b>mctrial</b></a> command numerous times at this
    point, then "<tt>check -c</tt>" to clean up and end the analysis.
    </dl>

    <dl>
    <dt><tt>-c</tt><dd>
    The <tt>-c</tt> (clear) option will clear any margin analysis in
    progress if the analysis has been paused, for example by pressing
    <b>Ctrl-C</b>, or if in an <a href="atomic">atomic Monte Carlo</a>
    script.  Return is immediate whether or not there is a present
    analysis to clear.  Unlike in release 4.3.8 and earlier, no new
    analysis is started, and other options are ignored.

    <p>
    A paused margin analysis is resumed if the <b>check</b> command is
    given which does not have the <tt>-c</tt> option set, and any
    arguments given in this case are ignored.  The <a
    href="resume"><b>resume</b></a> command will also restart a paused
    margin analysis.
    </dl>

    <dl>
    <dt><tt>-m</tt><dd>
    If the <tt>-m</tt> option is given, Monte Carlo analysis is
    performed, rather than operating range analysis.  This is the
    default if a <tt>.monte</tt> line appeared in the file; the
    <tt>-m</tt> option is only required if there is no <tt>.monte</tt>
    line.  The <tt>-a</tt> option is ignored if <tt>-m</tt> is given,
    as is <tt>.checkall</tt>.  Monte Carlo analysis files differ from
    operating range files only in the header (or header codeblock). 
    During Monte Carlo analysis, the header block is executed before
    every simulation so that variables can be updated.  In operating
    range analysis variables are initialized by the header block only
    once, at the start of analysis.
    </dl>

    <dl>
    <dt><tt>-r</tt><dd>
    If the <tt>-r</tt> option is given, remote servers will be
    assigned simulation runs, allowing parallelism to increase
    analysis speed.  The remote servers must have been specified
    through the <a href="rhostcom">rhost</a> command, and each must
    have a <a href="wrspiced"><tt>wrspiced</tt></a> server running. 
    </dl>

    <p>
    Ordinarily, during operating range and Monte Carlo analysis, only
    the current data point is retained.  The amount of data retained
    can be altered with the <tt>-f</tt>, <tt>-s</tt>, and <tt>-k</tt>
    options.  However, if a <a href=".measure"><tt>.measure</tt></a>
    line appears in the circuit deck, or an <a
    href="iplot"><b>iplot</b></a> runop is active, data will be
    retained internally so that the <tt>.measure</tt> or <b>iplot</b>
    is operational.
 
    <dl>
    <dt><tt>-f</tt><dd>
    The <tt>-f</tt> option will cause the data for the current trial
    to be retained.  This is implied if any <tt>.measure</tt> lines
    are present, or if an <b>iplot</b> is active.  The data are
    overwritten for each new trial.  The data for the last trial are
    available after the analysis is complete, or can be accessed for
    intermediate trials if the analysis is paused.
    </dl>

    <dl>
    <dt><tt>-s</tt><dd>
    The <tt>-s</tt> option also causes retention of the data for the
    current trial, but in addition will dump the data to a family of
    rawfiles, similar to the <tt>segment</tt> keyword of the <a
    href=".tran"><tt>.tran</tt></a> line (though this works with other
    than transient analysis).  The default file name is the name of
    the range analysis output file, suffixed with
    <tt>.s</tt><i>NN</i>, where <i>NN</i> is 00, 01, etc.  Each trial
    generates a new suffix in sequence.
    </dl>
 
    <dl>
    <dt><tt>-k</tt><dd>
    With the -k option, all data are retained, in a multi-dimensional
    plot.  Note that this can be huge, so use of the <a
    href="maxdata"><tt>maxdata</tt></a> variable and <a
    href=".save"><tt>.save</tt></a> lines may be necessary.  One can
    see the variations by plotting some or all of the dimensions of
    the output.  Recall forms like <tt>v(1)[<i>N</i>]</tt> refer to
    the <i>N</i>+1'th trial, and <tt>v(1)[<i>N,M</i>]</tt> includes
    the data for the <i>N</i>+1'th to the <i>M</i>+1'th trials.  The
    <a href="mplot"><b>mplot</b></a> command has a facility for
    displaying trial data in a simplified manner.
    </dl>
 
    <dl>
    <dt><tt>-h</t><dd>
    Finally, the -h (help) option will print a brief summary of the
    available options to the <b>check</b> command.
    </dl>

    <dl>
    <dt><tt>-v</tt><dd>
    If <tt>-v</tt> (verbose) is given, results and
    other messages are printed on-screen as the analysis is performed,
    otherwise the analysis is silent except for any printing
    statements executed in the associated command scripts.  The <a
    href="mplot"><b>mplot</b></a> command can be used to follow
    progress graphically.
    </dl>

    <p>
    If an <b>iplot</b> is active, <t>-f</tt> (current trial data
    retention) is implied.  The data will be plotted for each trial in
    the same iplot, erasing after each trial is complete.  If
    <tt>-k</tt> is given, all data will be plotted, without erasure. 
    Note that an iplot doubles internal memory requirements.

    <p>
    The command line may include one or two range specifications.  In
    operating range analysis, each specification consists of an
    optional parameter specification string, followed by three
    numbers.  These numbers will augment or override the
    <tt>checkVAL1</tt>, <tt>checkDEL1</tt>, <tt>checkSTP1</tt>,
    <tt>checkVAL2</tt>, <tt>checkDEL2</tt>, and <tt>checkSTP2</tt>
    vectors that may be in effect.  The numbers are parsed in the
    order shown, and all are actually optional.  A non-numeric token
    will terminate a block, and missing values must be set from the
    vectors.

    <p>
    In Monte Carlo analysis, each block can contain only a single
    number, which will override the <tt>checkSTP1</tt> and
    <tt>checkSTP2</tt> values (if any), in that order.  These values
    are used to define how many Monte Carlo trials to perform.

    <p>
    The optional <i>pstr1</i> and <i>pstr2</i> strings take the same
    format and significance as in the <a href="sweep"><b>sweep</b></a>
    command.  See the description of that command for a description of
    the format.  If a parameter specifier is given, the specified
    device parameters will be altered directly, and the variables and
    vectors normally used to pass values will <b>not</b> be set.  This
    applies only to operating range analysis, and the explicit
    parameter strings can only be applied from the <b>check</b>
    command line and not from the file.  If the analysis is two
    dimensional, then both dimensions must have a parameter
    specification, or neither dimension can have a parameter
    specification; the two mechanisms can not be mixed.

    <p>
    The <i>analysis</i> to be performed is given, otherwise it is
    found in the circuit deck.  In interactive mode, if no analysis is
    specified, the user will be prompted for an analysis string.

    <p>
    During operating range analysis, a file is usually created and
    placed in the current directory for output.  This file is named
    with the base name of the input file, with an extension
    <tt>.d</tt><i>NN</i>, where <i>NN</i> is replaced with
    <tt>00</tt>, <tt>01</tt>, etc.  -- the first case where the
    filename is unique.  If for some reason the input file name is
    unknown, the basename "<tt>check</tt>" will be used.  Similarly,
    in Monte Carlo analysis, a file named
    <i>basename</i>.<tt>m</tt><i>NN</i> is generated.  In either case,
    the shell variable <a href="mplot_cur"><tt>mplot_cur</tt></a> is
    set to the current output file name.  These files can be plotted
    on-screen with the "<tt>mplot</tt> [<i>filename</i>]" command.

    <p>
    The results from operating range/Monte Carlo analysis are hidden
    away in the resulting plot structure.  The plot can be displayed
    by entering "<tt>mplot</tt> <i>vec</i>" where <i>vec</i> is any
    vector in the plot.

    <p>
    When a <tt>.measure</tt> is included in an iterative analysis,
    data are saved as follows.  Before each iteration, the previous
    result vector and its scale are saved to the end of a "history"
    vector and scale, and are then deleted.  The result vector and
    scale are recreated when the measurement is completed during the
    iteration.  Thus, at the end of the analysis, for a measurement
    named "example", one would have the following vectors:

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><tt>example</tt>
         <td>the result from the final trial</tr>
    <tr><td><tt>example_scale</tt>
         <td>the measurement interval or point in the last trial</tr>
    <tr><td><tt>example_hist</tt>
         <td>results from the prior trials</tr>
    <tr><td><tt>example_hist_scale</tt>
         <td>intervals from the prior trials</tr>
    </table>

    <p>
    Thus, during each trial, the result vector will have the same
    properties as in a standard run.  It can be used in the
    <tt>.control</tt> block of a Monte Carlo or operating range file
    (recall that <tt>$?</tt><i>vector</i> can be used to query
    existence, and that if there is no <tt>checkPNTS</tt> vector
    defined, the <tt>.control</tt> block is called once at the end of
    each trial).

    <p>
    In the current circuit, the parameters to be varied are usually
    included as shell variables <tt>$value1</tt> and <tt>$value2</tt>. 
    These are special hard-coded shell variables which contain the
    parameter values during simulation.  Before the file is sourced
    (recall that variable substitution occurs during the read-in),
    these variables can be set with the <a href="set"><b>set</b></a>
    command, and the file simulated just as any other circuit. 
    Initially, the variables <tt>$value1</tt> and <tt>$value2</tt> are
    set to zero.  The <tt>value1</tt> and <tt>value2</tt> names can be
    changed to other names, and other mechanisms can be used to supply
    trial values, as described in the <a
    href="oprng_analysis">operating range</a> topic.

    <p>
    Briefly, operating range analysis works as follows.  The analysis
    range and other parameters are specified by setting certain
    vectors in the header script, or by hand.  The range is evaluated
    by rows (varying <tt>value1</tt>) for each column
    (<tt>value2</tt>) point.  Columns are then reevaluated if the
    terminating pass point was not previously found.  For a row,
    starting at the left, points are evaluated until a pass point is
    found.  The algorithm skips to the right, and evaluates toward the
    left until a pass point is found.  This minimizes simulation time,
    however strange operating ranges, such as those that are reentrant
    or have islands, will not be reproduced correctly.  The only
    fool-proof method is to evaluate every point, which will occur if
    the <tt>-a</tt> option is given, or the <tt>.checkall</tt> line
    was given in the input file.

    <p>
    The range of evaluation is set with <i>center</i>, <i>step</i>,
    and <i>number</i> variables.  The <i>number</i> is the number of
    steps to take above and below the <i>center</i>.  Thus, if
    <i>number</i> is 1, the range is over the three points <i>center -
    step</i>, <i>center</i>, and <i>center + step</i>.  One can set
    ranges for <tt>value1</tt> and <tt>value2</tt>, or alternatively
    one can set <tt>value2</tt>, and the algorithm can determine the
    operating range for <tt>value1</tt> at each <tt>value2</tt> point. 
    These values represent the parameter variation range in operating
    range analysis, but serve only to determine the number of trials
    in Monte Carlo analysis.

    <p>
    There are a number of vectors with defined names which control
    operating range and Monte Carlo analysis.  In addition, there are
    relevant shell variables.  The <b>check</b> command creates a plot
    structure, which contains all of the special control vectors, plus
    vectors for each circuit node and branch.  This plot becomes the
    current plot after the analysis starts.  The special vectors which
    have relevance to the operating range analysis are listed below.

    <dl>
    <dt><tt>checkPNTS</tt> (real, length >= 1)<dd>
      These are the points of the scale variable (e.g., time in
      transient analysis) at which the pass/fail test is applied.  If
      a fail is encountered, the simulation is stopped and the next
      trial started.  This vector is usually specified as an array,
      with the <a href="compose"><b>compose</b></a> command, and is
      used in operating range and Monte Carlo analysis.  If not
      specified, the evaluation is performed after the trial
      completes.
    </dl>

    <dl>
    <dt><tt>checkVAL1</tt> (real, length 1)<dd>
      This is the initial central value of the first parameter to be
      varied during operating range analysis.  It is not used in Monte
      Carlo analysis.
    </dl>

    <dl>
    <dt><tt>checkDEL1</tt> (real, length 1)<dd>
      The first central value will be incremented or decremented by
      this value between trials in operating range analysis.  It is
      not used in Monte carlo analysis.
    </dl>

    <dl>
    <dt><tt>checkSTP1</tt> (integer, length 1)<dd>
      This is the number of trials above and below the central value. 
      In Monte Carlo analysis, it partially specifies the number of
      simulation runs to perform, and specifies one coordinate of the
      visual array used to monitor progress (with the <a
      href="mplot"><b>mplot</b></a> command).  In operating range
      analysis, the default is zero.  In Monte Carlo analysis, the
      default is 3.
    </dl>

    <dl><dt><tt>
    checkVAL2
    checkDEL2
    checkSTP2</tt><dd>
      These are as above, but relate to the second parameter to be
      varied in the circuit in operating range analysis.  In Monte
      Carlo analysis, only <tt>checkSTP2</tt> is used, in a manner
      analogous to <tt>checkSTP1</tt>.  The total number of
      simulations in Monte Carlo analysis is (2*<tt>checkSTP1</tt> +
      1)*(2*<tt>checkSTP2</tt> + 1), the same as would be checked in
      operating range analysis.
    </dl>

    <dl>
    <dt><tt>checkFAIL</tt>  (integer, length 1, value 0 or 1)<dd>
      This is the global pass/fail flag, which is set after each
      trial, 1 indicates failure.  This variable is used in both
      operating range and Monte Carlo analysis.
    </dl>

    <dl>
    <dt><tt>checkINIT</tt>  (integer, length 1, value 0 or 1)<dd>
      This is set to 1 by <i>WRspice</i> before the initial execution
      of the header block, before operating range or the first Monte
      Carlo trial.  It is set to 0 otherwise.  Thus one can identify
      the first trial in Monte Carlo analysis from within the header
      script.
    </dl>

    <dl>
    <dt><tt>opmin1, opmax1, opmin2, opmax2</tt> (real, length >= 1)<dd>
      The operating range analysis can be directed to find the
      operating range extrema of the one parameter for each value of
      the other parameter.  These vectors contain the values found.
      They are not used in Monte Carlo analysis.
    </dl>

    <dl>
    <dt><tt>value</tt> (real, length variable)<dd>
      This vector can be used to pass trial values to the circuit,
      otherwise shell variables are used.  This pertains to operating
      range and Monte Carlo analysis.
    </dl>

    <dl>
    <dt><tt>checkN1, checkN2</tt> (integer, length 1)<dd>
      These are the indices into the value array of the two parameters
      being varied in operating range analysis.  The other entries are
      fixed.  These vectors are not used if shell variables pass the
      trial values to the circuit, and are not used in Monte Carlo
      analysis.
    </dl>

    <p>
    The shell variables are:

    <dl><dt><tt>
    checkiterate</tt> (0-10)<dd>
      This is the binary search depth used in finding operating range
      extrema.  This is not used in Monte Carlo analysis.
    </dl>

    <dl><dt><tt>
    value1, value2</tt><dd>
      These variables are set to the current trial values to be used
      in the circuit (parameters 1 and 2).  The <i>WRspice</i> deck
      should reference these variables (as <tt>$value1</tt> and
      <tt>$value2</tt>) as the parameters to vary.  Alternatively, the
      <tt>value</tt> array can be used for this purpose.  These
      variables can be used in Monte Carlo analysis.  Additionally,
      these variables, and a variable named "<tt>value</tt>" can be
      set to a string.  When done, the variable or vector named by the
      string will take on the functionality of the assigned-to
      variable.  For example, if <tt>set value1 = L1</tt> is given,
      the variable <tt>L1</tt> is used to pass trial parameter 1
      values to the circuit (references are <tt>$L1</tt>).

      <p>
      Instead of using shell substitution and the
      <tt>value1</tt>/<tt>value2</tt> variables to set varying circuit
      parameters, one can use an internal parameter passing method
      which is probably more efficient.

      <p>
      The form, given before the analysis,
      <blockquote>
      <tt>set value1="%</tt><i>devicelist</i><tt>,</tt><i>paramlist</i><tt>"</tt>
      </blockquote>

      sets up a direct push into the named <i>parameters</i> of listed
      <i>devices</i>, avoiding shell expansion and vectors.  Note that
      the list must follow a magic '<tt>%</tt>' character, which tells
      the system to use the <i>devlist</i>,<i>paramlist</i> syntax, as
      used in the <a href="psetting"><b>sweep</b></a> command.  This
      is equivalent to giving the <i>pstr1</i>, <i>pstr2</i> on the
      command line.

      <p>
      The <tt>jjoprng2.cir</tt> file in the examples illustrates use
      of this syntax.

    </dl>

    <p>
    The <tt>checkVAL1</tt>, <tt>checkDEL1</tt>, etc.  vectors used
    must be defined and properly initialized, either in the deck or
    directly from the shell.

    <p>
    The shell variables <tt>value1</tt> and <tt>value2</tt> are set to
    the current variable 1 and variable 2 values.  In addition, vector
    variables can be set.  This is needed for scripts such as
    optimization where the parameter to be varied is required to be
    under program control.  If a vector named <tt>value</tt> exists,
    as does a vector named <tt>checkN1</tt>, then the vector entry
    <tt>value</tt>[<i>checkN1</i>] is set to <tt>$value1</tt> if
    <tt>checkN1</tt> is in the range of <tt>value</tt>.  Similarly, if
    a vector <tt>checkN2</tt> exists, then the vector entry
    <tt>value</tt>[<i>checkN2</i>] is set to <tt>$value2</tt> if
    <tt>checkN2</tt> is in the range of <tt>value</tt>.  Thus, instead
    of invoking <tt>$value1</tt> and <tt>$value2</tt> in the
    <i>WRspice</i> text, one can instead invoke
    <tt>$&value[$&checkN1]</tt>, <tt>$&value[$&checkN2]</tt>, where we
    have previously defined the vectors <tt>value</tt>,
    <tt>checkN1</tt>, <tt>checkN2</tt>.  The file could have a number
    of parameters set to <tt>$&value[0]</tt>, <tt>$&value[1]</tt>, ... 
    .  If <tt>checkN1</tt> is set to 2, for example,
    <tt>$&value[2]</tt> would be varied, and the other values would be
    fixed at predefined entries.  The name "value" can be redefined by
    setting a shell variable named "value" to the name of another
    vector.

    <p>
    If any of the shell variables <tt>value1</tt>, <tt>value2</tt>, or
    a <i>shell</i> variable <tt>value</tt> are set to a string, then
    the shell variable or vector named in the string will have the
    same function as the assigned-to variable.  For example, if in the
    header one has "<tt>set value1 = L1</tt>", then the variable
    reference <tt>$L1</tt> would be used in the file to introduce
    variations, rather than <tt>$value1</tt>.  Similarly, if we have
    issued "<tt>set value = myvec</tt>", the vector <tt>myvec</tt> would
    contain values to vary (using the pointer vectors <tt>checkN1</tt>
    and <tt>checkN2</tt>), and a reference would have the form
    <tt>$&myvec[$&checkN1]</tt>.  Note that the alternate variables
    are not automatically defined before the circuit is parsed, so
    that they should be set to some value in the header.  The default
    <tt>$value1</tt> and <tt>$value2</tt> are predefined to zero.

    <p>
    In Monte Carlo analysis, the header block is executed before each
    simulation.  In the header block, shell variables and vectors may
    be set for each new trial.  These variables and vectors can be
    used in the SPICE text to modify circuit parameters.  The names of
    the variables used, and whether to use vectors or variables, is up
    to the user (shell variables are a little more efficient).  Monte
    Carlo analysis does not use predefined names for parameter data. 
    Typically, the <a href="gauss"<tt>gauss</tt></a> function is
    used to specify a random value for the variables in the header
    block.

    <p>
    One can keep track of the progress of the analysis in two ways. 
    <i>WRpice</i> will print the analysis point on the screen, plus
    indicate whether the circuit failed or passed at the point, if the
    <tt>-v</tt> option is given to the <b>check</b> command.  The <a
    href="echo"><b>echo</b></a> command can be used in the codeblock
    to provide more information on screen, which is printed whether or
    not the <tt>-v</tt> option was given.  The second method uses the
    <b>mplot</b> command, which graphically records the pass/fail
    points.  In this mode, the relevant arguments to <b>mplot</b> are
    as follows.
    <dl>
    <dt><tt>mplot -on</tt><dd>
    This will cause subsequent operating range analysis results to be
    plotted while the analysis is running.
    </dl>
    <dl>
    <dt><tt>mplot -off</tt><dd>
    This will return to the default (no graphical output while
    simulating).
    </dl>

    <p>
    The analysis can search for the actual edge of the operating
    region for each row and column.  These data are stored in vectors
    named <tt>opmin1</tt>, <tt>opmax1</tt>, <tt>opmin2</tt>, and
    <tt>opmax2</tt> with length equal to the number of points of the
    fixed variable.  For example, <tt>opmin1[0]</tt> will contain the
    minimum parameter 1 value when parameter 2 is equal to
    <i>central2</i> - <i>delta2</i>*<i>steps2</i>, and
    <tt>opmin1[2*</tt><i>steps2</i><tt>]</tt> will contain the minimum
    parameter 1 value when parameter 2 is <i>central2</i> +
    <i>delta2</i>*<i>steps2</i>.

    <p>
    The binary search depth is controlled by a shell variable
    <tt>checkiterate</tt>, with possible values of 0-10.  If set to
    1-10, the search is performed (setting to 0 skips the range
    finding).  Higher values provide more accuracy but take more time. 
    If the search is performed, a vector called <tt>range</tt> and its
    scale <tt>r_scale</tt> are also produced.  These contain the Y and
    X coordinates of the operating range contour, which can be plotted
    with the command "<tt>plot range</tt>".

    <p>
    A typical approach is to first unset <tt>checkiterate</tt>,
    <tt>checkSTP1</tt>, and <tt>checkSTP2</tt>.  The <b>check</b>
    command is used to run a single-point analysis, while changing the
    values of <tt>value1</tt> and <tt>value2</tt> until a pass point
    is found.  After the pass point is found, <tt>checkiterate</tt>
    can be set to a positive value, which will yield the ranges for
    the two variables.  Then, the <tt>checkSTP1</tt> and other
    variables can be set to cover this range with desired granularity,
    and the analysis performed again.

    <p>
    When only one point is checked (<tt>checkSTP1 = checkSTP2 =
    0</tt>), no output file is generated.  If <tt>checkiterate</tt> is
    nonzero and the <tt>-a</tt> option is given, and a vector is used
    to supply trial values, the range of each entry in the vector is
    determined, and stored in the <tt>opmin1</tt> and <tt>opmax1</tt>
    vectors.  A mask vector can be defined, with the same length as
    the value vector and same name with the suffix "_mask".  Value
    entries corresponding to nonzero entries of this vector do not
    have the range computed.  If the <tt>-a</tt> flag is not given,
    the range is found in the usual way.  The central value must pass,
    or the range will not be computed.
!!LATEX check commands.tex
The {\cb check} command is used to initiate margin analysis.  Margin
analysis can consist of either a swept operating range analysis, or
a Monte Carlo analysis.
\begin{quote}
{\vt check} [{\vt -a}] [{\vt -b}] [{\vt -c}] [{\vt -m}] [{\vt -r}]
  [{\vt -f}] [{\vt -s}] [{\vt -k}] [{\vt -h}] [{\vt -v}]
  [[{\it pstr1\/}] {\it val1} {\it del1} {\it stp1\/}]
  [[{\it pstr2\/}] {\it val2} {\it del2} {\it stp2\/}]
  [{\it analysis\/}]
\end{quote}
See Chapter \ref{oprange} for a full description of operating range
and Monte Carlo analysis.  The current circuit is evaluated, and must
have an associated block of control statements which contain the
pass/fail script.  A second associated block of executable statements
contains initialization commands.  These blocks can be provided in the
circuit file, or be previously defined codeblocks bound to the
circuit.  Codeblocks are executable data structures described in
\ref{codeblock}.  Setting up the file in one of the formats described
described in Chapter \ref{oprange} will ensure that these blocks are
created and bound transparently, however it is possible to do this by
hand.

The option characters can be grouped following a single ``{\vt -}'',
or entered separately.

\begin{description}
\item{\vt -a}\\
If the {\vt -a} flag is given, operating range analysis is performed
at every point (all points mode).  Otherwise, the analysis attempts to
limit computation by identifying the contour containing the points of
operation.  This algorithm can be confused by operating ranges with
strange shapes, or which possess islands of fail points.  If the input
file contains a {\vt .checkall} line, then the {\vt -a} flag to the
{\cb check} command is redundant, all points will be checked in this
case.

\item{\vt -b}\\
If this is given, the analysis will be paused after setup and the {\cb
check} command will return.  This is the start for atomic Monte Carlo
(see \ref{atomic}); a script can call the {\cb mctrial} command
numerous times at this point, then ``{\vt check -c}'' to clean up and
end the analysis.

\item{\vt -c}\\
The {\vt -c} (clear) option will clear any margin analysis in progress
if the analysis has been paused, for example by pressing {\kb Ctrl-C},
or if in an atomic Monte Carlo script.  Return is immediate whether or
not there is a present analysis to clear.  Unlike in release 4.3.8 and
earlier, no new analysis is started, and other options are ignored.

A paused margin analysis is resumed if the {\cb check} command is
given which does not have the {\vt -c} option set, and any arguments
given in this case are ignored.  The {\cb resume} command will also
restart a paused margin analysis.

\item{\vt -m}\\
If the {\vt -m} option is given, Monte Carlo analysis is performed,
rather than operating range analysis.  This is the default if a {\vt
.monte} line appeared in the file; the {\vt -m} option is only
required if there is no {\vt .monte} line.  The {\vt -a} option is
ignored if {\vt -m} is given, as is {\vt .checkall}.  Monte Carlo
analysis files differ from operating range files only in the header
(or header codeblock).  During Monte Carlo analysis, the header block
is executed before every simulation so that variables can be updated. 
In operating range analysis variables are initialized by the header
block only once, at the start of analysis.

\item{\vt -r}\\
If the {\vt -r} (remote) option is given, remote servers will be
assigned simulation runs, allowing parallelism to increase analysis
speed.  The remote servers must have been specified through the {\cb
rhost} command, and each must have a {\vt wrspiced} server running. 
More information on remote asynchronous runs can ge found in
\ref{rhost} and \ref{rspice}.
\end{description}

Ordinarily, during operating range and Monte Carlo analysis, only the
current data point is retained.  The amount of data retained can be
altered with the {\vt -f}, {\vt -s}, and {\vt -k} options.  However,
if a {\vt .measure} line appears in the circuit deck, or the {\cb
iplot} runop is active, data will be retained internally so that the
{\vt .measure} or {\cb iplot} is operational.

\begin{description}
\item{\vt -f}\\
The {\vt -f} option will cause the data for the current trial to be
retained.  This is implied if any {\vt .measure} lines are present, or
if an {\cb iplot} is active.  The data are overwritten for each new
trial.  The data for the last trial are available after the analysis
is complete, or can be accessed for intermediate trials if the
analysis is paused.

\item{\vt -s}\\
The {\vt -s} option also causes retention of the data for the current
trial, but in addition will dump the data to a family of rawfiles,
similar to the {\vt segment} keyword of the {\vt .tran} line (though
this works with other than transient analysis).  The default file name
is the name of the range analysis output file, suffixed with ``{\vt
.s}{\it NN\/}'', where {\it NN} is 00, 01, etc.  Each trial generates
a new suffix in sequence.

\item{\vt -k}\\
With the {\vt -k} option, all data are retained, in a
multi-dimensional plot.  Note that this can be huge, so use of the
{\et maxdata} variable and {\vt .save} lines may be necessary.  One
can see the variations by plotting some or all of the dimensions of
the output.  Recall forms like {\vt v(1)[{\it N\/}]} refer to the {\it
N+1\/}'th trial, and {\vt v(1)[{\it N,M\/}]} includes the data for the
{\it N+1\/}'th to the {\it M+1\/}'th trials.  The {\et mplot} command
has a facility for displaying trial data in a simplified manner.

\item{\vt -h}\\
Finally, the {\vt -h} (help) option will simply print a brief summary
of the options to the {\cb check} command.

\item{\vt -v}\\
If {\vt -v} (verbose) is given, results and other messages are printed
on-screen as the analysis is performed, otherwise the analysis is
silent, except for any printing statements executed in the associated
command scripts.  The {\cb mplot} command can be used to follow
progress graphically.
\end{description}

If an {\cb iplot} is active, {\vt -f} (current trial data retention)
is implied.  The data will be plotted for each trial in the same
{\cb iplot}, erasing after each trial is complete.  If {\vt -k} is
given, all data will be plotted, without erasure.  Note that an
iplot doubles internal memory requirements.

The command line may include one or two range specifications.  In
operating range analysis, each specification consists of an optional
parameter specification string, followed by three numbers.  These
numbers will augment or override the {\vt checkVAL1}, {\vt checkDEL1},
{\vt checkSTP1}, {\vt checkVAL2}, {\vt checkDEL2}, and {\vt checkSTP2}
vectors that may be in effect.  The numbers are parsed in the order
shown, and all are actually optional.  A non-numeric token will
terminate a block, and missing values must be set from the vectors.

In Monte Carlo analysis, each block can contain only a single number,
which will override the {\vt checkSTP1} and {\vt checkSTP2} values (if
any), in that order.  These values are used to define how many Monte
Carlo trials to perform.

The optional {\it pstr1} and {\it pstr2} strings take the same format
and significance as in the {\cb sweep} command.  See the description
of that command for a description of the format.  If a parameter
specifier is given, the specified device parameters will be altered
directly, and the variables and vectors normally used to pass values
will {\bf not} be set.  This applies only to operating range analysis,
and the explicit parameter strings can only be applied from the {\cb
check} command line and not from the file.  If the analysis is two
dimensional, then both dimensions must have a parameter specification,
or neither dimension can have a parameter specification; the two
mechanisms can not be mixed.

The {\it analysis} to be performed is given, otherwise it is found in
the circuit deck.  In interactive mode, if no analysis is specified,
the user will be prompted for an analysis string.

During operating range analysis, a file is usually created and placed
in the current directory for output.  This file is named with the base
name of the input file, with an extension {\vt .d}{\it NN}, where {\it
NN} is replaced with {\vt 00}, {\vt 01}, etc.~ --- the first case
where the filename is unique.  If for some reason the input file name
is unknown, the basename ``check'' will be used.  Similarly, in Monte
Carlo analysis, a file named {\it basename\/}.{\vt m}{\it NN} is
generated.  In either case, the shell variable {\et mplot\_cur} is set
to the current output file name.  These files can be plotted on-screen
with the ``{\vt mplot [{\it filename\/}]}'' command.

The results from operating range/Monte Carlo analysis are hidden away
in the resulting plot structure.  The plot can be displayed by
entering ``{\vt mplot} {\it vec}'' where {\it vec} is any vector in
the plot.

When a {\vt .measure} is included in an iterative analysis, data are
saved as follows.  Before each iteration, the previous result vector
and its scale are saved to the end of a ``history'' vector and scale,
and are then deleted.  The result vector and scale are recreated when
the measurement is completed during the iteration.  Thus, at the end
of the analysis, for a measurement named ``example'', one would have
the following vectors:

\begin{tabular}{ll}
\et  example         & the result from the final trial\\
\et  example\_scale  & the measurement interval or point in the last trial\\
\et  example\_hist   & results from the prior trials\\
\et  example\_hist\_scale & intervals from the prior trials\\
\end{tabular}

Thus, during each trial, the result vector will have the same
properties as in a standard run.  It can be used in the {\vt .control}
block of a Monte Carlo or operating range file (recall that {\vt
\$?}{\it vector} can be used to query existence, and that if there is
no {\et checkPNTS} vector defined, the {\vt .control} block is called
once at the end of each trial).

In the current circuit, the parameters to be varied are usually
included as shell variables {\vt \$value1} and {\vt \$value2}.  These
are special hard-coded shell variables which contain the parameter
values during simulation.  Before the file is sourced (recall that
variable substitution occurs during the read-in), these variables can
be set with the {\cb set} command, and the file simulated just as any
other circuit.  Initially, the variables {\vt \$value1} and {\vt
\$value2} are set to zero.  The {\et value1} and {\et value2} names
can be changed to other names, and other mechanisms can be used to
supply trial values, as described in Chapter \ref{oprange}.

Briefly, operating range analysis works as follows.  The analysis
range and other parameters are specified by setting certain vectors in
the header script, or by hand.  The range is evaluated by rows
(varying {\et value1}) for each column ({\et value2}) point.  Columns
are then reevaluated if the terminating pass point was not previously
found.  For a row, starting at the left, points are evaluated until a
pass point is found.  The algorithm skips to the right, and evaluates
toward the left until a pass point is found.  This minimizes
simulation time, however strange operating ranges, such as those that
are reentrant or have islands, will not be reproduced correctly.  The
only fool-proof method is to evaluate every point, which will occur if
the {\vt -a} option is given, or the {\vt .checkall} line was given in
the input file.

The range of evaluation is set with {\it center\/}, {\it step\/}, and
{\it number\/} variables.  The {\it number\/} is the number of steps
to take above and below the {\it center\/}.  Thus, if {\it number\/}
is 1, the range is over the three points {\it center-step\/}, {\it
center\/}, and {\it center+step\/}.  One can set ranges for {\et
value1} and {\et value2}, or alternatively one can set {\et value2},
and the algorithm can determine the operating range for {\et value1}
at each {\et value2} point.  These values represent the parameter
variation range in operating range analysis, but serve only to
determine the number of trials in Monte Carlo analysis.

\index{check command!variables}
\index{check command!vectors}
There are a number of vectors with defined names which control
operating range and Monte Carlo analysis.  In addition, there are
relevant shell variables.  The {\cb check} command creates a plot
structure, which contains all of the special control vectors, plus
vectors for each circuit node and branch.  This plot becomes the
current plot after the analysis starts.  The special vectors which
have relevance to the operating range analysis are listed below.

\begin{description}
\item{{\et checkPNTS} (real, length $>=$ 1)}\\
These are the points of the scale variable (e.g., time in transient
analysis) at which the pass/fail test is applied.  If a fail is
encountered, the simulation is stopped and the next trial started. 
This vector is usually specified as an array, with the {\cb compose}
command, and is used in operating range and Monte Carlo analysis.  If
not specified, the evaluation is performed after the trial completes.

\item{{\et checkVAL1} (real, length 1)}\\
This is the initial central value of the first parameter to be varied
during operating range analysis.  It is not used in Monte Carlo
analysis.

\item{{\et checkDEL1} (real, length 1)}\\
The first central value will be incremented or decremented by this
value between trials in operating range analysis.  It is not used in
Monte carlo analysis.

\item{{\et checkSTP1} (integer, length 1)}\\
This is the number of trials above and below the central value.  In
Monte Carlo analysis, it partially specifies the number of simulation
runs to perform, and specifies one coordinate of the visual array used
to monitor progress (with the {\cb mplot} command).  In operating
range analysis, the default is zero.  In Monte Carlo analysis, the
default is 3.

\item{\et checkVAL2, checkDEL2, checkSTP2}\\
These are as above, but relate to the second parameter to be varied in
the circuit in operating range analysis.  In Monte Carlo analysis,
only {\et checkSTP2} is used, in a manner analogous to {\et
checkSTP1}.  The total number of simulations in Monte Carlo analysis
is (2*{\et checkSTP1} + 1)*(2*{\et checkSTP2} + 1), the same as would
be checked in operating range analysis.

\item{{\et checkFAIL}  (integer, length 1, value 0 or 1)}\\
This is the global pass/fail flag, which is set after each trial, 1
indicates failure.  This variable is used in both operating range and
Monte Carlo analysis.

\item{{\et checkINIT}  (integer, length 1, value 0 or 1)}\\
This is set to 1 by {\WRspice} before the initial execution of the
header block, before operating range or the first Monte Carlo trial. 
It is set to 0 otherwise.  Thus one can identify the first trial in
Monte Carlo analysis from within the header script.

\item{{\et opmin1, opmax1, opmin2, opmax2} (real, length $>=$ 1)}\\
The operating range analysis can be directed to find the operating
range extrema of the one parameter for each value of the other
parameter.  These vectors contain the values found.  They are not used
in Monte Carlo analysis.

\item{{\et value} (real, length variable)}\\
This vector can be used to pass trial values to the circuit, otherwise
shell variables are used.  This pertains to operating range and Monte
Carlo analysis.

\item{{\et checkN1, checkN2} (integer, length 1)}\\
These are the indices into the value array of the two parameters being
varied in operating range analysis.  The other entries are fixed. 
These vectors are not used if shell variables pass the trial values to
the circuit, and are not used in Monte Carlo analysis.
\end{description}

The shell variables are:

\begin{description}
\item{{\et checkiterate} (0-10)}\\
This is the binary search depth used in finding operating range
extrema.  This is not used in Monte Carlo analysis.

\item{\et value1, value2}\\
These variables are set to the current trial values to be used in the
circuit (parameters 1 and 2).  The {\WRspice} deck should reference
these variables (as {\vt \$value1} and {\vt \$value2}) as the
parameters to vary.  Alternatively, the value array can be used for
this purpose.  These variables can be used in Monte Carlo analysis. 
Additionally, these variables, and a variable named ``{\vt value}''
can be set to a string.  When done, the variable or vector named by
the string will take on the functionality of the assigned-to variable. 
For example, if {\vt set value1 = L1} is given, the variable {\vt L1}
is used to pass trial parameter 1 values to the circuit (references
are {\vt \$L1}).

Instead of using shell substitution and the {\vt value1}/{\vt value2}
variables to set varying circuit parameters, one can use an internal
parameter passing method which is probably more efficient.
 
The form, given before the analysis,
\begin{quote}
{\vt set value1="\%}{\it devicelist\/}{\vt ,}{\it paramlist\/}{\vt "}
\end{quote}
sets up a direct push into the named {\it parameters} of listed {\it
devices}, avoiding shell expansion and vectors.  Note that the list
must follow a magic `{\vt \%}' character, which tells the system to
use the {\it devlist\/},{\it paramlist} syntax, as used in the {\cb
sweep} command (see \ref{psetting}).  This is equivalent to giving
{\it pstr1\/}, {\it pstr2} on the command line.

The {\vt jjoprng2.cir} file in the examples illustrates use of this
syntax.

\end{description}

The {\et checkVAL1}, {\et checkDEL1}, etc.  vectors used must be
defined and properly initialized, either in the deck or directly from
the shell.

The shell variables {\et value1} and {\et value2} are set to the
current variable 1 and variable 2 values.  In addition, vector
variables can be set.  This is needed for scripts such as optimization
where the parameter to be varied is required to be under program
control.  If a vector named {\et value} exists, as does a vector named
{\et checkN1}, then the vector entry {\et value[{\et checkN1\/}]} is
set to {\vt \$value1} if {\et checkN1} is in the range of {\et value}. 
Similarly, if a vector {\et checkN2} exists, then the vector entry
{\et value[{\et checkN2\/}]} is set to {\vt \$value2}, if {\et
checkN2} is in the range of {\et value}.  Thus, instead of invoking
{\vt \$value1} and {\vt \$value2} in the {\WRspice} text, one can
instead invoke {\vt \$\&value[\$\&checkN1]}, {\vt
\$\&value[\$\&checkN2]}, where we have previously defined the vectors
{\et value}, {\et checkN1}, {\et checkN2}.  The file could have a
number of parameters set to {\vt \$\&value[0]}, {\vt \$\&value[1]},
...  .  If {\et checkN1} is set to 2, for example, {\vt \$\&value[2]}
would be varied, and the other values would be fixed at predefined
entries.  The name ``value'' can be redefined by setting a shell
variable named ``{\vt value}'' to the name of another vector.

If any of the shell variables {\et value1}, {\et value2}, or a {\it
shell} variable {\et value} are set to a string, then the shell
variable or vector named in the string will have the same function as
the assigned-to variable.  For example, if in the header one has
``{\vt set value1 = L1}'', then the variable reference {\vt \$L1}
would be used in the file to introduce variations, rather than {\vt
\$value1}.  Similarly, if we have issued ``{\vt set value = myvec}'',
the vector {\et myvec} would contain values to vary (using the pointer
vectors {\et checkN1} and {\et checkN2}), and a reference would have
the form {\vt \$\&myvec[\$\&checkN1]}.  Note that the alternate
variables are not automatically defined before the circuit is parsed,
so that they should be set to some value in the header.  The default
{\vt \$value1} and {\vt \$value2} are predefined to zero.

In Monte Carlo analysis, the header block is executed before each
simulation.  In the header block, shell variables and vectors may be
set for each new trial.  These variables and vectors can be used in
the SPICE text to modify circuit parameters.  The names of the
variables used, and whether to use vectors or variables, is up to the
user (variables are a little more efficient).  Monte Carlo analysis
does not use predefined names for parameter data.  Typically, the {\vt
gauss} function is used to specify a random value for the variables
in the header block.

One can keep track of the progress of the analysis in two ways. 
{\WRspice} will print the analysis point on the screen, plus indicate
whether the circuit failed or passed at the point, if the {\vt -v}
option was given to the {\cb check} command.  The {\cb echo} command can
be used in the codeblock to provide more information on-screen, which
is printed whether or not the {\vt -v} option was given.  The second
method uses the {\cb mplot} command, which graphically records the
pass/fail points.  In this mode, the relevant arguments to {\cb mplot}
are as follows.
\begin{description}
\item{\vt mplot -on}\\
This will cause subsequent operating range analysis results to be plotted
while the analysis is running.

\item{\vt mplot -off}\\
This will return to the default (no graphical output while simulating).
\end{description}

The analysis can search for the actual edge of the operating region
for each row and column.  These data are stored in vectors named {\et
opmin1}, {\et opmax1}, {\et opmin2}, and {\et opmax2} with length
equal to the number of points of the fixed variable.  For example,
{\vt opmin1[0]} will contain the minimum parameter 1 value when
parameter 2 is equal to {\it central2} - {\it delta2\/}*{\it steps2},
and {\vt opmin1[2*{\it steps2\/}]} will contain the minimum parameter
1 value when parameter 2 is {\it central2} + {\it delta2}*{\it
steps2}.

The binary search depth is controlled by a shell variable {\et
checkiterate}, with possible values of 0--10.  If set to 1--10, the
search is performed (setting to 0 skips the range finding).  Higher
values provide more accuracy but take more time.  If the search is
performed, a vector called {\et range} and its scale {\et r\_scale}
are also produced.  These contain the Y and X coordinates of the
operating range contour, which can be plotted with the command ``{\vt
plot range}''.

A typical approach is to first unset {\et checkiterate}, {\et
checkSTP1}, and {\et checkSTP2}.  The {\cb check} command is used to
run a single-point analysis, while changing the values of {\et value1}
and {\et value2} until a pass point is found.  After the pass point is
found, {\et checkiterate} can be set to a positive value, which will
yield the ranges for the two variables.  Then, the {\et checkSTP1} and
other variables can be set to cover this range with desired
granularity, and the analysis performed again.

When only one point is checked ({\vt checkSTP1 = checkSTP2 = 0}), no
output file is generated.  If {\et checkiterate} is nonzero and the
{\vt -a} option is given, and a vector is used to supply trial values,
the range of each entry in the vector is determined, and stored in the
{\et opmin1} and {\et opmax1} vectors.  A mask vector can be defined,
with the same length as the value vector and same name with the suffix
``{\vt \_mask}''.  Value entries corresponding to nonzero entries of
this vector do not have the range computed.  If the {\vt -a} flag is
not given, the range is found in the usual way.  The central value
must pass, or the range will not be computed.

See Chapter \ref{oprange} for more information on performing operating
range and Monte Carlo analysis, and the suggested file formats.

!!SEEALSO
oprngfile
codeblock
rhostcom
findrange
mctrial
simcmds

!! commands.tex 011909
!!KEYWORD
dc
!!TITLE
dc command
!!HTML 
    command: <tt>dc</tt> <i>dc_args</i>
 
    <p>
    The <b>dc</b> command performs a swept <a href=".dc">dc
    analysis</a> of the current circuit.  The <i>dc_args</i> are the
    same as used in the <tt>.dc</tt> line.
!!LATEX dc commands.tex
The {\cb dc} command performs a swept dc analysis of the current
circuit.
\begin{quote}\vt
dc {\it .dc dc\_args}
\end{quote}
The {\it dc\_args} are the same as used in the {\vt .dc} line (see
\ref{dcline}).
 
!!SEEALSO
multidc
simcmds

!! commands.tex 022519
!!KEYWORD
delete
!!TITLE
delete command
!!HTML 
    command: <tt>delete</tt> [[<tt>in</tt>]<tt>active</tt>]
    [<tt>all | save | trace | iplot | measure | stop | </tt><i>number</i>] ...]
 
    <p>
    The <b>delete</b> command is used to remove "runops" (traces or
    breakpoints) from the runop list.  With no arguments, a list of
    existing runops is printed, and the user is prompted for one to
    delete.  The <a href="status"><b>status</b></a> command also
    prints a list of runops.  Runops can also be controlled with the
    panel brought up with the <b>Trace</b> button in the <b>Tools</b>
    menu.

    <p>
    If the <tt>inactive</tt>/<tt>active</tt> keyword is given,
    breakpoints listed to the right but before another (in)active
    keyword are deleted only if they are inactive/active.  Otherwise,
    they are deleted unconditionally.  If one of <tt>stop</tt>,
    <tt>measure</tt>, <tt>trace</tt>, <tt>iplot</tt>, or <tt>save</tt>
    is given, runops of that type only are deleted.  These keywords
    can appear in combination.

    <p>
    Each runop is assigned a unique number, which is available through
    the <b>status</b> command.  This number can also be entered on the
    command line causing that runop to be deleted (if the activity
    matches the <tt>inactive</tt> keyword, if given).  A range of
    numbers can be given, for example "2-6".  There must be no white
    space in the range token.

    <p>
    Examples:
    <blockquote>
      Delete all traces and iplots:<br>
      <tt>delete trace iplot</tt><br>
      <br>
      Delete all inactive runops:<br>
      <tt>delete inactive all</tt><br>
      <br>
      Delete all traces and inactive iplots:<br>
      <tt>delete traces inactive iplots</tt><br>
    </blockquote>
!!LATEX delete commands.tex
The {\cb delete} command is used to remove ``runops'' (traces or
breakpoints) from the runop list.
\begin{quote}\vt
delete [[in]active] [all | save | trace | iplot | measure | stop |
 {\it number\/}] ...]
\end{quote}
With no arguments, a list of existing runops is printed, and the
user is prompted for one to delete.  The {\cb status} command also
prints a list of runops.  Runopss can also be controlled with the
panel brought up with the {\cb Trace} button in the {\cb Tools}
menu.

If the {\vt inactive}/{\vt active} keyword is given, breakpoints
listed to the right but before another {\vt (in)active} keyword are
deleted only if they are inactive/active.  Otherwise, they are deleted
unconditionally.  If one of {\vt stop}, {\vt measure}, {\vt trace},
{\vt iplot}, or {\vt save} is given, runops of that type only are
deleted.  These keywords can appear in combination.

Each runop is assigned a unique number, which is available through
the {\cb status} command.  This number can also be entered on the
command line causing that runop to be deleted (if the activity
matches the {\vt inactive} keyword, if given).  A range of numbers
can be given, for example ``2-6''.  There must be no white space in
the range token.

Examples:
\begin{quote}
Delete all traces and iplots:\\
{\vt delete trace iplot}\\
\\
Delete all inactive runops:\\
{\vt delete inactive all}\\
\\
Delete all traces and inactive iplots:\\
{\vt delete traces inactive iplots}
\end{quote}
 
!!SEEALSO
stop
iplot
step
simcmds

!! commands.tex 062515
!!KEYWORD
destroy
!!TITLE
destroy command
!!HTML
    command: <tt>destroy</tt> [<tt>all</tt>] | [<i>plotname ...</i>]

    <p>
    The <b>destroy</b> command will delete plot structures.  Giving
    this command will throw away the data in the named plots and
    reclaim the storage space.  This can be necessary if a lot of
    large simulations are being done.  <i>WRspice</i> should warn the
    user if the size of the program is approaching the maximum
    allowable size (within about 90%), but it is advisable to run the
    <a href="rusage"><b>rusage</b></a> <tt>space</tt> command
    occasionally if running out of space is a possibility.  If the
    argument to <b>destroy</b> is <tt>all</tt>, all plots except the
    constants plot will be thrown away.  It is not possible to destroy
    the constants plot.  If no argument is given the current plot is
    destroyed.
!!LATEX destroy commands.tex
The {\cb destroy} command will delete plot structures.
\begin{quote}\vt
destroy [all] | [{\it plotname} ...]
\end{quote}
Giving this command will throw away the data in the named plots and
reclaim the storage space.  This can be necessary if a lot of large
simulations are being done.  {\WRspice} should warn the user if the
size of the program is approaching the maximum allowable size (within
about 90\%), but it is advisable to run the {\vt rusage space} command
occasionally if running out of space is a possibility.  If the
argument to {\cb destroy} is {\vt all}, all plots except the constants
plot will be thrown away.  It is not possible to destroy the constants
plot.  If no argument is given the current plot is destroyed.
 
!!SEEALSO
setplot
free
simcmds

!! commands.tex 080215
!!KEYWORD
devcnt
!!TITLE
devcnt command
!!HTML
    command: <tt>devcnt</tt> [<i>model_name</i> ...]

    <p>
    This command will print a table of instantiation counts of the
    different device types found in the current circuit.  These are
    the number of device structures used in the internal
    representation of the circuit, after subcircuit expansion.

    <p>
    If no arguments appear, all devices found will be included. 
    Otherwise, arguments are taken as model names (the leftmost
    element printed in the output), which may include use of
    "globbing" characters '<tt>*</tt>' and '<tt>?</tt>' and friends. 
    Briefly, '<tt>?</tt>' matches any character, '<tt>*</tt>' matches
    any set of characters or no characters, "<tt>[abc]</tt>" matches
    the characters '<tt>a</tt>', '<tt>b</tt>', and '<tt>c</tt>', and
    "<tt>a{bc,de}</tt>" matches "<tt>abc</tt>" and "<tt>ade</tt>". 
    Matching is case-insensitive.

    <p>
    Note that every device has a model, which is created internally if
    not given explicitly.  In particular, simple resistor, inductor,
    and capacitor devices have default models named "R", "L", and "C".

    <p>
    The <b>devcnt</b> table for all devices is also appended to the
    standard output of batch jobs.
!!LATEX devcnt commands.tex
This command will print a table of instantiation counts of the
different device types found in the current circuit.
\begin{quote} \vt
devcnt [{\it model\_name} ...]
\end{quote}
These are the number of device structures used in the internal
representation of the circuit, after subcircuit expansion.

If no arguments appear, all devices found will be included. 
Otherwise, arguments are taken as model names (the leftmost element
printed in the output), which may include use of ``globbing''
characters `{\vt *}' and `{\vt ?}' and friends.  Briefly, `{\vt ?}'
matches any character, '{\vt *}' matches any set of characters or no
characters, ``{\vt [abc]}'' matches the characters `{\vt a}', `{\vt
b}', and `{\vt c}', and ``{\vt a}\{{\vt bc,de}\}'' matches ``{\vt
abc}'' and ``{\vt ade}''.  Matching is case-insensitive.

Note that every device has a model, which is created internally if not
given explicitly.  In particular, simple resistor, inductor, and
capacitor devices have default models named ``{\vt R}'', ``{\vt L}'',
and ``{\vt C}''.

The {\cb devcnt} table for all devices is also appended to the
standard output of batch jobs.
 
!!SEEALSO
simcmds

!! commands.tex 042814
!!KEYWORD
devload
!!TITLE
devload command
!!HTML
    command: <tt>devload</tt> [<i>module_path</i> | <tt>all</tt>]

    <p>
    <i>WRspice</i> supports runtime-loadable <a href="loadable">device
    modules</a>.  Once loaded, the corresponding device is available
    during simulation runs, in the same way as the internally-compiled
    devices in the device library.

    <p>
    This command can be used at any time to load a device module into
    <i>WRspice</i>.  If given without arguments, a list of the
    dynamically loaded device modules currently in memory is printed. 
    Otherwise, the single argument can be a path to a loadable device
    module file to be loaded, or a path to a directory containing
    module files, all of which will be loaded.

    <p>
    Once a module is loaded, it can not be unloaded.  The file can be
    re-loaded, however, so if a module is modified and rebuilt, it can
    be loaded again to update the running <i>WRspice</i>.

    <p>
    On program startup, by default known loadable device modules are
    loaded automatically.  Modules are known to <i>WRspice</i> through
    the following.

    <ol>
    <li>If the <a href="modpath"><tt>modpath</tt></a> variable is set
    to a list of directory paths, modules are loaded from each
    directory in the list.  The <tt>modpath</tt> can be set from
    the <a href="startup_files"><tt>.wrspiceinit</tt></a> file.

    <li>If the <tt>modpath</tt> variable is <b>not</b> set, then
    modules are loaded from the <tt>devices</tt> subdirectory of the
    <tt>startup</tt> directory in the installation area (which is
    generally installed as
    <tt>/usr/local/xictools/wrspice/startup/devices</tt>).  Note that
    if the user sets up a <tt>modpath</tt>, this directory must be
    explicitly included for these devices, which are supplied with the
    <i>WRspice</i> distribution, to be loaded.
    </ol>

    <p>
    If the boolean variable <a href="nomodload"><tt>nomodload</tt></a>
    is set in the <a href="startup_files"><tt>.wrspiceinit</tt></a>
    file, then the module auto-loading is suppressed.  Equivalently,
    giving the "<tt>-mnone</tt>" <a href="-mnone">command line
    option</a> will also suppress auto-loading, by actually setting
    the <tt>nomodload</tt> variable.  Auto-loading is also suppressed
    if the "<tt>-m</tt>" command line <a href="-m">option</a> is
    given, which is another method by which modules can be loaded.

    <p>
    If, instead of a module path, the keyword "<tt>all</tt>" is given
    to the <b>devload</b> command, all known modules as described
    above will be loaded, the same as for the auto-load.  This will
    be done whether or not <tt>nomodload</tt> is set.

    <p>
    This gives the user flexibility in setting up devices in the
    <tt>.wrspiceinit</tt> file.  Normally, devices are auto-loaded
    after <tt>.wrspiceinit</tt> is processed, so that calls to the
    <a href="devmod"><b>devmod</b></a> command (for example) in
    <tt>.wrspiceinit</tt> would likely fail.  However, one can first
    call "<tt>devload all</tt>" to auto-load the devices, and set
    <tt>nomodload</tt> to avoid the automatic loading.  Then, one
    can call commands which require that devices be loaded.

    <p>
    The "<tt>all</tt>" form may also be useful in scripts, in
    conjunction with setting the <tt>modpath</tt> to different values.
!!LATEX devload commands.tex
This command will load a loadable device module into {\WRspice}.
\begin{quote}\vt
devload [{\it module\_path\/} | {\vt all}]
\end{quote}

{\WRspice} supports runtime-loadable device modules.  Once loaded, the
corresponding device is available during simulation runs, in the same
way as the internally-compiled devices in the device library.

This command can be used at any time to load a device module into
{\WRspice}.  If given without arguments, a list of the dynamically
loaded device modules currently in memory is printed.  Otherwise, the
single argument can be a path to a loadable device module file to be
loaded, or a path to a directory containing module files, all of which
will be loaded.

Once a module is loaded, it can not be unloaded.  The file can be
re-loaded, however, so if a module is modified and rebuilt, it can be
loaded again to update the running {\WRspice}.

On program startup, by default known loadable device modules are
loaded automatically.  Modules are known to {\WRspice} through the
following.

\begin{enumerate}
\item{If the {\vt modpath} variable is set to a list of directory
paths, modules are loaded from each directory in the list.  The {\vt
modpath} can be set from the {\vt .wrspiceinit} file.}

\item{If the {\vt modpath} variable is {\bf not} set, then modules are
loaded from the {\vt devices} subdirectory of the {\vt startup}
directory in the installation area (which is generally installed as\\
{\vt /usr/local/xictools/wrspice/startup/devices}).  Note that if the
user sets up a {\vt modpath}, this directory must be explicitly
included for these devices, which are supplied with the {\WRspice}
distribution, to be loaded.}
\end{enumerate}

If the boolean variable {\vt nomodload} is set in the {\vt
.wrspiceinit} file, then the module auto-loading is suppressed. 
Equivalently, giving the ``{\vt -mnone}'' command line option will
also suppress auto-loading, by actually setting the {\vt nomodload}
variable.  Auto-loading is also suppressed if the ``{\vt -m}'' command
line option is given, which is another method by which modules can be
loaded.

If, instead of a module path, the keyword ``{\vt all}'' is given to
the {\cb devload} command, all known modules as described above will
be loaded, the same as for the auto-load.  This will be done whether
or not {\vt nomodload} is set.

This gives the user flexibility in setting up devices in the {\vt
.wrspiceinit} file.  Normally, devices are auto-loaded after {\vt
.wrspiceinit} is processed, so that calls to the {\cb devmod} command
(for example) in {\vt .wrspiceinit} would likely fail.  However, one
can first call ``{\vt devload all}'' to auto-load the devices, and set
{\vt nomodload} to avoid the automatic loading.  Then, one can call
commands which require that devices be loaded.

The ``{\vt all}'' form may also be useful in scripts, in conjunction
with setting the {\vt modpath} to different values.

!!SEEALSO
devls
devmod

!! commands.tex 121011
!!KEYWORD
devls
!!TITLE
devls command
!!HTML
    command: <tt>devls</tt> [<i>key</i>[<i>minlev</i>[-<i>maxlev</i>]]] ...

    <p>
    This commnd prints a listing of devices available for use in
    simulation, from the built-in device library or <a
    href="devload">loaded</a> as modules at run time.  With no argument,
    all available devices are listed.

    <p>
    Arguments take the form of a key letter, optionally followed by an
    integer, or two integers separated by a hyphen to indicate a
    range.  This will print only devices that match the key letter,
    and have model levels that match the integer or integer range
    given.  Any number of these arguments can be given.

    <p>
    Example:  <tt>devls c r1 m30-40</tt><br>

    <p>
    This will print all devices keyed by '<tt>c</tt>' (capacitors),
    all devices keyed by '<tt>r</tt>' (resistors) with model level 1,
    and devices keyed by '<tt>m</tt>' (mos) with model levels 30-40
    inclusive.
!!LATEX devls commands.tex
This command lists currently available devices.
\begin{quote}\vt
devls [{\it key\/}[{\it minlev\/}[-{\it maxlev\/}]]] ...
\end{quote}

This commnd prints a listing of devices available for use in
simulation, from the built-in device library or loaded as modules at
run time.  With no argument, all available devices are listed.

Arguments take the form of a key letter, optionally followed by an
integer, or two integers separated by a hyphen to indicate a range. 
This will print only devices that match the key letter, and have model
levels that match the integer or integer range given.  Any number of
these arguments can be given.

Example:  {\vt devls c r1 m30-40}\\

This will print all devices keyed by `{\vt c}' (capacitors), all
devices keyed by `{\vt r}' (resistors) with model level 1, and devices
keyed by `{\vt m}' (mos) with model levels 30--40 inclusive.

!!SEEALSO
devmod

!! commands.tex 121611
!!KEYWORD
devmod
!!TITLE
devmod command
!!HTML
    command: <tt>devmod</tt> <i>index</i> [<i>level</i> ...]

    <p>
    It is possible to program the model levels associated with devices
    in <i>WRspice</i>.  This allows the user to set up model levels
    for compatibility with another simulator, or to directly use
    simulation files where the model level is different from that
    initially assigned in <i>WRspice</i>.  The effect is similar to
    the <a href=".mosmap"><tt>.mosmap</tt></a> input directive, but
    applies to all device types.

    <p>
    All devices have built-in levels, which are the defaults.  This
    command allows levels to be changed in the currently running
    <i>WRspice</i>.  The change occurs in memory only so is not
    persistent across different <i>WRspice</i> sessions.  However, the
    command can be used in a startup script to perform the changes
    each time <i>WRspice</i> is invoked.

    <p>
    The first argument to <b>devmod</b> is a mandatory device index. 
    This is an integer that corresponds to an internal index for the
    device.  These are the numbers that appear in the listing from the
    <a href="devls"><b>devls</b></a> command.

    <p>
    If there are no other arguments, the device is simply listed, in
    the same format as the entries from <b>devls</b>.

    <p>
    Any following arguments are taken as model levels.  Each level is
    an integer in the range 1-255, and up to eight levels can be
    given.  The device will be called for any of the level numbers
    listed.

    <p>
    After pressing <b>Enter</b>, the device entry is printed with the
    new model levels.  The entire device list is checked, and if there
    are clashes from the new model level, a warning is issued.  If two
    similar devices have the same model number, the device with the
    lowest index will always be selected for that value.

    <p>
    There are a few devices that have levels that can not be changed. 
    These are built-in models, such as MOS and TRA, where the model
    code is designed to handle several built-in levels (such as MOS
    levels 1-3 and 6).  Attempting to change these levels will fail.

    <p>
    Model level 1 is somewhat special in that it is the default when
    no model level is given in SPICE input for a device.  Level 0 is
    reserved for internal use and can not be assigned.  The largest
    possible model level is 255 in WRspice.
!!LATEX devmod commands.tex
It is possible to program the model levels associated with devices
in {\WRspice}.
\begin{quote}\vt
devmod {\it index} [{\it level} ...]
\end{quote}

This allows the user to set up model levels for compatibility with
another simulator, or to directly use simulation files where the model
level is different from that initially assigned in {\WRspice}.  The
effect is similar to the {\vt .mosmap} input directive, but applies to
all device types.

All devices have built-in levels, which are the defaults.  This
command allows levels to be changed in the currently running
{\WRspice}.  The change occurs in memory only so is not persistent
across different {\WRspice} sessions.  However, the command can be
used in a startup script to perform the changes each time {\WRspice}
is invoked.

The first argument to {\cb devmod} is a mandatory device index.  This
is an integer that corresponds to an internal index for the device. 
These are the numbers that appear in the listing from the {\cb devls}
command.

If there are no other arguments, the device is simply listed, in the
same format as the entries from {\cb devls}.

Any following arguments are taken as model levels.  Each level is an
integer in the range 1--255, and up to eight levels can be given.  The
device will be called for any of the level numbers listed.

After pressing {\kb Enter}, the device entry is printed with the new
model levels.  The entire device list is checked, and if there are
clashes from the new model level, a warning is issued.  If two similar
devices have the same model number, the device with the lowest index
will always be selected for that value.

There are a few devices that have levels that can not be changed. 
These are built-in models, such as MOS and TRA, where the model code
is designed to handle several built-in levels (such as MOS levels 1--3
and 6).  Attempting to change these levels will fail.

Model level 1 is somewhat special in that it is the default when no
model level is given in SPICE input for a device.  Level 0 is reserved
for internal use and can not be assigned.  The largest possible model
level is 255 in WRspice.

!! commands.tex 011909
!!KEYWORD
disto
!!TITLE
disto command
!!HTML 
    command: <tt>disto</tt> <i>disto_args</i> [<tt>dc</tt> <i>dc_args</i>]
 
    <p>
    The <b>disto</b> command will initiate <a href=".disto">distortion
    analysis</a> of the current circuit.  The <i>disto_args</i> are
    the same as appear in a <tt>.disto</tt> line.  If a <a
    href=".dc">dc sweep</a> specification follows, the distortion
    analysis is performed at each point of the dc analysis.
!!LATEX disto commands.tex
The {\cb disto} command will initiate distortion analysis of the
current circuit.
\begin{quote}\vt
disto {\it disto\_args} [dc {\it dc\_args\/}]
\end{quote}
The {\it disto\_args} are the same as appear in a {\vt .disto} line
(see \ref{distoline}).  If a dc sweep specification follows, the
distortion analysis is performed at each point of the dc analysis
(see \ref{dcline}).
 
!!SEEALSO
multidc
simcmds

!! commands.tex 072018
!!KEYWORD
dump
!!TITLE
dump command
!!HTML 
    command: <tt>dump</tt> [<tt>-r</tt>] [<tt>-c</tt>] [<tt>-t</tt>]
     [<tt>-f</tt> <i>filename</i>]

    <p>
    The <b>dump</b> command sends a print of the internal matrix data
    structure last used by the simulator for the current circuit to
    the standard output.  It is used for program debugging, and may be
    useful for analyzing convergence problems.  The command takes the
    following optional arguments.

    <dl>
    <dt><tt>-r</tt><dd>
    Print the reordred matrix, the default is to print the matrix as
    it exists before internal reordering is performed to optimize
    stability.
    </dl>

    <dl>
    <dt><tt>-c</tt><dd>
    Print in compact form, showing only which elements are nonzero
    (marked with 'x') and zero (marked with '.').
    </dl>

    <dl>
    <dt><tt>-t</tt><dd>
    Terse format, do not print header information.
    </dl>

    <dl>
    <dt><tt>-f</tt> <i>filename</i><dd>
    Print output in the given file.
    </dl>
!!LATEX dump commands.tex
The {\cb dump} command sends a print of the internal matrix data
structure last used by the simulator for the current circuit to the
standard output.  It is used for program debugging, amd may also be
useful for analyzing convergence problems.

\begin{quote}
{\vt dump} [{\vt -r}] [{\vt -c}] [{\vt -t}] [{\vt -f} {\it filename\/}]
\end{quote}

The command takes the following optional arguments.
\begin{description} 
\item{\vt -r}\\
Print the reordred matrix, the default is to print the matrix as it
exists before internal reordering is performed to optimize stability.

\item{\vt -c}\\
Print in compact form, showing only which elements are nonzero (marked
with `x') and zero (marked with `.').

\item{-t}\\
Terse format, do not print header information.

\item{\vt -f} {\it filename}\\
Print output in the given file.
\end{description}
 
!!SEEALSO
simcmds

!! commands.tex 032120
!!KEYWORD
findlower
!!TITLE
findlower command
!!HTML 
    command: <tt>findlower</tt> <i>findrange_args</i>

    <p>
    This command can be used to find the lower operating limit of one
    or two parameters in the circuit.  See the <a
    href="findrange"><b>findrange</b></a> comand for a complete
    description.
!!LATEX findlower commands.tex
This command can be used to find the lower operating limit of one or
two parameters in the circuit.  See the {\cb findrange} command for a
complete description.
 
\begin{quote}
{\vt findlower} {\it findrange\_args}
\end{quote}

!!SEEALSO
simcmds

!! commands.tex 032120
!!KEYWORD
findrange
!!TITLE
findrange command
!!HTML 
    command: <tt>findrange</tt>
        [<tt>-n1</tt> <i>name1</i>] [<tt>-n2</tt> <i>name2</i>]
        [[<i>pstr1</i>] <i>val1</i>] [[<i>pstr2</i>] <i>val2</i>]

    <p>
    The command, and its associated commands <a
    href="findlower"><b>findlower</b></a> and <a
    href="findupper"><b>findupper</b></a>, can be used to find the
    operating margins of one or two circuit parameters.  This utilizes
    the infrastructure developed for <a
    href="oprng_analysis">Operating Range</a> analysis, but can be
    used in scripts for finer control of the process.  The depth used
    in the binary search can be given in the <a
    href="checkiterate"><tt>checkiterate</tt></a> variable as for
    standard range analysis, or defaults to 6 if not set.

    <p>
    These commands can be running only when a range analysis has been
    initiated with the <a href="check"><b>check</b></a> command,
    generally by giving the "<tt>-b</tt>" option.  Any number of the
    <b>findrange</b> commands or the variants can be given, as well as
    other commands such as <a href="mctrial"><b>mctrial</b></a>.  When
    finished the <b>check</b> command should be given with the
    "<tt>-c</tt>" option to terminate the mode and free internal
    memory.

    <p>
    A usage example can be found in the examples:
    <tt>JJexamples/nor_op.cir</tt>.

    <p>
    By default, the lower and upper range values will be saved in
    vectors named <tt>opmin1</tt>, <tt>opmin2</tt>, <tt>opmax1</tt>,
    and <tt>opmax2</tt>, which are created if necessary.  If given
    following "<tt>-n1</tt>" or "<tt>-n2</tt>" respectively,
    <i>name1</i> and <i>name2</i> tokens will serve as a base for new
    names that replace vector names <tt>opmin1</tt>, <tt>opmin2</tt>,
    <tt>opmax1</tt>, <tt>opmax2</tt> for range results.  For example,
    <blockquote>
        <tt>-n1 foo</tt>
    </blockquote>
    will save output in vectors named <tt>foo_min</tt>, <tt>foo_max</tt>.

    <p>
    There is a subtlety in the syntax:  a double-quoted name, e.g.,
    -n1 "<i>pname</i>", is accepted and the quotes will be stripped
    before use.  The quotes prevent parameter substitution, so this
    allows use of a name that has also been defined as a parameter
    (with <a href=".param"><tt>.param</tt></a> directive or otherwise).

    <p>
    Each of the three functions can take parameter definitions and
    range parameters, in the same syntax as supplied to the <a
    href="check"><b>check</b></a> and <a href="sweep"><b>sweep</b></a>
    commands, however only the starting parameter value is needed. 
    The simulation must run correctly at the starting value.  The
    command line may include one or two specifications.  Each
    specification consists of an optional parameter specification
    string, followed by the starting value.  The numbers will override
    the <tt>checkVAL1</tt>, and <tt>checkVAL2</tt> vectors that may be
    in effect.

    <p>
    The optional <i>pstr1</i> and <i>pstr2</i> strings take the same
    format and significance as in the <a
    href="psetting"><b>sweep</b></a> command.  See the description of
    that command for a description of the format.  If a parameter
    specifier is given, the specified device parameters will be
    altered directly, and the variables and vectors normally used to
    pass values will <b>not</b> be set.  If two parameters are being
    set, either both must be set using the syntax above, or neither,
    the two methods can't be mixed.
!!LATEX findrange commands.tex
The command, and its associated commands {\cb findlower} and {\cb
findupper}, can be used to find the operating margins of one or two
circuit parameters.

\begin{quote}
{\vt findrange} [{\vt -n1} {\it name1\/}] [{\vt -n2} {\it name2\/}]
[[{\it pstr1\/}] {\it val1\/}] [[{\it pstr2\/}] {\it val2\/}]
\end{quote}

This utilizes the infrastructure developed for Operating Range
analysis in \ref{oprange}, but can be used in scripts for finer
control of the process.  The depth used in the binary search can be
given in the {\et checkiterate} variable as for standard range
analysis, or defaults to 6 if not set.

These commands can be running only when a range analysis has been
initiated with the {\cb check} command (see \ref{checkcom}), generally
by giving the ``{\vt -b}'' option.  Any number of the {\cb findrange}
commands or the variants can be given, as well as other commands such
as {\cb mctrial}.  When finished the {\cb check} command should be
given with the ``{\vt -c}'' option to terminate the mode and free
internal memory.

A usage example can be found in the examples: {\vt JJexamples/nor\_op.cir}.

By default, the lower and upper range values will be saved in vectors
named {\vt opmin1}, {\vt opmin2}, {\vt opmax1}, and {\vt opmax2},
which are created if necessary.  If given following ``{\vt -n1}'' or
``{\vt -n2}'' respectively, {\it name1} and {\it name2} tokens will
serve as a base for new names that replace vector names {\vt opmin1},
{\vt opmin2}, {\vt opmax1}, {\vt opmax2} for range results.  For
example,
\begin{quote}
\vt -n1 foo
\end{quote}
will save output in vectors named {\vt foo\_min}, {\vt foo\_max}.

There is a subtlety in the syntax:  a double-quoted name, e.g.,
{\vt -n1 "}{\it pname\/}{\vt "}, is accepted and the quotes will
be stripped before use.  The quotes prevent parameter substitution, so
this allows use of a name that has also been defined as a parameter
(with {\vt .param} directive or otherwise).

Each of the three functions can take parameter definitions and range
parameters, in the same syntax as supplied to the {\cb check} and {\cb
sweep} commands, however only the starting parameter value is needed. 
The simulation must run correctly at the starting value.  The command
line may include one or two specifications.  Each specification
consists of an optional parameter specification string, followed by
the starting value.  The numbers will override the {\vt checkVAL1},
and {\vt checkVAL2} vectors that may be in effect.

The optional {\it pstr1} and {\it pstr2} strings take the same format
and significance as in the {\cb sweep} command.  See the description
of that command for a description of the format.  If a parameter
specifier is given, the specified device parameters will be altered
directly, and the variables and vectors normally used to pass values
will {\bf not} be set.  If two parameters are being set, either both
must be set using the syntax above, or neither, the two methods can't
be mixed.
 
!!SEEALSO
simcmds

!! commands.tex 032120
!!KEYWORD
findupper
!!TITLE
findupper command
!!HTML 
    command: <tt>findupper</tt> <i>findrange_args</i>
 
    <p>
    This command can be used to find the upper operating limit of one
    or two parameters in the circuit.  See the <a
    href="findrange"><b>findrange</b></a> comand for a complete
    description.
!!LATEX findupper commands.tex
This command can be used to find the upper operating limit of one or
two parameters in the circuit.  See the {\cb findrange} command for a
complete description.

\begin{quote}
{\vt findupper} {\it findrange\_args}
\end{quote}
 
!!SEEALSO
simcmds

!! commands.tex 011909
!!KEYWORD
free 
!!TITLE
free command
!!HTML
    command: <tt>free</tt> [<tt>c</tt>[<tt>ircuit</tt>]]
        [<tt>p</tt>[<tt>lot</tt>]] [<tt>a</tt>[<tt>ll</tt>]]
        [<tt>y</tt>[<tt>es</tt>]]

    <p>
    The <b>free</b> command is used to free memory used by circuit and
    plot structures.  This command releases the memory used to store
    plot and circuit structures for reuse by <i>WRspice</i>.  The
    virtual memory space used by plots in particular can grow quite
    large.  If <b>free</b> is given without an argument, the user is
    queried as to whether to delete the current plot and circuit
    structures (independently).  If the argument <tt>all</tt> is
    given, the user is queried as to whether to delete all plot and
    circuit structures.  If the argument <tt>circuit</tt> is given,
    only circuits will be acted on.  Similarly, if the argument
    <tt>plot</tt> is given, only plots will be acted on.  If neither
    <tt>circuit</tt> or <tt>plot</tt> is given, both circuits and
    plots will be acted on.  If the argument <tt>yes</tt> is given,
    the user prompting is skipped, and the action performed.  Only the
    first letter of the keywords is needed.  Plots can also be freed
    from the panel brought up by the <b>Plots</b> button in the
    <b>Tools</b> menu, and circuits can be freed from the panel
    brought up with the <b>Circuits</b> button.  The <a
    href="destroy"><b>destroy</b></a> command can also be used to free
    plots.
!!LATEX free commands.tex
The {\cb free} command is used to free memory used by circuit and plot
structures.
\begin{quote}\vt
free [c[ircuit]] [p[lot]] [a[ll]] [y[es]]
\end{quote}
This command releases the memory used to store plot and circuit
structures for reuse by {\WRspice}.  The virtual memory space used by
plots in particular can grow quite large.  If {\cb free} is given
without an argument, the user is queried as to whether to delete the
current plot and circuit structures (independently).  If the argument
{\vt all} is given, the user is queried as to whether to delete all
plot and circuit structures.  If the argument {\vt circuit} is given,
only circuits will be acted on.  Similarly, if the argument {\vt plot}
is given, only plots will be acted on.  If neither {\vt circuit} or
{\vt plot} is given, both circuits and plots will be acted on.  If the
argument {\vt yes} is given, the user prompting is skipped, and the
action performed.  Only the first letter of the keywords is needed. 
Plots can also be freed from the panel brought up by the {\cb Plots}
button in the {\cb Tools} menu, and circuits can be freed from the
panel brought up with the {\cb Circuits} button.  The {\cb destroy}
command can also be used to free plots.

!!SEEALSO
destroy
simcmds

!! commands.tex 012209
!!KEYWORD
jobs
!!TITLE
jobs command
!!HTML 
    command: <tt>jobs</tt>
 
    <p>
    The <b>jobs</b> command produces a report on the asynchronous
    <i>WRspice</i> jobs currently running.  Asynchronous jobs can be
    started with the <a href="aspice"><b>aspice</b></a> command
    locally, or on a remote system with the <a
    href="rspice"><b>rspice</b></a> command.  <i>WRspice</i> checks to
    see if the jobs are finished every time a command is executed.  If
    a job is finished, then the data are loaded and become available. 
    This command takes no arguments.
!!LATEX jobs commands.tex
The {\cb jobs} command produces a report on the asynchronous
{\WRspice} jobs currently running.  Asynchronous jobs can be started
with the {\cb aspice} command locally, or on a remote system with the
{\cb rspice} command.  {\WRspice} checks to see if the jobs are
finished every time a command is executed.  If a job is finished, then
the data are loaded and become available.  This command takes no
arguments.
 
!!SEEALSO
simcmds
 
!! commands.tex 032520
!!KEYWORD
mctrial
!!TITLE
mctrial command
!!HTML 
    command: <tt>mctrial</tt>

    <p>
    This is a command to run a single trial for use when performing
    script-driven Monte Carlo analysis.
 
    <p>
    This can run only when a Monte Carlo analysis mode has been
    initiated with the <a href="check"><b>check</b></a> command,
    generally by giving the "<tt>-b</tt>" and "<tt>-m</tt>" options. 
    Any number of the <b>mctrial</b> commands can be given, as well as
    other commands such as <a href="findrange"><b>findrange</b></a>. 
    When finished the <b>check</b> command should be given with the
    "<tt>-c</tt>" option to terminate the mode and free internal
    memory.

    <p>
    A usage example can be found in the examples:
    <tt>JJexamples/nor_mc.cir</tt>.
!!LATEX mctrial commands.tex
This is a command to run a single trial for use when performing
script-driven Monte Carlo analysis.
\begin{quote}\vt
mctrial
\end{quote}

This can run only when a Monte Carlo analysis mode has been initiated
with the {\cb check} command, generally by giving the ``{\vt -b}'' and
``{\vt -m}'' options.  Any number of the {\cb mctrial} commands can be
given, as well as other commands such as {\cb findrange}.  When
finished the {\cb check} command should be given with the ``{\vt -c}''
option to terminate the mode and free internal memory.

A usage example can be found in the examples:  {\vt
JJexamples/nor\_mc.cir}.

!!SEEALSO
simcmds

!! commands.tex 020324
!!KEYWORD
measure
!!TITLE
measure command
!!HTML 
    <table border=0>
    <tr><td valign=top>command:</td> <td>
        <tt>measure</tt> <i>analysis</i> <i>resultname</i>
         <i>point</i> | <i>interval</i> [<i>measurements</i>]
         [<i>postcmds</i>]<br>
        <tt>measure</tt> <i>analysis</i> <i>resultname</i>
            <tt>param=</tt><i>expression</i> [<i>postcmds</i>]
    </td></tr>
    </table>
 
    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="measure#point"><b>Point and Interval Specification</b></a><br>
    <a href="measure#compat"><b>Syntax Compatibility</b></a><br>
    <a href="measure#measure"><b>Measurements</b></a><br>
    <a href="measure#addl"><b>Post-Measurement Commands</b></a><br>
    <a href="measure#ref"><b>Referencing Results in Sources</b></a><br>
    </td></tr></table>

    The <b>measure</b> command allows one to set up a <a
    href="runop">runop</a> which will identify a measurement point or
    interval, and evaluate an expression at that point, or call a
    number of measurement primitives that apply during the interval,
    such as rise time or pulse width.  The command will apply, if
    active, when any circuit is being run.  There is also a <a
    href=".measure"><tt>.measure</tt></a> input syntax element which
    will set up the measurement on that circuit only.  Both use the
    identical syntax described below.  The syntax is based on the
    <tt>.measure</tt> statement in <a href="hspicesim">HSPICE</a>.

    <dl>
    <dt><i>analysis</i><dd>
    This specifies the type of analysis during which the measurement will
    be active.  Exactly one of the following keywords should appear in
    this field:  <tt>tran</tt>, <tt>ac</tt>, <tt>dc</tt>.
    </dl>
    <p>

    <dl>
    <dt><i>resultname</i><dd>
    This field specifies a name for the measurement.  The name should
    be unique among the measurements in the circuit, and among vectors
    in scope during simulation.  The name should start with an
    alphabetic character and contain no white space or other special
    characters.
    </dl>

    <p>
    A vector with this name will be added to the current plot, if the
    measurement is successful.  Vector names found in <b>measure</b>
    commands and <tt>.measure</tt> lines are added to the internal
    save list, guaranteeing that the necessary data will be available
    when needed, whether or not the vector has been mentioned in a <a
    href=".save"><tt>.save</tt></a> line.

    <a name="point"></a>
    <h2>Point and Interval Specification</h2>

    <p>
    The field that follows the <i>resultname</i> contains a
    description of the conditions which initiate a measurement.  There
    are three basic types:  a point specification, an interval
    specification, and a post-measurement specificantion.

    <p>
    The <i>interval</i> begins with the "trigger" and ends with the
    "target".  Measurement will apply during this interval.  If no
    target is given, the trigger sets the <i>point</i>, where
    measurement will be performed.  The trigger and target are
    independently specified as follows:

    <dl>
    <dt><i>point</i><dd>
    <blockquote>
    [<tt>trig</tt>] <i>pointlist</i>
    </blockquote>
    This consists of the keyword <tt>trig</tt> (which is optional)
    followed by a point specification list.  The keyword
    "<tt>from</tt>" is equivalent to "<tt>trig</tt>".
    </dl>

    <dl>
    <dt><i>interval</i><dd>
    <blockquote>
    [<tt>trig</tt>] <i>pointlist</i> <tt>targ</tt> <i>pointlist</i>
    </blockquote>
    An interval contains a second point specification initiated with
    the mandatory keyword <tt>targ</tt>.  The keyword "<tt>to</tt>" is
    equivalent to "<tt>targ</tt>".
    </dl>

    <dl>
    <dt>post-measurement<dd>
    <blockquote>
    <tt>param=</tt><i>expression</i>
    </blockquote>
    Measurements in this form will be performed when all <i>point</i>
    and <i>interval</i> measurements are complete.  After all
    <i>point</i> and <i>interval</i> measurements have been performed,
    the <i>expression</i> will be evaluated and the result saved in
    <i>resultname</i>.  The <i>expression</i> can reference other
    measurement results in addition to the usual vectors and functions
    provided by the system.  These measurement lines are evaluated in
    the order found in the input.
    </dl>

    <dl>
    <dt><i>pointlist</i><dd>
    <blockquote>
    <i>pointspec</i> [<i>pointspec</i>] ...
    </blockquote>
    The point is specified with a list of <i>pointspec</i> specifications,
    and the event is registered on the first occasion when all
    <i>pointspec</i> elements are true, i.e., the conjunction is true.
    </dl>

    <dl>
    <dt><i>pointspec</i><dd>
    <i>keyword</i> <i>expression1</i> [<tt>=</tt>][<tt>val=</tt>]
      [</i>expression2</i> [<tt>cross=</tt><i>crosses</i>]
      [<tt>rise=</tt><i>rises</i>] [<tt>fall=</tt><i>falls</i>]
      [<tt>minx=</tt><i>min_delta</i>]] [<tt>td=</tt><i>delay</i>]
    </dl>

    <p>
    The <i>pointspec</i> begins with one of the following kewords: 
    <tt>before</tt>, <tt>at</tt>, <tt>after</tt>, <tt>when</tt>.  The
    <tt>at</tt> keyword strobes, meaning that the event is triggered
    only if the conjunctions (other <i>pointspecs</i>) in the list are
    true at the specified event.  The <tt>after</tt> and <tt>when</tt>
    keywords are equivalent, but varied use can give a natural
    language feel to the conjuction list.  They are not strobing,
    meaning that the conjunctions can become true anytime at or after
    the specified event.  The <tt>before</tt> keyword negates logic: 
    the <i>pointspec</i> is true before the specified event.  This can
    be useful as an element in the conjunction list.

    <p>
    Once a <i>pointspec</i> becomes triggered, it remains triggered
    for the remainder of the simulation run.  Once triggered, a
    <tt>before</tt> <i>pointspec</i> will evaluate false, preventing
    the overall list from triggering.  Otherwise, the overall list
    triggers when each <i>pointspec</i> is true.  Similarly, an
    <tt>at</tt> clause that did not have all conjunctions true at its
    event time will thereafter always be false.

    <p>
    Following the keyword are one or two general expressions.  There
    can be an optional equal sign ("<tt>=</tt>") or a
    "<tt>val</tt>" keyword "<tt>val=</tt>" between the expressions.

    <p>
    An <i>expression</i> in this context can be:
    <ul>
    <li>A number or constant expression.  This is taken as the
    triggering point, meaning that the event occurs during simulation
    when the scale variable is equal to or exceeds the value.

    <li>An integer enclosed in square brackets.  This is interpreted
    as an output index, which increments whenever data would be
    written out from the running simulation.  This is most useful when
    the printing increment is constant.  The event triggers when the
    output index equals the integer given.

    <li>The <i>resultname</i> of a measure in the circuit.  The event
    occurs when the referenced measurement is performed.

    <li>A general expression consisting of constants, vector names,
    and circuit variables.  Frequently this will be simply a vector
    name corresponding to a node voltage or branch current in the
    circuit.
    </ul>

    <p>
    In <i>WRspice</i>, an expression token is the minimum text
    required for a syntactically complete expression, and may include
    white space.  Single quotes or parentheses can be used to delimit
    expressions in the <i>pointspec</i>, if nexessary.  The normal <a
    href="squote">single-quote expression</a> expansion and
    substitution is suppressed in this context.

    <p>
    If only one <i>expression</i> is given, and it is not a constant
    expression or a measure name, the event is triggered at the first
    time the expression becomes logically true, meaning that the
    absolute value is one or larger.  This corresponds to logical true
    produced by comparison and other logical operations in
    <i>WRspice</i>.  For example, the expression "<tt>V(5) >
    0.25</tt>" returns 0 if false and 1 if true.

    <p>
    It may be a bit confusing but the form
    <i>expr1</i><tt>=</tt><i>expr2</i> is interpreted as two
    expressions, but the same form with any relational operator other
    than <tt>=</tt> is taken as a single expression with a binary
    result.  Either the symbol or the keyword equivalent can be used. 
    The relational operators available are listed below.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th align="left"><tt>eq or =  </tt></th><td>equal to</td></tr>
    <tr><th align="left"><tt>ne or &#60> </tt></th><td>not equal to</td></tr>
    <tr><th align="left"><tt>gt or >  </tt></th><td>greater than</td></tr>
    <tr><th align="left"><tt>lt or &#60  </tt></th><td>less than</td></tr>
    <tr><th align="left"><tt>ge or >= </tt></th><td>greater than or equal
        to</td></tr>
    <tr><th align="left"><tt>le or &#60= </tt></th><td>less than or equal
        to</td></tr>
    </table>

    <p>
    If two expressions are given, neither can be a measure result
    name.  We are implicitly comparing the values of the two
    expressions, finding points where the two expressions are equal. 
    By default, the first time the values of the two expressions cross
    will trigger the event.  The following keywords can be assigned an
    integer value to trigger at the indicated point.

    <dl>
    <dt><tt>cross=</tt><i>crosses</i><dd>
    Integer <i>crosses</i> is the number of crossings.
    <dt><tt>rise=</tt><i>rises</i><dd>
    Integer <i>rises</i> is the number of times that
    <i>expression1</i> rises above <i>expression2</i>.
    <dt><tt>fall=</tt><i>falls</i><dd>
    Integer <i>falls</i> is the number of times that
    <i>expression1</i> falls below <i>expression2</i>.
    <dt><tt>minx=</tt><i>min_delta</i><dd>
    Real <i>min_delta</i> is the minimum time before a following 
    crossing event will be recognized, used to suppress spurious crossings
    from noise or ringing.
    </dl>

    <dl>
    <dt><tt>td=</tt><i>delay</i><dd>
    If two expressions are given, the <i>delay</i> is the amount of
    scale value (e.g., time in transient analysis) before starting to
    look for crossing events.

    <p>
    If one expression is given, and the expression is not constant or
    a measure result name, the <i>delay</i> is the amount of the scale
    value to wait before checking to see if the expression evaluates true.
    If the expression is a measurement name, than the delay is added to
    the measurement time of the referenced measurement.

    <p>
    There is a special case, where no expressions are given, only a
    <tt>td=</tt><i>delay</i> value.  This can be a second or
    subsequent <i>pointspec</i> in the <i>pointlist</i>.  This will
    trigger at the time of the previous <i>pointspec</i> in the list
    (to the left) delayed by <i>delay</i>.
    </dl>

    <dl>
    <dt><tt>ts=</tt><i>delay</i><dd>
    This is similar to <tt>td</tt>, however it is strobing.  In the
    two expression case, in addition to having the effect of
    <tt>td</tt>, it will convert <tt>when</tt> and <tt>after</tt>
    clauses to work as <tt>at</tt>, requiring conjunctions to be true
    at the time of the event.  It simply acts as <tt>td</tt> for
    <tt>at</tt> and <tt>before</tt>.

    <p>
    In the single expression case, it requires that the expression and
    any conjunctions be true at the value given for <tt>ts</tt>.
    </dl>

    <p>
    Examples:<br>
    <tt>at v(2)=0.5 rise=3 td=0.2nS after td=0.1nS</tt><br>
    &nbsp;&nbsp;Trigger 0.1nS after the third rising edge of v(2)
    after 0.2nS crosses 0.5V.<br>
    <tt>when v(2)&#60;v(1) before v(2)&#60;v(3)</tt><br>
    &nbsp;&nbsp;Trigger the first time that <tt>v(2) &#60; v(1)</tt>
    if and only if <tt>v(2) &#60; v(3)</tt> has never been true.

    <a name="compat"></a>
    <h2>Syntax Compatibility</h2>

    <p>
    The present syntax supported by the <b>measure</b> command and
    <tt>.measure</tt> lines in <i>WRspice</i> is a superset of the
    previous syntax cases, which are shown below.  These should all
    work in the present system.

    <p>
    Form 1:
    <blockquote>
    <tt>trig|targ at=</tt><i>value</i>
    </blockquote>

    Form 1 is straightforward; the interval starts (<tt>trig</tt>) or
    ends (<tt>targ</tt>) at <i>value</i>.  <i>Value</i> must be within
    the simulation range of the scale variable (e.g., time in
    transient analysis).

    <p>
    The same effect can be achieved with:
    <blockquote>
        <tt>from=</tt><i>value</i> <tt>to=</tt><i>value</i>
    </blockquote>

    <p>
    Form 2:
    <blockquote>
    <tt>trig|targ</tt> <i>variable</i> <tt>val=</tt><i>value</i>
            [<tt>td=</tt><i>delay</i>] [<tt>cross=</tt><i>crosses</i>]
            [<tt>rise=</tt><i>rises</i>] [<tt>fall=</tt><i>falls</i>]
            [<tt>minx=</tt><i>min_delta</i>]
    </blockquote>

    <p>
    Form 2 allows the interval boundaries to be referenced to times
    when a variable crosses a threshold.  The <i>variable</i> can be
    any vector whose value is available during simulation.  The
    <i>value</i> is a constant which is used to measure crossing
    events.  The <tt>val=</tt> which precedes the <i>value</i> is
    optional.  At least one of the <tt>rise/fall/cross</tt> fields
    should be set.  Their values are integers which represent the
    variable crossing the threshold a number of times.  The
    <tt>rise</tt> indicates the variable rising through the threshold,
    <tt>fall</tt> indicates the variable decreasing from above to
    below the threshold, and <tt>cross</tt> indicates <tt>rises +
    falls</tt>.  If given, the <tt>minx</tt> value sets the minimum
    time delta between the crossing events, those that occur too soon
    are ignored.  This can be used to suppress false triggering from
    ringing or noise.  The interval boundary is set when the specified
    number of transitions is reached.

    <p>
    If the delay is specified, transition counting starts after the
    specified delay.

    <p>
    Example:
    <blockquote>
        <tt>trig v(2) 2.5 td=0.1ns rise=2</tt>
    </blockquote>

    This indicates that the interval begins at the second time v(2) rises
    above 2.5V after 0.1ns.

    <p>
    Form 3:
    <blockquote>
    <tt>trig|targ when</tt> <i>expr1</i>=<i>expr2</i>
            [<tt>td=</tt><i>delay</i>]
            [<tt>cross=</tt><i>crosses</i>] [<tt>rise=</tt><i>rises</i>]
            [<tt>fall=</tt><i>falls</i>] [<tt>minx=</tt><i>min_delta</i>]
    </blockquote>

    <p>
    The third form is similar to the second form, except that
    crossings are defined when <i>expr1 = expr2</i>.  A rise is
    defined as <i>expr1</i> going from less than to greater than
    <i>expr2</i>.

    <a name="measure"></a>
    <h2>Measurements</h2>

    One should be aware that measurements are performed using data
    saved in the plot structure as a simulation progresses.  The
    accuracy of the results is directly affected by the density of
    saved points.  In transient analysis, one may wish to use internal
    time point data by setting the <a
    href="steptype"><tt>steptype=nousertp</tt></a> option.  This
    avoids the interpolation to tranient time increments which may
    reduce accuracy if the increment is too coarse.

    <p>
    The following measurements are available when an interval has been
    specified.

    <dl>
    <dt><tt>find</tt> <i>expr</i>
      <dd>evaluate the difference:  <i>expr</i> at target minus
      <i>expr</i> at trigger.</dl>
    <dt><tt>min</tt> <i>expr</i>
      <dd>find the minimum value of <i>expr</i></dl>
    <dl>
    <dt><tt>max</tt> <i>expr</i>
      <dd>find the maximum value of <i>expr</i></dl>
    <dl>
    <dt><tt>pp</tt> <i>expr</i>
      <dd>find the (maximum - minimum) value of <i>expr</i></dl>
    <dl>
    <dt><tt>avg</tt> <i>expr</i>
      <dd>compute the average of <i>expr</i></dl>
    <dl>
    <dt><tt>rms</tt> <i>expr</i>
      <dd>compute the rms value of <i>expr</i></dl>
    <dl>
    <dt><tt>pw</tt> <i>expr</i>
      <dd>This will measure the full-width half-maximum of a pulse
          from <i>expr</i> contained in the interval.  The baseline is
          taken as the initial or final value with the smallest
          difference from the peak value.  The algorithm will measure
          the larger of a negative going or positive going pulse.</dl>
    <dl>
    <dt><tt>rt</tt> <i>expr</i> [<i>firstval</i> <i>secondval</i>]
      <dd>This will measure rise or fall time of the edge from
          <i>expr</i> contained in the interval.  The optional
          following two numbers are the measurement thresholds, which
          default to 0.1 and 0.9 if not given.  The reference start
          and final values are the values at the ends of the interval.
    </dl>

    <p>
    These functions are also available in general expressions outside
    of the <b>measure</b> command:
    <blockquote>
    <a href="mmin"><b>mmin</b></a>,<br>
    <a href="mmax"><b>mmax</b></a>,<br>
    <a href="mpp"><b>mpp</b></a>,<br>
    <a href="mavg"><b>mavg</b></a>,<br>
    <a href="mrms"><b>mrms</b></a>,<br>
    <a href="mpw"><b>mpw</b></a>,<br>
    <a href="mrft"><b>mrft</b></a>,<br>
    <a href="mrft2"><b>mrft2</b></a>.
    </blockquote>

    <p>
    Each of these functions other than <b>mrft2</b> takes three
    arguments:  (<i>vector</i>, <i>scaleval1</i>, <i>scaleval2</i>). 
    The <b>mrft2</b> function tackes the same arguments, but in
    addition accepts two additional real numbers representing the
    transition thresholds that would replace 0.1 and 0.9 used for
    rise/fall time measurement in the <b>mrft</b> function.  The
    <b>mrft2</b> function is otherwise identical to <b>mrft</b>.
    The two scale values frame the area of measurement.  These must be
    chosen to isolate the feature of interest for rise/fall/width
    measurement.  If not in range of the <i>vector</i> scale, 
    the <i>vector</i> scale endpoints are assumed.

    <p>
    When a point has been specified, the only measurement form
    available is

    <dl>
    <dt><tt>find</tt> <i>expr</i>
      <dd>evaluate <i>expr</i> at point</dl>

    <p>
    A <b>measure</b> command line or <tt>.measure</tt> statement can
    contain any number of measurements, including no measurements.  If
    no measurement is specified, the vector produced contains only
    zeros, however the scale vector contains the start and stop
    values, which may be the only result needed.  The created vector,
    which is added to the current plot, will be of length equal to the
    number of measurements, with the results placed in the vector in
    order.

    <p>
    The measurement scale point(s) in <b>measure</b> commands and
    <tt>.measure</tt> statements are saved in a vector, which is the
    scale for the result vector.  If the measurement name is
    "<tt>result</tt>", the scale vector is named
    "<tt>result_scale</tt>".  The scale contains one or two values,
    depending on whether it is a point or interval measurement.

    <a name="addl"></a>
    <h2>Post-Measurement Commands</h2>

    There are a few commands which can be performed after measurement,
    which will run whether or not any measurements are actually made.
    
    <dl>
    <dt><tt>print</tt>, <tt>print_terse</tt><dd>
    By default, nothing is printed on-screen for a measurement
    performed during interactive simulation.  If the keywords
    "<tt>print</tt>" appears in the <b>measure</b> command or
    <tt>.measure</tt> line, the results will be printed on the
    standard output.  A more concise format can be obtained from the
    alternative keyword <tt>print_terse</tt>.  The result vectors are
    created in all cases.
    </dl>

    <dl>
    <dt><tt>stop</tt><dd>
    If the keyword "<tt>stop</tt>" appears in a <b>measure</b> command
    or <tt>.measure</tt> line, the analysis will be paused when
    <i>all</i> measurements are complete.  Thus if the run performs
    several measurements and <tt>stop</tt> is given in at least one,
    the analysis will pause when all of the measurements are complete,
    not just the one containing <tt>stop</tt>.  The analysis can then
    be resumed with the <a href="resume"><b>resume</b></a> command, or
    reset with the <a href="reset"><b>reset</b></a> command.
    </dl>

    <dl>
    <dt><tt>exec</tt> <i>command</i><dd>
    Execute the <i>WRspice</i> shell command found in <i>command</i>,
    which should be double-quoted if it contains white space.  Note
    that multiple commands can be given, separated by semicolon
    (<tt>';'</tt>) characters.  This will be run before a script is
    called (see below) so can be used to pass information to the
    script.  The command will be executed once only, after
    measurements if any.
    </dl>

    <dl>
    <dt><tt>call</tt> <i>script</i><dd>
    After the measurement (if any) is performed and any command string
    is executed, the named script will be called.  The script can be a
    normal script file or <a href="codeblock">codeblock</a>.  The
    special names "<tt>.exec</tt>", "<tt>.control</tt>", and
    "<tt>.postrun</tt>" call the exec, control, or postrun bound
    codeblocks of the running circuit, if they exist.

    <p>
    The script can be used for additional processing or testing of
    whatever sort.  If the script returns 1, the current simulation
    will pause immediately (no waiting for other measures) however a
    calling analysis, such as Monto Carlo, will continue.  If 2 is
    returned, this indicates a fatal global error and any calling
    analysis will be stopped too.  Any other return value allows the
    run to continue normally.
    </dl>

    <p>
    When a measurement is included in an iterative analysis (Monte
    Carlo, loop, etc.), data are saved as follows.  Before each
    iteration, the previous result vector and its scale are saved to
    the end of a "history" vector and scale, and are then deleted. 
    The result vector and scale are recreated when the measurement is
    completed during the iteration.  Thus, at the end of the analysis,
    for a measurement named "example", one would have the following
    vectors:

    <blockquote>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th align="left"><tt>example</tt></th>
       <td>the result from the final trial</td></tr>
    <tr><th align="left"><tt>example_scale</tt></th>
      <td>the measurement interval or point in the last trial</td></tr>
    <tr><th align="left"><tt>example_hist</tt></th>
      <td>results from the prior trials</td></tr>
    <tr><th align="left"><tt>example_hist_scale</tt></th>
      <td>intervals from the prior trials</td></tr>
    </table><br>
    </blockquote>

    <p>
    Thus, during each trial, the result vector will have the same
    properties as in a standard run.  It can be used in the <a
    href="oprngfile">.control block</a> of a <a href="monte">Monte
    Carlo</a> or <a href="oprng_analysis">operating range</a> file
    (recall that <tt>$?</tt><i>vector</i> can be used to query
    existence, and that if there is no <tt>checkPNTS</tt> vector
    defined, the <tt>.control</tt> block is called once at the end of
    each trial).

    <p>
    Multiple measurements can be "chained" in the following manner. 
    The vector name following the <tt>from</tt>, <tt>to</tt>,
    <tt>trig</tt>, or <tt>targ</tt> keywords can be the name of
    another measure.  In this case, the effective start time is the
    measure time of the referenced measure.  The measure time is the
    end of the interval or the measure point.  The <tt>td</tt>,
    <tt>rise</tt>, etc.  keywords can be used in the referencing
    measure.  The <tt>td</tt> will be added to the imported time, and
    the other keywords operate in the normal way.  If there are no
    keywords other than <tt>td</tt> specified, the time is the delay
    time plus the imported time.
 
    <p>
    Example:
    <blockquote><tt>
    .measure tran t1 trig v(5) val=.4m rise=3<br>
    .measure tran t2 trig v(5) val=.4m rise=4<br>
    .measure tran pw trig t1 td=20p targ t2 td=20p pw v(5) max v(5)
    </tt></blockquote>
 
    <p>
    In this case, the measures t1 and t2 "frame" a period of an
    (assumed) repeating signal v(5).  Note that no actual measurement
    is performed for these lines.  Their purpose is to be referenced
    in the third line, which takes as its interval the t1-t2 interval
    delayed by 20 pS, and measures the pulse width and peak value.

    <a name="ref"></a>
    <h2>Referencing Results in Sources</h2>

    <p>
    It is possible to reference measurement results in sources.  The
    referencing token has the same form as a circuit variable, with an
    optional index, i.e.
    <blockquote>
    <tt>@</tt><i>result</i>[<i>index</i>]
    </blockquote>
    where the <i>index</i>, if used, is an integer that references a
    specific component of the <i>result</i> (0-based).  The value is
    always zero for timepoints before the measurement has been
    performed, and a constant value afterward.

    <p>
    Example:
    <blockquote><tt>
    .measure tran peak from=50n to=150n max v(5)<br>
    .measure tran stuff trig v(4) val=4.5 rise=1 targ v(4) val=4.5<br>
    + fall=2 min v(4) max v(4) pp v(4) avg v(4) rms v(4) print<br>
    vxx 1 0 @peak<br>
    vyy 2 0 @stuff[2]<br>
    </tt></blockquote>

    <p>
    In this example, during transient analysis, <tt>vxx</tt> is zero
    until 150 nS, where the measurement takes place, at which point it
    jumps to the value measured.  Likewise, <tt>vyy</tt> is zero until
    the measurement, at which point it jumps to the third component
    ("<tt>pp v(4)</tt>") result.  The resulting voltages can be used
    elsewhere in the circuit.  Note that we have two implementations
    of a behavioral peak detector.
!!LATEX measure commands.tex
The {\cb measure} command allows one to set up a runop (see
\ref{runop}) which will identify a measurement point or interval, and
evaluate an expression at that point, or call a number of measurement
primitives that apply during the interval, such as rise time or pulse
width.

\begin{quote}
measure {\it analysis} {\it resultname} {\it point} | {\it interval}
[{\it measurements\/}] [{\it postcmds\/}]\\
measure {\it analysis} {\it resultname} param={\it expression}
[{\it postcmds\/}]
\end{quote}

The command will apply, if active, when any circuit is being run. 
There is also a {\vt .measure} input syntax element which will set up
the measurement on that circuit only.  Both use the identical syntax
described below.  The syntax is based on the {\vt .measure} statement
in HSPICE.

\begin{description}
\item{\it analysis}\\
This specifies the type of analysis during which the measurement will
be active.  Exactly one of the following keywords should appear in
this field:  {\vt tran}, {\vt ac}, {\vt dc}.

\item{\it resultname}\\
This field specifies a name for the measurement.  The name should be
unique among the measurements in the circuit, and among vectors in
scope during simulation.  The name should start with an alphabetic
character and contain no white space or other special characters.
\end{description}

A vector with this name will be added to the current plot, if the
measurement is successful.  Vector names found in {\cb measure
commands} and {\vt .measure} lines are added to the internal save
list, guaranteeing that the necessary data will be available when
needed, whether or not the vector has been mentioned in a {\vt .save}
line.

\subsubsection{Point and Interval Specification}
\index{measurement interval}

The field that follows the {\it resultname} contains a description of
the conditions which initiate a measurement.  There are three basic
types:  a point specification, an interval specification, and a
post-measurement specificantion.

The {\it interval} begins with the ``trigger'' and ends with the
``target''.  Measurement will apply during this interval.  If no
target is given, the trigger sets the {\vt point}, where measurement
will be performed.  The trigger and target are independently specified
as follows:

\begin{description}
\item{\it point}\\
\begin{quote}
[{\vt trig}] {\it pointlist}
\end{quote}
This consists of the keyword {\vt trig} (which is optional) followed
by a point specification list.  The keyword ``{\vt from}'' is
equivalent to ``{\vt trig}''.

\item{\it interval}\\
\begin{quote}
[{\vt trig}] {\it pointlist} {\vt targ} {\it pointlist}
\end{quote}
An interval contains a second point specification initiated with the
mandatory keyword {\vt targ}.  The keyword ``{\vt to}'' is equivalent
to ``{\vt targ}''.

\item{post-measurement}\\
\begin{quote}
{\vt param=}{\it expression}
\end{quote}
Measurements in this form will be performed when all {\it point} and
{\it interval} measurements are complete.  After all {\it point} and
{\it interval} measurements have been performed, the {\it expression}
will be evaluated and the result saved in {\it resultname}.  The {\it
expression} can reference other measurement results in addition to the
usual vectors and functions provided by the system.  These measurement
lines are evaluated in the order found in the input.

\item{\it pointlist}\\
\begin{quote}
{\it pointspec} [{\it pointspec\/}] ...
\end{quote}
The point is specified with a list of {\it pointspec} specifications,
and the event is registered on the first occasion when all {\it
pointspec} elements are true, i.e., the conjunction is true.

\item{\it pointspec}\\
{\it keyword} {\it expression1} [{\vt =}][{\vt val=}] [{\it expression2\/}]
[{\vt cross=}{\it crosses\/}] [{\vt rise=}{\it rises\/}]
[{\vt fall=}{\it falls\/}]\newline
 [{\vt minx=}{\it min\_delta}] [{\vt td=}{\it delay\/}]

\end{description}

The {\it pointspec} begins with one of the following kewords:  {\vt
before}, {\vt at}, {\vt after}, {\vt when}.  The {\vt at} keyword
strobes, meaning that the event is triggered only if the conjunctions
(other {\it pointspecs}) in the list are true at the specified event. 
The {\vt after} and {\vt when} keywords are equivalent, but varied use
can give a natural language feel to the conjuction list.  They are not
strobing, meaning that the conjunctions can become true anytime at or
after the specified event.  The {\vt before} keyword negates logic: 
the {\it pointspec} is true before the specified event.  This can be
useful as an element in the conjunction list.

Once a {\it pointspec} becomes triggered, it remains triggered for the
remainder of the simulation run.  Once triggered, a {\vt before} {\it
pointspec} will evaluate false, preventing the overall list from
triggering.  Otherwise, the overall list triggers when each {\it
pointspec} is true.  Similarly, an {\vt at} clause that did not have
all conjunctions true at its event time will thereafter always be
false.

Following the keyword are one or two general expressions.  There can
be an optional equal sign (``{\vt =}'') or a ``{\vt val}'' keyword
``{\vt val=}'' between the expressions.

An {\it expression} in this context can be:
\begin{itemize}
\item{A number or constant expression.  This is taken as the
triggering point, meaning that the event occurs during simulation when
the scale variable is equal to or exceeds the value.}

\item{An integer enclosed in square brackets.  This is interpreted as
an output index, which increments whenever data would be written out
from the running simulation.  This is most useful when the printing
increment is constant.  The event triggers when the output index
equals the integer given.}

\item{The {\it resultname} of a measure in the circuit.  The event
occurs when the referenced measurement is performed.}

\item{A general expression consisting of constants, vector names, and
circuit variables.  Frequently this will be simply a vector name
corresponding to a node voltage or branch current in the circuit.}
\end{itemize}

In {\WRspice}, an expression token is the minimum text required for a
syntactically complete expression, and may include white space. 
Single quotes or parentheses can be used to delimit expressions in the
{\it pointspec}, if nexessary.  The normal single-quote expression
expansion and substitution is suppressed in this context.

If only one {\it expression} is given, and it is not a constant
expression or a measure name, the event is triggered at the first time
the expression becomes logically true, meaning that the absolute value
is one or larger.  This corresponds to logical true produced by
comparison and other logical operations in {\WRspice}.  For example,
the expression ``{\vt v(5) > 0.25}'' returns 0 if false and 1 if true.

It may be a bit confusing but the form {\it expr1\/}{\vt =}{\it expr2}
is interpreted as two expressions, but the same form with any
relational operator other than {\vt =} is taken as a single expression
with a binary result.  Either the symbol or the keyword equivalent can
be used.  The relational operators available are listed below.

\begin{tabular}{|l|l|}\hline
{\vt eq}   or   $=$  & equal to\\ \hline
{\vt ne}   or   $<>$ & not equal to\\ \hline
{\vt gt}   or   $>$  & greater than\\ \hline
{\vt lt}   or   $<$  & less than\\ \hline
{\vt ge}   or   $>=$ & greater than or equal to\\ \hline
{\vt le}   or   $<=$ & less than or equal to\\ \hline
\end{tabular}

If two expressions are given, neither can be a measure result name. 
We are implicitly comparing the values of the two expressions, finding
points where the two expressions are equal.  By default, the first
time the values of the two expressions cross will trigger the event. 
The following keywords can be assigned an integer value to trigger at
the indicated point.

\begin{description}
\item{{\vt cross=}{\it crosses}}\\
Integer {\it crosses} is the number of crossings.

\item{{\vt rise=}{\it rises}}\\
Integer {\it rises} is the number of times that {\it expression1}
rises above {\it expression2}.

\item{{\vt fall=}{\it falls}}\\
Integer {\it falls} is the number of times that {\it expression1}
falls below {\it expression2}.

\item{{\vt minx=}{\it min\_delta}}\\
Real {\it min\_delta} is the minimum time before a following crossing
event will be recognized, used to suppress spurious crossings from
noise or ringing.
\end{description}

\begin{description}
\item{{\vt td=}{\it delay}}\\
If two expressions are given, the {\it delay} is the amount of scale
value (e.g., time in transient analysis) before starting to look for
crossing events.

If one expression is given, and the expression is not constant or a
measure result name, the {\it delay} is the amount of the scale value
to wait before checking to see if the expression evaluates true.  If
the expression is a measurement name, than the delay is added to the
measurement time of the referenced measurement.

There is a special case, where no expressions are given, only a {\vt
td=}{\it delay} value.  This can be a second or subsequent {\it
pointspec} in the {\it pointlist}.  This will trigger at the time of
the previous {\it pointspec} in the list (to the left) delayed by {\it
delay}.

\item{{\vt ts=}{\it delay}}\\
This is similar to {\vt td}, however it is strobing.  In the two
expression case, in addition to having the effect of {\vt td}, it will
convert {\vt when} and {\vt after} clauses to work as {\vt at},
requiring conjunctions to be true at the time of the event.  It simply
acts as {\vt td} for {\vt at} and {\vt before}.

In the single expression case, it requires that the expression and
any conjunctions be true at the value given for {\vt ts}.
\end{description}

Examples:\\
{\vt at v(2)=0.5 rise=3 td=0.2nS after td=0.1nS}\\
\hspace*{1em}Trigger 0.1nS after the third rising edge of v(2) after
0.2nS crosses 0.5V.\\
{\vt when v(2)<v(1) before v(2)<v(3)}\\
\hspace*{1em}Trigger the first time that {\vt v(2) < v(1)} if and only
if {\vt v(2) < v(3)} has never been true.

\subsubsection{Syntax Compatibility}

The present syntax supported by the {\cb measure} command and {\vt
.measure} lines in {\WRspice} is a superset of the previous syntax
cases, which are shown below.  These should all work in the present
system.

Form 1:
\begin{quote}\vt
    trig|targ at={\it value}
\end{quote}

Form 1 is straightforward; the interval starts ({\vt trig}) or ends
({\vt targ}) at {\it value}.  {\it Value} must be within the
simulation range of the scale variable (e.g., time in transient
analysis).

The same effect can be achieved with:
\begin{quote}\vt
    from={\it value} to={\it value}
\end{quote}

Form 2:
\begin{quote}\vt
    trig|targ {\it variable} [val=]{\it value}
        [td={\it delay}] [cross={\it crosses}]
        [rise={\it rises}] [fall={\it falls}] [minx={\it min\_delta}]
\end{quote}

Form 2 allows the interval boundaries to be referenced to times when a
variable crosses a threshold.  The {\it variable} can be any vector
whose value is available during simulation.  The {\it value} is a
constant which is used to measure crossing events.  The {\vt val=}
which precedes the {\it value} is optional.  At least one of the {\vt
rise/fall/cross} fields should be set.  Their values are integers
which represent the variable crossing the threshold a number of times. 
The {\vt rise} indicates the variable rising through the threshold,
{\vt fall} indicates the variable decreasing from above to below the
threshold, and {\vt cross} indicates {\vt rises + falls}.  If given,
the {\vt minx} value sets the minimum time delta between the crossing
events, those that occur too soon are ignored.  This can be used to
suppress false triggering from ringing or noise.  The interval
boundary is set when the specified number of transitions is reached.

If the delay is specified, transition counting starts after the
specified delay.

\spexampo{trig v(2) 2.5 td=0.1ns rise=2}

This indicates that the interval begins at the second time {\vt v(2)} rises
above 2.5V after 0.1ns.

Form 3:
\begin{quote}\vt
    trig|targ when {\it expr1\/}={\it expr2} [td={\it delay}]
        [cross={\it crosses}] [rise={\it rises}] [fall={\it falls}]
        [minx={\vt min\_delta}]
\end{quote}

The third form is similar to the second form, except that crossings
are defined when {\it expr1 = expr2}.  These are expressions, which
must be enclosed in parentheses if they contain white space or commas. 
A rise is defined as {\it expr1} going from less than to greater than
{\it expr2}.

\subsubsection{Measurements}
\index{measurement types}

One should be aware that measurements are performed using data saved
in the plot structure as a simulation progresses.  The accuracy of the
results is directly affected by the density of saved points.  In
transient analysis, one may wish to use internal time point data by
setting the {\vt steptype=nousertp} option.  This avoids the
interpolation to tranient time increments which may reduce accuracy if
the increment is too coarse.

The following measurements are available when an interval has been
specified.

\begin{description}
\item{{\vt find} {\it expr}}\\
Evaluate the difference:  {\it expr} at target minus {\it expr} at
trigger.
\item{{\vt min} {\it expr}}\\
Find the minimum value of {\it expr\/}.
\item{{\vt max} {\it expr}}\\
Find the maximum value of {\it expr\/}.
\item{{\vt pp} {\it expr}}\\
Find the (maximum - minimum) value of {\it expr\/}.
\item{{\vt avg} {\it expr}}\\
Compute the average of {\it expr\/}.
\item{{\vt rms} {\it expr}}\\
Compute the rms value of {\it expr\/}.
\item{{\vt pw} {\it expr}}\\
This will measure the full-width half-maximum of a pulse contained in
the interval.  The baseline is taken as the initial or final value
with the smallest difference from the peak value.  The algorithm will
measure the larger of a negative going or positive going pulse.
\item{{\vt rt} {\it expr} [{\it firstval} {\it secondval\/}]}\\
This will measure the rise or fall time of the edge contained in the
interval.  The optional following two numbers are the measurement
thresholds, which default to 0.1 and 0.9 if not given.  The reference
start and final values are the values at the ends of the interval.
\end{description}

These functions are also available in general expressions outside of
the {\cb measure} command:
\begin{quote}
 {\cb mmin},\\
 {\cb mmax},\\
 {\cb mpp},\\
 {\cb mavg},\\
 {\cb mrms},\\
 {\cb mpw},\\
 {\cb mrft},\\
 {\cb mrft2}.
\end{quote}

Each of these functions other than {\cb mrft2} takes three arguments: 
({\it vector\/}, {\it scaleval1\/}, {\it scaleval2\/}).  The {\cb
mrft2} function tackes the same arguments, but in addition accepts two
additional real numbers representing the transition thresholds that
would replace 0.1 and 0.9 used for rise/fall time measurement in the
{\cb mrft} function.  The {\cb mrft2} function is otherwise identical
to {\cb mrft}.  The two scale values frame the area of measurement. 
These must be chosen to isolate the feature of interest for
rise/fall/width measurement.  If not in range of the {\it vector}
scale, the {\it vector} scale endpoints are assumed.

When a point has been specified, the only measurement form
available is

\begin{description}
\item{{\vt find} {\it expr}}\\
Evaluate {\it expr} at point.
\end{description}

A {\cb measure} command line or {\vt .measure} statement can contain
any number of measurements, including no measurements.  If no
measurement is specified, the vector produced contains only zeros,
however the scale vector contains the start and stop values, which may
be the only result needed.  The created vector, which is added to the
current plot, will be of length equal to the number of measurements,
with the results placed in the vector in order.

The measurement scale point(s) in {\cb measure} commands and {\vt
.measure} statements are also saved in a vector, which is the scale
for the result vector.  If the measurement name is ``{\vt result}'',
then the scale vector is named ``{\vt result\_scale}''.  The scale
contains one or two values, depending on whether it is a point or
interval measurement.

\subsubsection{Post-Measurement Commands}
\index{post-measurement commands}

There are a few commands which can be performed after measurement,
which will run whether or not any measurements are actually made.

\begin{description}
\item{{\vt print}, {\vt print\_terse}}\\
By default, nothing is printed on-screen for a measurement performed
during interactive simulation.  If the keyword {\vt print} appears in
the {\cb measure} command or {\vt .measure} line, the results will be
printed on the standard output.  A more concise format can be obtained
from the alternative keyword {\vt print\_terse}.  The result vectors
are created in all cases.

\item{\vt stop}\\
If the keyword {\vt stop} appears in a {\cb measure} command or {\vt
.measure} line, the analysis will be paused when {\it all}
measurements are complete.  Thus if the run performs several
wmeasurements and {\vt stop} is given in at least one, the analysis
will pause when all of the measurements are complete, not just the one
containing {\vt stop}.  The analysis can then be resumed with the {\cb
resume} command, or reset with the {\cb reset} command.

\item{{\vt exec} {\it command}}\\
Execute the {\WRspice} shell command found in {\it command\/}, which
should be double-quoted if it contains white space.  Note that
multiple commands can be given, separated by semicolon ({\vt ';'})
characters.  This will be run before a script is called (see below) so
can be used to pass information to the script.  The command will be
executed once only, after measurements if any.

\item{{\vt call} {\it script}}\\
After the measurement (if any) is performed and any command string is
executed, the named script will be called.  The script can be a normal
script file or codeblock.  The special names ``{\vt .exec}'', ``{\vt
.control}'', and ``{\vt .postrun}'' call the exec, control, or postrun
bound codeblocks of the running circuit, if they exist.

The script can be used for additional processing or testing of
whatever sort.  If the script returns 1, the current simulation will
pause immediately (no waiting for other measures) however a calling
analysis, such as Monto Carlo, will continue.  If 2 is returned, this
indicates a fatal global error and any calling analysis will be
stopped too.  Any other return value allows the run to continue
normally.
\end{description}

When a measurement is included in an iterative analysis (Monte Carlo,
loop, etc.), data are saved as follows.  Before each iteration, the
previous result vector and its scale are saved to the end of a
``history'' vector and scale, and are then deleted.  The result vector
and scale are recreated when the measurement is completed during the
iteration.  Thus, at the end of the analysis, for a measurement named
``example'', one would have the following vectors:

\begin{tabular}{|l|l|}\hline
\vt example & the result from the final trial\\ \hline
\vt example\_scale & the measurement interval or point in the last
 trial\\ \hline
\vt example\_hist & results from the prior trials\\ \hline
\vt example\_hist\_scale & intervals from the prior trials\\ \hline
\end{tabular}

Thus, during each trial, the result vector will have the same
properties as in a standard run.  It can be used in the {\vt .control}
block of a Monte Carlo or operating range file (recall that {\vt
\$?}{\it vector} can be used to query existence, and that if there is
no {\vt checkPNTS} vector defined, the {\vt .control} block is called
once at the end of each trial).

\index{measurements, chained}
Multiple measurements can be ``chained'' in the following manner.  The
vector name following the {\vt from}, {\vt to}, {\vt trig}, or {\vt
targ} keywords can be the name of another measure.  In this case, the
effective start time is the measure time of the referenced measure. 
The measure time is the end of the interval or the measure point.  The
{\vt td}, {\vt rise}, and other keywords can be used in the
referencing measure.  The {\vt td} will be added to the imported time,
and the other keywords operate in the normal way.  If there are no
keywords other than {\vt td} specified, the time is the delay time
plus the imported time.

Example:
\begin{quote}\vt
    .measure tran t1 trig v(5) val=.4m rise=3\\
    .measure tran t2 trig v(5) val=.4m rise=4\\
    .measure tran pw trig t1 td=20p targ t2 td=20p pw v(5) max v(5)\\
\end{quote}

In this case, the measures {\vt t1} and {\vt t2} ``frame'' a period
of an (assumed) repeating signal v(5).  Note that no actual
measurement is performed for these lines.  Their purpose is to be
referenced in the third line, which takes as its interval the {\vt
t1}--{\vt t2} interval delayed by 20 pS, and measures the pulse
width and peak value.

\subsubsection{Referencing Results in Sources}
\index{measurements, source reference}

It is possible to reference measurement results in sources.  The
referencing token has the same form as a circuit variable, with an
optional index, i.e.
\begin{quote}\vt
    @{\it result\/}[{\it index\/}]
\end{quote}
where the {\it index\/}, if used, is an integer that references a
specific component of the result (0-based).  The value is always zero
for timepoints before the measurement has been performed, and a
constant value afterward.

Example:
\begin{quote}\vt
    .measure tran peak from=50n to=150n max v(5)\\
    .measure tran stuff trig v(4) val=4.5 rise=1 targ v(4) val=4.5 fall=2\\
    + min v(4) max v(4) pp v(4) avg v(4) rms v(4) print\\
    vxx 1 0 @peak\\
    vyy 2 0 @stuff[2]\\
\end{quote}

In this example, during transient analysis, {\vt vxx} is zero until
150 nS, where the measurement takes place, at which point it jumps to
the value measured.  Likewise, {\vt vyy} is zero until the
measurement, at which point it jumps to the third component (``{\vt pp
v(4)}'') result.  The resulting voltages can be used elsewhere in the
circuit.  Note that we have two implementations of a behavioral peak
detector.

!!SEEALSO
simcmds
 
!! commands.tex 011909
!!KEYWORD
noise
!!TITLE
noise command
!!HTML 
    command: <tt>noise</tt> <i>noise_args</i> [<tt>dc</tt> <i>dc_args</i>]
 
    <p>
    The <b>noise</b> command initiates a small-dignal <a
    href=".noise">noise analysis</a> of the current circuit.  The
    <i>noise_args</i> are the same as appear in a <tt>.noise</tt>
    line.  If a <a href=".dc">dc sweep</a> specification follows, the
    noise analysis is performed at each point of the dc analysis.
!!LATEX noise commands.tex
The {\cb noise} command initiates a small-signal noise analysis of the
current circuit.
\begin{quote}\vt
noise {\it noise\_args} [dc {\it dc\_args\/}]
\end{quote}
The {\it noise\_args} are the same as appear in a {\vt .noise} line
(see \ref{noiseline}).  If a dc sweep specification follows, the noise
analysis is performed at each point of the dc analysis (see
\ref{dcline}).
 
!!SEEALSO
multidc
simcmds

!! commands.tex 011909
!!KEYWORD
op
!!TITLE
op command
!!HTML 
    command: <tt>op</tt>

    <p>
    The <b>op</b> command will initiate dc <a href=".op">operating
    point</a> analysis of the current circuit.  The command takes no
    arguments.
!!LATEX op commands.tex
The {\cb op} command will initiate dc operating point analysis of the
current circuit (see \ref{opline}).  The command takes no arguments.
 
!!SEEALSO
simcmds
 
!! commands.tex 011909
!!KEYWORD
pz
!!TITLE
pz command
!!HTML 
    command: <tt>pz</tt> <i>pz_args</i>
 
    <p>
    The <b>pz</b> command will initiate <a href=".pz">pole-zero
    analysis</a> on the current circuit.  The <i>pz_args</i> are the
    same as appear in a <tt>.pz</tt> line.
!!LATEX pz commands.tex
The {\cb pz} command will initiate pole-zero analysis on the current
circuit.
\begin{quote}\vt
pz {\it pz\_args}
\end{quote}
The {\it pz\_args} are the same as appear in a {\vt .pz} line (see
\ref{pzline}).
 
!!SEEALSO
simcmds

!! commands.tex 011909
!!KEYWORD
reset
!!TITLE
reset command
!!HTML 
    command: <tt>reset [-c]</tt>
 
    <p>
    The <b>reset</b> command will reinitialize the current circuit. 
    The command will throw out any intermediate data in the circuit
    (e.g, after a breakpoint or user pause with <b>Ctrl-C</b>) and
    re-parse the deck.  Any standard analysis in progress will be
    cleared, however the state of any margin analysis (started with
    the <a href="check"><b>check</b></a> command), or loop analysis
    (started with the <a href="loop"><b>loop</b></a> command) is
    retained by default.  However, if the <tt>-c</tt> option is given,
    these too are cleared.  Thus, the <b>reset</b> command can be used
    to update the shell variables in a deck with or without affecting
    the status of a margin or loop analysis in progress.
!!LATEX reset commands.tex
The {\cb reset} command will reinitialize the current circuit.
\begin{quote}\vt
reset [-c]
\end{quote}
The command will throw out any intermediate data in the circuit (e.g,
after a breakpoint or user pause with {\kb Ctrl-C}) and re-parse the
deck.  Any standard analysis in progress will be cleared, however the
state of any margin analysis (started with the {\cb check} command),
or loop analysis (started with the {\cb loop} command) is retained by
default.  However, if the {\vt -c} option is given, these too are
cleared.  Thus, the {\cb reset} command can be used to update the
shell variables in a deck with or without affecting the status of a
margin or loop analysis in progress.
 
!!SEEALSO
run
simcmds

!! commands.tex 011909
!!KEYWORD
resume
!!TITLE
resume command
!!HTML 
    command: <tt>resume</tt>
 
    <p>
    The <b>resume</b> command will resume an analysis in progress. 
    The simulation can be stopped by typing an interrupt
    (<b>Ctrl-C</b>) or with the <a href="stop"><b>stop</b></a>
    command.  If no analysis is currently in progress, the effect is
    the same as the <a href="run"><b>run</b></a> command.  Each
    circuit can have one each of a standard analysis, a loop analysis
    (started with the <a href="loop"><b>loop</b></a> command), and a
    margin analysis (from the <a href="check"><b>check</b></a>
    command) in progress.  The <b>resume</b> command will resume
    standard analysis, margin analysis, and loop analysis in that
    precedence.  Paused margin and loop analysis can also be restarted
    with the <b>check</b> and <b>loop</b> commands.  These commands,
    and the <a href="reset"><b>reset</b></a> command, can be used to
    clear stopped analyses.  The <b>resume</b> command takes no
    arguments.
!!LATEX resume commands.tex
The {\cb resume} command will resume an analysis in progress.  The
simulation can be stopped by typing an interrupt ({\kb Ctrl-C}) or
with the {\cb stop} command.  If no analysis is currently in
progress, the effect is the same as the {\cb run} command.  Each
circuit can have one each of a standard analysis, a loop analysis
(started with the {\cb loop} command), and a margin analysis (from
the {\cb check} command) in progress.  The {\cb resume} command will
resume standard analysis, margin analysis, and loop analysis in that
precedence.  Paused margin and loop analysis can also be restarted
with the {\cb check} and {\cb loop} commands.  These commands, and
the {\cb reset} command, can be used to clear stopped analyses.  The
{\cb resume} command takes no arguments.
 
!!SEEALSO
simcmds

!! commands.tex 012411
!!KEYWORD
rhostcom
!!TITLE
rhost command
!!HTML
    command: <tt>rhost</tt> [<tt>-a</tt>][<tt>-d</tt>] [<i>hostname</i>]

    <p>
    The <b>rhost</b> command allows addition of host names which are
    available for remote <i>WRspice</i> runs.  This command allows
    manipulation of a list of host names which are available for
    remote <i>WRspice</i> runs with the <a
    href="rspice"><b>rspice</b></a> command.  If no arguments are
    given, the list of hosts is printed.  The <tt>-a</tt> and
    <tt>-d</tt> options allow a host name to be added to or deleted
    from the list, respectively.  The default is <tt>-a</tt>.  Hosts
    are added to the list if they have been specified in the <a
    href="environment">environment</a> or with the <a
    href="rhost"><tt>rhost</tt></a> variable, and a job has been
    submitted.  The <i>hostname</i> can optionally be suffixed with a
    colon followed by the port number to use to communicate with the
    <a href="wrspiced"><tt>wrspiced</tt></a> daemon.  If not given,
    the port number is obtained from the operating system for
    "wrspice/tcp", or 6114 if this is not defined.  Port number 6114
    is registered with IANA for this service.
!!LATEX rhostcom commands.tex
The {\cb rhost} command allows addition of host names which are
available for remote {\WRspice} runs.
\begin{quote}\vt
rhost [-a][-d] [{\it hostname\/}]
\end{quote}
This command allows manipulation of a list of host names which are
available for remote {\WRspice} runs with the {\cb rspice} command. 
If no arguments are given, the list of hosts is printed.  The {\vt -a}
and {\vt -d} options allow a host name to be added to or deleted from
the list, respectively.  The default is {\vt -a}.  Hosts are added to
the list if they have been specified in the environment or with the
{\et rhost} variable, and a job has been submitted.  The {\it
hostname} can optionally be suffixed with a colon followed by the port
number to use to communicate with the {\vt wrspiced} daemon.  If not
given, the port number is obtained from the operating system for
``wrspice/tcp'', or 6114 if this is not defined.  Port number 6114 is
registered with IANA for this service.
 
!!SEEALSO
simcmds

!! commands.tex 011909
!!KEYWORD
rspice
!!TITLE
rspice command
!!HTML 
    command:
    <blockquote>
    <tt>rspice</tt> <i>inputfile</i><br>
    <tt>rspice</tt> [<tt>-h</tt> <i>host</i>] [<tt>-p</tt>
      <i>program</i>] [<tt>-f</tt> <i>inputfile</i>] [<i>analysis</i>]
    </blockquote>

    <p>
    The <b>rspice</b> command is used to initiate simulation runs on a
    remote machine.  This command initiates a <a
    href="wrspiced">remote <i>WRspice</i></a> job, using the
    <i>inputfile</i> as input, or the current circuit if no
    <i>inputfile</i> is given.  If the <tt>-h</tt> option is not used,
    the default host can be specified in the <a
    href="environment">environment</a> before <i>WRspice</i> is
    started with the <b>SPICE_HOST</b> environment variable, or with
    the <a href="rhost"><tt>rhost</tt></a> variable.  In addition, a
    list of hosts which are nominally available for remote runs can be
    generated with the <a href="rhostcom"><b>rhost</b></a> command. 
    The default host used is the host known to <i>WRspice</i> that has
    the fewest active submissions, or which appears last on the list
    (hosts are added to the front of the list).  If the <tt>-p</tt>
    option is not used, <i>WRspice</i> will use the program found in
    the <a href="rprogram"><tt>rprogram</tt></a> variable, and if not
    set will use the same <i>program</i> as the <a
    href="aspice"><b>aspice</b></a> command.  If the <tt>-f</tt>
    option is not used, the current circuit is submitted, otherwise
    <i>inputfile</i> is submitted.  If there is no <i>analysis</i>
    specification, there must be an analysis specified in
    <i>inputfile</i>.  If the current circuit is being submitted,
    there must be an analysis specification given on the command line.

    <p>
    Once the job is submitted, <i>WRspice</i> returns to interactive mode.
    When the job is complete, the standard output of the job, if any,
    is printed, and the rawfile generated becomes the current plot.

    <p>
    Remote runs can only be performed on machines which have the
    <tt>wrspiced</tt> daemon operating, and have permission to execute
    the target program.
!!LATEX rspice commands.tex
The {\cb rspice} command is used to initiate simulation runs on a
remote machine.
\begin{quote}\vt
rspice {\it inputfile\/}\\
{\rm or}\\
rspice [-h {\it host\/}][-p {\it program\/}][-f {\it inputfile\/}]
[{\it analysis\/}]
\end{quote}
This command initiates a remove {\WRspice} job, using the {\it
inputfile} as input, or the current circuit if no {\it inputfile} is
given.  If the {\vt -h} option is not used, the default host can be
specified in the environment before {\WRspice} is started with the
{\et SPICE\_HOST} environment variable, or with the {\et rhost}
variable.  In addition, a list of hosts which are nominally available
for remote runs can be generated with the {\et rhost} command.  The
default host used is the host known to {\WRspice} that has the fewest
active submissions, or which appears last on the list (hosts are added
to the front of the list).  If the {\vt -p} option is not used,
{\WRspice} will use the program found in the {\et rprogram} variable,
and if not set will use the same {\it program} as the {\cb aspice}
command.  If the {\vt -f} option is not used, the current circuit is
submitted, otherwise {\it inputfile} is submitted.  If there is no
{\it analysis} specification, there must be an analysis specified in
{\it inputfile}.  If the current circuit is being submitted, there
must be an {\it analysis} specification given on the command line.

Once the job is submitted, {\WRspice} returns to interactive mode. 
When the job is complete, the standard output of the job, if any, is
printed, and the rawfile generated becomes the current plot.

Remote runs can only be performed on machines which have the {\vt
wrspiced} daemon operating, and have permission to execute the target
program.
 
!!SEEALSO
simcmds

!! commands.tex 082909
!!KEYWORD
run
!!TITLE
run command
!!HTML 
    command: <tt>run</tt> [<i>file</i>]

    <p>
    The <b>run</b> command initiates the analysis found in the deck
    associated with the current circuit.  The command will run the
    simulation as specified in the input file.  If there were any of
    the <a href="analyses">analysis specification</a> lines
    (<tt>.dc</tt>, <tt>.tran</tt>, etc.) they are executed.  The
    output is put in <i>file</i> if it was given, in addition to
    being available interactively.

    <p>
    There are two file formats available, the native "rawfile" format,
    and the Common Simulation Data Format (CSDF) used by <a
    href="hspicesim">HSPICE</a>.  See the description of the <a
    href="write"><b>write</b></a> command for information on format
    selection.

    <p>
    If a standard analysis run is in progress and halted with the <a
    href="stop"><b>stop</b></a> command or by pressing <b>Ctrl-C</b>,
    the <b>run</b> command will resume that run.  This applies only to
    standard analyses, and not margin analysis or loop analysis. 
    Standard analyses started with the analysis commands <b>tran</b>,
    <b>dc</b>, etc., will always start a new analysis, after clearing
    any paused standard analysis.
!!LATEX run commands.tex
The {\cb run} command initiates the analysis found in the deck associated
with the current circuit.
\begin{quote}\vt
run [{\it file\/}]
\end{quote}
The command will run the simulation as specified in the input file. 
If there were any of the analysis specification lines ({\vt .dc}, {\vt
.tran}, etc.~) they are executed.  The output is put in {\it
file\/} if it was given, in addition to being available
interactively.

There are two file formats available, the native ``rawfile'' format,
and the Common Simulation Data Format (CSDF) used by HSPICE.  See the
description of the {\cb write} command (\ref{writecmd}) for
information on format selection.

If a standard analysis run is in progress and halted with the {\cb
stop} command or by pressing {\kb Ctrl-C}, the {\cb run} command will
resume that run.  This applies only to standard analyses, and not
margin analysis or loop analysis.  Standard analyses started with the
analysis commands {\cb tran}, {\cb dc}, etc.~, will always start a new
analysis, after clearing any paused standard analysis.
 
!!SEEALSO
resume
simcmds

!! commands.tex 011909
!!KEYWORD
save
!!TITLE
save command
!!HTML 
    command: <tt>save</tt> [<tt>all</tt>] [<i>nodename</i> ...]

    <p>
    The <b>save</b> command can be used to save a particular set of
    outputs from a simulation run.  The command will save a set of
    outputs, the rest will be discarded.  If a node has been mentioned
    in a <b>save</b> command, it will appear in the working plot after
    a run has completed, or in the rawfile if <i>WRspice</i> is run in
    batch mode (in this case, the command can be given in the input
    file as <a href=".save"><tt>.save</tt></a> ...).  If a node is
    traced or plotted it will also be saved.  If no <b>save</b>
    commands are given, all nodes will be saved.  The save can be
    deleted with the <a href="delete"><b>delete</b></a> command, or
    from the panel brought up by the <b>Trace</b> button in the
    <b>Tools</b> menu.
 
    <p>
    If a <b>save</b> command is given at the prompt in interactive
    mode, it is placed in a global list, and activity will persist
    until deleted (with the <b>delete</b> command).  If the command is
    given in a file, the command will be added to a list for the
    current circuit, and will apply only to that circuit.  Thus, for
    example, a <i>WRspice</i> file can contain lines like
    <blockquote>
        <tt>*# save v(1) ... </tt>
    </blockquote>
    and the action will be performed as that circuit is run, but the
    "<tt>save v(1) ... </tt>" directive will not apply to other
    circuits.
 
    <p>
    One can save "special" variables, i.e., device/circuit <a
    href="show">parameters</a> that begin with '@'.  If a device
    parameter is a list type, only a single component can be saved. 
    The single component can be specified with an integer, or with a
    vector name that evaluates to an integer.  For example, the
    initial condition values for a Josephson junction can be accessed
    as a list, say for a junction named "b1", one can specify
    <blockquote>
    <tt>@b1[ic,0]</tt> or <tt>@b1[ic][0]</tt>
    </blockquote>
    which are equivalent and each the same as <tt>@b1[vj]</tt>, the initial
    voltage.  Similarly,
    <blockquote>
    <tt>@b1[ic,1]</tt> or <tt>@b1[ic][1]</tt>
    </blockquote>
    are equivalent, each being the same as <tt>@b1[phi]</tt>, the initial
    phase.

    <p>
    One can also have
    <blockquote>
    <tt>let val = 1</tt>  (this vector is defined somewhere)<br>
    <tt>@b1[ic,val]</tt> or <tt>@b1[ic][val]</tt>
    </blockquote>

    Thus, commands like
    <blockquote>
    <tt>save @b1[ic,0]</tt>
    </blockquote>
    or equivalently
    <blockquote>
    <tt>save @b1[ic][0]</tt>
    </blockquote>
    are accepted.  Note that "<tt>save @b1[ic]</tt>" is the same as
    "<tt>save @b1[ic,0]</tt>".  The "0" can be an integer, or a vector
    name that evaluates to an integer.
!!LATEX save commands.tex
The {\cb save} command can be used to save a particular set of outputs
from a simulation run.
\begin{quote}\vt
save [all] [{\it nodename\/} ...]
\end{quote}
The command will save a set of outputs, the rest will be discarded. 
If a node has been mentioned in a {\cb save} command, it will appear
in the working plot after a run has completed, or in the rawfile if
{\WRspice} is run in batch mode (in this case, the command can be
given in the input file as {\vt .save} ...).  If a node is traced or
used in an {\cb iplot} it will also be saved.  If no save commands are
given, all nodes will be saved.  The {\cb save} can be deleted with
the {\cb delete} command, or from the panel brought up by the {\cb
Trace} button in the {\cb Tools} menu.

If a {\cb save} command is given at the prompt in interactive mode, it
is placed in a global list, and activity will persist until deleted
(with the {\cb delete} command).  If the command is given in a file,
the command will be added to a list for the current circuit, and will
apply only to that circuit.  Thus, for example, a {\WRspice} file can
contain lines like
\begin{quote}
{\vt *\# save v(1) ...}
\end{quote}
and the action will be performed as that circuit is run, but the
``{\vt save v(1)} ...'' directive will not apply to other circuits.

One can save ``special'' variables, i.e., device/circuit parameters
that begin with `{\vt @}'.  If a device parameter is a list type, only
a single component can be saved.  The single component can be
specified with an integer, or with a vector name that evaluates to an
integer.  For example, the initial condition values for a Josephson
junction can be accessed as a list, say for a junction named ``b1'',
one can specify
\begin{quote}
{\vt @b1[ic,0]} or {\vt @b1[ic][0]}
\end{quote}
which are equivalent, and each the same as {\vt @b1[vj]}, the initial
voltage.  Similarly,
\begin{quote}
{\vt @b1[ic,1]} or {\vt @b1[ic][1]}
\end{quote}
are equivalent, each being the same as {\vt @b1[phi]}, the initial
phase.

One can also have
\begin{quote}
{\vt let val = 1}\qquad\qquad (this vector is defined somewhere)\\
{\vt @b1[ic,val]} or {\vt @b1[ic][val]}
\end{quote}
Thus, commands like
\begin{quote}
{\vt save @b1[ic,0]}
\end{quote}
or equivalently
\begin{quote}
{\vt save @b1[ic][0]}
\end{quote}
are accepted.  Note that ``{\vt save @b1[ic]}'' is the same as ``{\vt
save @b1[ic,0]}''.  The ``0'' can be an integer, or a vector name that
evaluates to an integer.

!!SEEALSO
status
simcmds

!! commands.tex 011909
!!KEYWORD
sens
!!TITLE
sens command
!!HTML 
    command: <tt>sens</tt> <i>sens_args</i> [<tt>dc</tt> <i>dc_args</i>]
 
    <p>
    The <b>sens</b> command initiates <a href=".sens">sensitivity
    analysis</a> on the current circuit.  The <i>sens_args</i> are the
    same as appear in a <tt>.sens</tt> line.  If a <a href=".dc">dc
    sweep</a> specification follows, the sensitivity analysis is
    performed at each point of the dc analysis.
!!LATEX sens commands.tex
The {\cb sens} command initiates sensitivity analysis on the current
circuit.
\begin{quote}\vt
sens {\it sens\_args\/} [dc {\it dc\_args\/}]
\end{quote}
The {\it sens\_args} are the same as appear in a {\vt .sens} line
(see \ref{sensline}).  If a dc sweep specification follows, the
sensitivity analysis is performed at each point of the dc analysis
(see \ref{dcline}).
 
!!SEEALSO
.sens
simcmds

!! commands.tex 011909
!!KEYWORD
setcirc
!!TITLE
setcirc command
!!HTML 
    command: <tt>setcirc</tt> [<i>circuit_name</i>]

    <p>
    The <b>setcirc</b> command will set the "current circuit" assumed
    by <i>WRspice</i>.  The current circuit is the one that is used by
    the analysis commands.  When a circuit is loaded with the <a
    href="source"><b>source</b></a> command, it becomes the current
    circuit.  If no arguments are given, a list of circuits is
    printed, and the user is requested to choose one.  The current
    circuit can also be selected from the panel brought up by the
    <b>Circuits</b> button in the <b>Tools</b> menu.
!!LATEX setcirc commands.tex
The {\cb setcirc} command will set the ``current circuit'' assumed
by {\WRspice}.
\begin{quote}\vt
setcirc [{\it circuit\_name\/}]
\end{quote}
The current circuit is the one that is used by the analysis commands. 
When a circuit is loaded with the {\cb source} command it becomes the
current circuit.  If no arguments are given, a list of circuits is
printed, and the user is requested to choose one.  The current circuit
can also be selected from the panel brought up by the {\cb Circuits}
button in the {\cb Tools} menu.
 
!!SEEALSO
simcmds
 
!! commands.tex 062515
!!KEYWORD
show
!!TITLE
show command
!!HTML 
    command: <tt>show</tt> [<tt>-r|-o|-d|-n <i>nodename</i>|-m|-D[M]|-M</tt>]
         [<i>args</i>] [<tt>,</tt> <i>parmlist</i>]

    <p>
    The <b>show</b> command is used to display information about
    devices, models, and internal statistics.  If <tt>-r</tt> is
    given, system resource values are printed.  The <i>args</i> are
    resource keywords as in the <a href="rusage"><b>rusage</b></a>
    and <a href="stats"><b>stats</b></a>
    commands, and there is no <i>parmlist</i>.  If there are no
    <i>args</i>, only total time and space usage are printed.

    <p>
    If <tt>-o</tt> is given, <i>WRspice</i> option values are printed. 
    These values are obtained from the <a
    href=".options"><tt>.options</tt></a> line of the current circuit,
    or have been set with the <a href="set"><b>set</b></a> command. 
    If no <i>args</i> are given, the default is "<tt>all</tt>".  There
    is no <i>parmlist</i>.

    <p>
    If <tt>-d</tt> is given, or if no option is given, device
    parameters are printed.  The <i>args</i> are device names, and the
    <i>parmlist</i>, which is separated from the device list by a
    comma, consists of device parameter keywords.  The parameters are
    expected to apply to each device in the device list.  Both lists
    can contain "globbing" (wild-card) characters with similar
    behavior to globbing (<a href="glob">global substitution</a>) in
    the <i>WRspice</i> <a href="spshell">shell</a>.  Briefly,
    '<tt>?</tt>' matches any character, '<tt>*</tt>' matches any set
    of characters or no characters, "<tt>[abc]</tt>" matches the
    characters '<tt>a</tt>', '<tt>b</tt>', and '<tt>c</tt>', and
    "<tt>a{bc,de}</tt>" matches "<tt>abc</tt>" and "<tt>ade</tt>". 
    Either the device <i>args</i> or the <i>parmlist</i> can be
    "<tt>all</tt>", and the default is "<tt>all</tt>, <tt>all</tt>"
    ("<tt>all</tt>" is equivalent to '<tt>*</tt>").  If the
    <i>parmlist</i> is the keyword "<tt>none</tt>", then no parameters
    are listed, only the devices with their resolved model names. 
    This can be useful for determining which model is actually used
    for a MOS device, if L/W <a href="mosmodel">model selection</a> is
    being used.  The command "<tt>show -d m*,none</tt>" will display
    the name of the model used for each MOS device.

    <p>
    If <tt>-n</tt> is given, followed by the name of a circuit node,
    the output is in the same form as for <tt>-d</tt> however only
    devices connected to the named node are displayed.

    <p>
    If <tt>-m</tt> is given, model parameters are printed.  The
    <i>args</i> are model names, and the <i>parmlist</i> is the list
    of model parameters to print.  Wild-carding is accepted in both
    lists.  The default is "<tt>all</tt>, <tt>all</tt>".  The
    parameters are expected to apply to each model in the list.  See
    the entries for the various devices and models for the parameter
    names, or type the <b>show</b> command without a parameter list to
    see the current values for all available parameters for the
    devices or models mentioned.

    <p>
    Spaces around the "," are optional, as is the "," itself if no
    parameters are given.  If no argument is given to the <b>show</b>
    command, all parameters of all devices in the current circuit will
    be displayed.

    <p>
    The <tt>-D</tt> and <tt>-M</tt> options are similar, but keywords
    and descriptions from the internal models are listed, and no
    values are shown.  It is not necessary to have a circuit loaded,
    as it is with <tt>-d</tt> and <tt>-m</tt>.  The <i>args</i> are
    single characters which key the devices in <i>WRpice</i>, such as
    'c' for capacitors, 'q' for bipolar transistors, etc.  For devices
    with a level model parameter such as MOSFETs, an integer indicating
    the model level can follow the key argument, without any space.

    <p>
    If these options are given with no argument, the device or model
    info is printed for each device or model (both for "<tt>show
    -DM</tt>") found in the device library.  If an argument is given,
    only the matching device or model will be be shown, but all of the
    parameters will be listed in addition.  The <tt>-D</tt> option
    lists the instance parameters, and <tt>-M</tt> the model
    parameters, and <tt>-DM</tt> will list both.  In the listing, the
    letters 'RO' indicate a read-only parameter, which is a computed
    quantity not set in the instance or model lines.  The letters 'NR'
    indicate a parameter that can't be read, i.e., it is input-only. 
    Recall that device parameters can be accessed as vectors with the
    <tt>@</tt><i>devname</i>[<i>param</i>] construct.  There is no
    <i>parmlist</i> for the <tt>-D</tt> and <tt>-M</tt> options.

    <p>
    For example, to print the resistance of all resistors in the
    current circuit, enter
    <blockquote>
      <tt>show -d r*, resistance</tt>
    </blockquote>
    The <tt>-d</tt> above is optional, being the default.  To print
    the <tt>cbs</tt> and <tt>cbd</tt> parameters of mosfets
    <tt>m1</tt>-<tt>m4</tt>
    <blockquote>
      <tt>show  m[1-4], c{bd,bs}</tt>
    </blockquote>
    To print the current value of the relative tolerance option, enter
    <blockquote>
      <tt>show -o reltol</tt>
    </blockquote>
    Entering
    <blockquote>
      <tt>show -DM q m5</tt>
    </blockquote>
    will list the instance and model parameters of bipolar transistors
    and level 5 (BSIM2) MOSFETs.
!!LATEX show commands.tex
The {\cb show} command is used to display information about devices,
models, and internal statistics.
\begin{quote}\vt
show [-r|-o|-d|-n {\it nodename}|-m|-D[M]|-M] [{\it args\/}]
  [, {\it parmlist\/}]
\end{quote}
If {\vt -r} is given, system resource values are printed.  The {\it
args} are resource keywords as in the {\cb rusage} and {\cb
stats} commands, and there is no {\it parmlist}.  If there are no {\it
args}, only total time and space usage are printed.

If {\vt -o} is given, {\WRspice} option values are printed.  These
values are obtained from the {\vt .options} line of the current
circuit, or have been set with the {\cb set} command.  If no {\it
args} are given, the default is {\vt all}.  There is no {\it
parmlist}.

If {\vt -d} is given, or if no option is given, device parameters are
printed.  The {\it args} are device names, and the {\it parmlist},
which is separated from the device list by a comma, consists of device
parameter keywords.  The parameters are expected to apply to each
device in the list.  Both lists can contain ``globbing'' (wild-card)
characters with similar behavior to globbing (global substitution) in
the {\WRspice} shell.  Briefly, `{\vt ?}' matches any character, '{\vt
*}' matches any set of characters or no characters, ``{\vt [abc]}''
matches the characters `{\vt a}', `{\vt b}', and `{\vt c}', and ``{\vt
a}\{{\vt bc,de}\}'' matches ``{\vt abc}'' and ``{\vt ade}''.  Either
the device {\it args} or the {\it parmlist} can be ``{\vt all}'',
and the default is ``{\vt all, all}'' (``{\vt all}'' is
equivalent to `{\vt *}').  Either the device {\it args} or the {\it
parmlist} can be ``{\vt all}'', and the default is ``{\vt all, all}''. 
If the {\it parmlist} is the keyword ``{\vt none}'', then no
parameters are listed, only the devices with their resolved model
names.  This can be useful for determining which model is actually
used for a MOS device, if L/W model selection is being used.  The
command ``{\vt show -d m*,none}'' will display the name of the model
used for each MOS device.

If {\vt -n} is given, followed by the name of a circuit node, the
output is in the same form as for {\vt -d} however only devices
connected to the named node are displayed.

If {\vt -m} is given, model parameters are printed.  The {\it args}
are model names, and the {\it parmlist} is the list of model
parameters to print.  Wild-carding is accepted in both lists.  The
default is {\vt all, all}.  The parameters are expected to apply to
each model in the list.  See the entries for the various devices and
models for the parameter names, or type the {\cb show} command without
a parameter list to see the current values for all available
parameters for the devices or models mentioned.

Spaces around the ``,'' are optional, as is the ``,'' itself if no
parameters are given.  If no argument is given to the show command,
all parameters of all devices in the current circuit will be
displayed.

The {\vt -D} and {\vt -M} options are similar, but keywords and
descriptions from the internal models are listed, and no values are
shown.  It is not necessary to have a circuit loaded, as it is with
{\vt -d} and {\vt -m}.  The {\it args} are single characters which key
the devices in {\WRspice}, such as `{\vt c}' for capacitors, `{\vt q}'
for bipolar transistors, etc.~.  For devices with a {\vt level} model
parameter such as MOSFETs, an integer indicating the model level can
follow the key argument, without any space.

If these options are given with no argument, the device or model
info is printed for each device or model (both for ``{\vt show
-DM}'') found in the device library.  If an argument is given, only
the matching device or model will be be shown, but all of the
parameters will be listed in addition.  The {\vt -D} option lists
the instance parameters, and {\vt -M} the model parameters, and {\vt
-DM} will list both.  In the listing, the letters `RO' indicate a
read-only parameter, which is a computed quantity not set in the
instance or model lines.  The letters `NR' indicate a parameter that
can't be read, i.e., it is input-only.  Recall that device
parameters can be accessed as vectors with the {\vt @}{\it
devname\/}[{\it param\/}] construct.  There is no {\it parmlist} for
the {\vt -D} and {\vt -M} options.

For example, to print the resistance of all resistors in the current
circuit, enter
\begin{quote}\vt
show -d r*, resistance
\end{quote}
The {\vt -d} above is optional, being the default.  To print the {\vt
cbs} and {\vt cbd} parameters of mosfets {\vt m1}--{\vt m4}
\begin{quote}\vt
show m[1-4], c{\rm \{}bd,bs{\rm \}}
\end{quote}
To print the current value of the relative tolerance option, enter
\begin{quote}\vt
show -o reltol
\end{quote}
Entering
\begin{quote}\vt
show -DM q m5
\end{quote}
will list the instance and model parameters of bipolar transistors and
level 5 (BSIM2) MOSFETs.

!!SEEALSO
alter
simcmds

!! commands.tex 011909
!!KEYWORD
state
!!TITLE
state command
!!HTML 
    command: <tt>state</tt>

    <p>
    The <b>state</b> command will print the name and a summary of the
    state of the current circuit.  The command takes no arguments.
!!LATEX state commands.tex
The {\cb state} command will print the name and a summary of the state
of the current circuit.  The command takes no arguments.

!!SEEALSO
simcmds

!! commands.tex 022519
!!KEYWORD
status
!!TITLE
status command
!!HTML 
    command: <tt>status</tt>

    <p>
    The <b>status</b> command is used to print a list of the "runops"
    currently in force.  The command will print out a summary of all
    the <a href="save"><b>save</b></a>, <a
    href="iplot"><b>iplot</b></a>, <a href="trace"><b>trace</b></a>,
    <a href="measure"><b>measure</b></a>, and <a
    href="stop"><b>stop</b></a> commands that are active.  Each runop
    is assigned a unique number, which can be supplied to the <a
    href="delete"><b>delete</b></a> command to remove the runop.  The
    runop list can also be manipulated from the panel brought up with
    the <b>Trace</b> button in the <b>Tools</b> menu.  The command
    takes no arguments.
!!LATEX status commands.tex
The {\cb status} command is used to print a list of the ``runops''
currently in force.  The command will print out a summary of all the
{\cb save}, {\cb iplot}, {\cb trace}, {\cb measure}, and {\cb stop},
commands that are active.  Each runop is assigned a unique number,
which can be supplied to the {\cb delete} command to remove the runop. 
The runop list can also be manipulated from the panel brought up with
the {\cb Trace} button in the {\cb Tools} menu.  The command takes no
arguments.

!!SEEALSO
simcmds
 
!! commands.tex 011909
!!KEYWORD
step
!!TITLE
step command
!!HTML 
    command: <tt>step</tt> [<i>number</i>]
 
    <p>
    The <b>step</b> command allows single-stepping through a transient
    simulation.  The command will simulate through the number of user
    output points given, or one, if no number is given.
!!LATEX step commands.tex
The {\cb step} command allows single-stepping through a transient
simulation.
\begin{quote}\vt
step [{\it number\/}]
\end{quote}
The command will simulate through the number of user output points
given, or one, if no number is given.
 
!!SEEALSO
iplot
stop
status
delete
simcmds

!! commands.tex 032220
!!KEYWORD
stop
!!TITLE
stop command
!!HTML 
    command: <tt>stop</tt> <i>analysis</i>  <i>point</i> [<i>postcmds</i>]

    <p>
    The <b>stop</b> command will add a stop point to the runop list. 
    When a condition is true, simulation will stop, but can be
    resumed, after clearing the stop point, with the <a
    href="resume"><b>resume</b></a> command.  The stop points can be
    cleared with the <a href="delete"><b>delete</b></a> command, and
    listed with the <a href="status"><b>status</b></a> command.  The
    panel brought up by the <b>Trace</b> button in the <b>Tools</b>
    menu can also be used to manipulate stop points.

    <p>
    The <b>stop</b> command is a <a href="runop">runop</a> similar to
    the <a href="measure"><b>measure</b></a> command, and is in fact
    implemented internally from the same components.  Analogous to
    <b>measure</b>, there is also a <a href=".stop"><tt>.stop</tt></a>
    input syntax element which uses the same syntax, which will be in
    force when simulating the circuit containing the line.  When
    entered on the command line, the stop is in force for all
    circuits, while the runop is active.

    <p>
    Note that this is a different implementation of the <b>stop</b>
    command than found in <i>WRspice</i>-4.3.8 and earlier, which was
    based on the Berkeley Spice3 implementation.  Although similar,
    the present syntax is a little different, and the command has more
    features and options.

    <dl>
    <dt><i>analysis</i><dd>
    This specifies the type of analysis during which the break
    condition will be active.  Exactly one of the following keywords
    should appear in this field:  <tt>tran</tt>, <tt>ac</tt>,
    <tt>dc</tt>.  Note that this did not appear in the <b>stop</b>
    syntax used in <i>WRspice</i>-4.3.8 and earlier.
    </dl>

    <dl>
    <dt><i>point</i><dd>
    This is precisely the same <a href="measure#point"><i>point</i>
    specification</a> as is used in the <b>measure</b> command. 
    Please refer to that section for a description of the syntax. 
    Note that this should cover the pre-4.3.9 syntax, however an
    analysis point index is now an integer enclosed is square
    brackets, numeric values are now assumed to be scale values (such
    as time) otherwise.
    </dl>

    <dl>
    <dt><tt>repeat</tt> <i>delta</i><dd>
    The <i>delta</i> is a real number scale extent.  After the
    <i>point</i> trigger, the actions are repeated on every multipole
    of <i>delta</i> that follows, as long as a <tt>call</tt>
    script (see below) returns 1.
    </dl>

    There are a couple of optional "<i>postcmd</i>" operations which
    can be performed when the stop is triggered, but before simulation
    ends.

    <dl>
    <dt><tt>exec</tt> <i>command</i><dd>
    Execute the <i>WRspice</i> shell command found in <i>command</i>,
    which should be double-quoted if it contains white space.  Note
    that multiple commands can be given, separated by semicolon
    (<tt>';'</tt>) characters.  This will be run before a script is
    called (see below) so can be used to pass information to the
    script.  The <i>command</i> will be executed only once, and only
    if the <i>point</i> condition is reached.
    </dl>

    <dl>
    <dt><tt>call</tt> <i>script</i><dd>
    After the <i>point</i> is reached and any command string is
    executed, the named script will be called.  The script can be a
    normal script file or <a href="codeblock">codeblock</a>.  The
    special names "<tt>.exec</tt>", "<tt>.control</tt>", and
    "<tt>.postrun</tt>" call the exec, control, or postrun bound
    codeblocks of the running circuit, if they exist.

    <p>
    The script can be used for additional processing or testing of
    whatever sort.  If the script returns 1, the current simulation
    will <b>not</b> stop, and will continue as if the stop condition
    never occurred.  If the script returns 2, a global error is
    indicated and the present analysis is terminated.  If any other
    value is returned, or there is no explicit return, the analysis
    will stop as normal, and can be resumed.
    </dl>

    <dt><tt>silent</tt><dd>
    Normally when the stop is activated a message is printed.  If the
    <tt>silent</tt> keyword is given, no message will be printed. 
    Suppressing the message may be desirable when the stop is being
    used to terminate failed Monte Carlo trials, for example, where
    message output simply clutters the screen.
    </dl>

    <p>
    If a <b>stop</b> command is given at the prompt in interactive
    mode, it is placed in the global runop list, and activity will persist
    until deleted (with the <a href="delete"><b>delete</b></a>
    command).  If the command is given in a file, the command will be
    added to a list for the current circuit, and will apply only to
    that circuit.  Thus, for example, a <i>WRspice</i> file can
    contain lines like
    <blockquote>
        <tt>*# stop tran when ... </tt>
    </blockquote>
    and the action will be performed as that circuit is run, but the
    "<tt>stop when ... </tt>" directive will not apply to other
    circuits.  This is the same effect as a <tt>.stop</tt> line.
!!LATEX stop commands.tex
The {\cb stop} command will add a stop point to the runop list.
\begin{quote}
{\vt stop} {\it analysis} {\it point} [{\it postcmds\/}]
\end{quote}
When a condition is true, simulation will stop, but can be resumed,
after clearing the stop point, with the {\cb resume} command.  The
stop points can be cleared with the {\cb delete} command, and listed
with the {\cb status} command.  The panel brought up by the {\cb
Trace} button in the {\cb Tools} menu can also be used to manipulate
stop points.

The {\cb stop} command is a ``runop'' similar to the {\cb measure}
command, and is in fact implemented internally from the same
components.  Analogous to {\cb measure}, there is also a {\vt .stop}
input syntax element which uses the same syntax, which will be in
force when simulating the circuit containing the line.  When entered
on the command line, the stop is in force for all circuits, while the
runop is active.

Note that this is a different implementation of the {\cb stop} command
than found in {\WRspice}-4.3.8 and earlier, which was based on the
Berkeley Spice3 implementation.  Although similar, the present syntax
is a little different, and the command has more features and options. 

\begin{description}
\item{\it analysis}\\
This specifies the type of analysis during which the break condition
will be active.  Exactly one of the following keywords should appear
in this field:  {\vt tran}, {\vt ac}, {\vt dc}.  Note that this did
not appear in the {\cb stop} syntax used in {\WRspice}-4.3.8 and
earlier.

\item{\it point}\\
This is precisely the same {\it point} specification as is used in the
{\cb measure} command.  Please refer to that section for a description
of the syntax.  Note that this should cover the pre-4.3.9 syntax,
however an analysis point index is now an integer enclosed is square
brackets, numeric values are now assumed to be scale values (such as
time) otherwise.

\item{\vt repeat} {\it delta}\\
The {\it delta} is a real number scale extent.  After the {\it point}
trigger, the actions are repeated on every multipole of {\it delta}
that follows, as long as a {\vt call} script (see below) returns 1.
\end{description}

There are a couple of optional ``{\it postcmd}'' operations which can
be performed when the stop is triggered, but before simulation ends.

\begin{description}
\item{\vt exec} {\it command}\\
Execute the {\WRspice} shell command found in {\it command\/}, which
should be double-quoted if it contains white space.  Note that
multiple commands can be given, separated by semicolon ({\vt `;'})
characters.  This will be run before a script is called (see below) so
can be used to pass information to the script.  The {\it command} will
be executed only once, and only if the {\it point} condition is
reached.

\item{\vt call} {\it script}\\
After the {\it point} is reached and any command string is executed,
the named script will be called.  The script can be a normal script
file or codeblock.  The special names ``{\vt .exec}'', ``{\vt
.control}'', and ``{\vt .postrun}'' call the exec, control, or postrun
bound codeblocks of the running circuit, if they exist.

The script can be used for additional processing or testing of
whatever sort.  If the script returns 1, the current simulation will
{\bf not} stop, and will continue as if the stop condition never
occurred.  If the script returns 2, a global error is indicated and
the present analysis is terminated.  If any other value is returned,
or there is no explicit return, the analysis will stop as normal, and
can be resumed.

\item{\vt silent}\\
Normally when the stop is activated a message is printed.  If the {\vt
silent} keyword is given, no message will be printed.  Suppressing the
message may be desirable when the stop is being used to terminate
failed Monte Carlo trials, for example, where message output simply
clutters the screen.
\end{description}

If a {\cb stop} command is given at the prompt in interactive mode, it
is placed in the global runop list, and activity will persist until
deleted (with the {\cb delete} command).  If the command is given in a
file, the command will be added to a list for the current circuit, and
will apply only to that circuit.  Thus, for example, a {\WRspice} file
can contain lines like
\begin{quote}\vt
*\# stop tran when ...
\end{quote}
and the action will be performed as that circuit is run, but the
``{\vt stop tran when ...  }'' directive will not apply to other
circuits.  This is the same effect as a {\vt .stop} line.
 
!!SEEALSO
step
iplot
status
simcmds

!!REDIRECT psetting     sweep#psetting

!! commands.tex 032520
!!KEYWORD
sweep loop
!!TITLE
sweep command
!!HTML
    command: <tt>sweep</tt> [<tt>-c</tt>]
        [[<i>pstr1</i>] <i>min1</i> [<i>max1</i> [<i>step1</i>]]
        [[<i>pstr2</i>] <i>min2</i> [<i>max2</i> [<i>step2</i>]]]
        [<i>analysis</i>]]

    <p>
    The <b>sweep</b> command, which for historical compatibility is
    also available as "<b>loop</b>", is used to perform a simulation
    analysis over a range of conditions.  The command works something
    like a <a href="multidc">chained dc sweep</a>, running an analysis
    over a one or two-dimensional range of parameter values.  The
    resulting plot will be multi-dimensional.

    <p>
    There are two fundamental ways in which parameter values can be
    passed to the circuit.  In the command, the <i>pstr1</i> and
    <i>pstr2</i> are text tokens which specify the device parameters
    to vary, in a format to be described.  In a two-dimensional sweep,
    both <i>pstr1</i> and <i>pstr2</i> must be given, or neither can
    be given.  The two different value-setting mechanisms can not be
    mixed.

    <p>
    The specified analysis is performed at each point, yielding
    multidimensional output vectors.  If <i>analysis</i> is omitted,
    an analysis specification is expected to be found in the circuit
    deck. 

    <p>
    If a sweep analysis is paused, for example by pressing
    <b>Ctrl-C</b>, it can be resumed by entering the <b>sweep</b>
    command again.  No arguments are required in this case, however if
    the <tt>-c</tt> option is given the old analysis is cleared, and a
    new analysis started if further parameters are supplied.  The
    <tt>-c</tt> is ignored if there was no sweep analysis in progress. 
    The <a href="resume"><b>resume</b></a> command will also resume a
    paused sweep analysis.  The <a href="reset"><b>reset</b></a>
    command given with the <tt>-c</tt> option will also clear any
    paused sweep analysis.

    <h4>Without explicit device parameter setting</h4>

    Assume in this section that the <i>pstr1</i> and <i>pstr2</i>
    parameter specification strings do not appear, then the shell
    variables <tt>value1</tt> and <tt>value2</tt>, which are
    accessible in the circuit as <tt>$value1</tt> and
    <tt>$value2</tt>, are swept, as in <a
    href="oprng_analysis">operating range</a> analysis.  This is the
    behavior of the historic <b>loop</b> command.  As in operating
    range analysis, there are various related ways of introducing the
    variations.

    <ol>
    <li>Perhaps the most direct method is to include the forms
    <tt>$value1</tt> and <tt>$value2</tt> (if two dimensional) for
    substitution in the current circuit.  The variables will be
    replaced by the appropriate numerical values before each trial, as
    for shell variable substitution.

    <p>
    <li>If a variable named "<tt>value1</tt>" is set to a string token
    with the <a href="set"><b>set</b></a> command, then a variable of
    the same name as the string token will be incremented, instead of
    <tt>value1</tt>.  The same applies to <tt>value2</tt>.  Thus, for
    example, if the circuit contains expansion forms of the variables
    <tt>foo1</tt> and <tt>foo2</tt> (i.e., <tt>$foo1</tt> and
    <tt>$foo2</tt>), one could perform a sweep analysis using these
    variables as

    <blockquote>
      <tt>set value1 = foo1 value2 = foo2<br>
      sweep</tt> ...
    </blockquote>

    <p>
    <li>The method above allows the SPICE <a
    href="options">options</a> to be iterated.  These are the built-in
    keywords, which can be set with the <b>set</b> command or in a
    <tt>.options</tt> line in an input file, which control or provide
    parameters to the simulation.

    <p>
    The most important example is temperature sweeping, using the
    <tt>temp</tt> option.  A temperature sweep would look like

    <blockquote>
      <tt>set value1=temp<br>
      sweep -50 50 25</tt> <i>analysis</i>
    </blockquote>

    <p>
    This will run the analysis at -50, -25, 0, 25, and 50 Celsius.

    <p>
    <li>If there are existing vectors named "<tt>checkN1</tt>" and (if
    two dimensions) "<tt>checkN2</tt>" that contain integer values,
    and the variable named "<tt>value</tt>" is set to the name of an
    existing vector (or a vector named "<tt>value</tt>" exists), then
    the vector components indexed by <tt>checkN1</tt> and
    <tt>checkN2</tt> will be iterated, if within the size of the
    vector.  For example:

    <blockquote>
      <tt>let vec[10] = 0<br>
      let checkN1 = 5 checkN2 = 6<br>
      set value = vec<br>
      sweep</tt> ...
    </blockquote>

    <p>
    The first line creates a vector named "<tt>vec</tt>" of size
    sufficient to contain the indices.  The iterated values will be
    placed in <tt>vec[5]</tt> and <tt>vec[6]</tt>.  The circuit should
    reference these values, either through shell substitution (e.g.,
    <tt>$&vec[5]</tt>) or directly as vectors.

    <p>
    Alternatively, a variable named "<tt>checkN1</tt>" can be set.  If
    the value of this variable is an integer, that integer will be
    used as the index.  If the variable is a name token, then the
    index will be supplied by a vector of the given name.  The same
    applies to <tt>checkN2</tt>.  The following example illustrates
    these alternatives:

    <blockquote>
      <tt>let vec[10] = 0<br>
      set checkN1 = 5<br>
      let foo = 6<br>
      set checkN2 = foo<br>
      sweep</tt> ...
    </blockquote>

    <p>
    <li>Given that it is possible to set a vector as if a variable,
    by using the <b>set</b> command with the syntax

    <blockquote>
      <tt>set &</tt><i>vector</i> <tt>=</tt> <i>value</i>
    </blockquote>

    <p>
    it is possible to iterate vectors with the <b>sweep</b> command. 
    The form above is equivalent to

    <blockquote>
      <tt>let</tt> <i>vector</i> <tt>=</tt> <i>value</i>
    </blockquote>

    <p>
    Note, however, that the '<tt>&</tt>' character has special
    significance to the <i>WRspice</i> shell, so when this form is
    given on the command line the ampersand should be quoted, e.g., by
    preceding it with a backslash.

    <p>
    Thus, suppose that the circuit depends on a vector named
    <tt>delta</tt>.  One can set up iteration using this vector as

    <blockquote>
      <tt>set value1 = '&delta'<br>
      sweep</tt> ...
    </blockquote>

    <p>
    <li>The construct above can be extended to "special" vectors,
    which enable device and model parameters to be set ahead of the
    next analysis.  These special vectors have the form

    <blockquote>
      <tt>@</tt><i>devname</i><tt>[</tt><i>param</i><tt>]</tt>
    </blockquote>

    where <i>devname</i> is the name of a device or model in the
    circuit, and <i>param</i> is one of the parameter keywords for the
    device or model.  These keywords can be listed with the <a
    href=show><b>show</b></a> command.

    <p>
    For example, if the circuit contains a MOS device <tt>m1</tt> one
    might have

    <blockquote>
      <tt>set value1 = '&@m1[w]'<br>
      sweep 1.0u 2.0u 0.25u</tt> <i>analysis</i>
    </blockquote>

    This will perform the analysis while varying the <tt>m1</tt>
    <tt>w</tt> (device width) parameter from 1.0 to 2.0 microns in
    0.25 micron increments.
    </ol>

    <a name="psetting"></a>
    <h4>Explicit parameter specification</h4>

    If parameters specifications (<i>pstr1</i> and <i>pstr2</i>) are
    given, there is no variable or vector setting.  Instead, the indicated
    device parameters are altered directly, very similar to the
    <a href="alter"><b>alter</b></a> command.

    <p>
    The syntax for the <i>pstr</i> strings is very similar to the
    device/parameter lists accepted by the <b>show</b> command.

    <blockquote>
    <i>device_list</i><tt>,</tt><i>param_list</i>
    </blockquote>

    <p>
    The <i>device_list</i> is a list of one or more device names found
    in the circuit.  The names are separated by white space, and the
    list is terminated with a comma.  Following the comma is one or
    more parameter names.  A parameter name is a device or model
    keyword, which should be applicable to all of the names listed in
    the <i>device_list</i>.  The device keywords can be obtained from
    the <a href="show"><b>show</b></a> command.

    <p>
    The <i>device_list</i> can contain "globbing" (wild-card)
    characters with similar behavior to globbing (<a
    href="glob">global substitution</a>) in the <i>WRspice</i> <a
    href="spshell">shell</a>.  Briefly, '<tt>?</tt>' matches any
    character, '<tt>*</tt>' matches any set of characters or no
    characters, "<tt>[abc]</tt>" matches the characters '<tt>a</tt>',
    '<tt>b</tt>', and '<tt>c</tt>', and "<tt>a{bc,de}</tt>" matches
    "<tt>abc</tt>" and "<tt>ade</tt>".

    <p>
    If the string contains white space, it must be quoted.  Since the
    same range is applied to all the parameters, if would be unusual
    to list more than one parameter name.  However, wildcarding or
    multiple names in the device list allows setting the values of
    arbitrarily many devices for each trial.

    <p>
    If the <i>device_list</i> contains only a single name, and the
    name is a voltage or current source, resistor, capacitor, or
    inductor, then the comma and parameter name can be omitted.  It will
    be taken as the output of a source, or the resistance, capacitance,
    or inductance of the component.
!!LATEX sweep commands.tex
The {\cb sweep} command, which for historical compatibility is also
available as ``{\cb loop}'', is used to perform a simulation analysis
over a range of conditions.

\begin{quote}\vt
sweep [-c] [[[{\it pstr1\/}] {\it min1} {\it max1\/} [{\it step1\/}]]
 [[{\it pstr2\/}] {\it min2\/} [{\it max2\/} [{\it step2\/}]]]
 [{\it analysis\/}]]
\end{quote}
The command works something like a chained dc sweep, running an
analysis over a one or two-dimensional range of parameter values.  The
resulting plot will be multi-dimensional.

There are two fundamental ways in which parameter values can be passed
to the circuit.  In the command, the {\it pstr1} and {\it pstr2} are
text tokens which specify the device parameters to vary, in a format
to be described.  In a two-dimensional sweep, both {\it pstr1} and
{\it pstr2} must be given, or neither can be given.  The two different
value-setting mechanisms can not be mixed.

The specified analysis is performed at each point, yielding
multidimensional output vectors.  If {\it analysis} is omitted, an
analysis specification is expected to be found in the circuit deck.

If a sweep analysis is paused, for example by pressing {\kb Ctrl-C},
it can be resumed by entering the {\cb sweep} command again.  No
arguments are required in this case, however if the {\vt -c} option is
given the old analysis is cleared, and a new analysis started if
further parameters are supplied.  The {\vt -c} is ignored if there was
no sweep analysis in progress.  The {\cb resume} command will also
resume a paused sweep analysis.  The {\cb reset} command given with
the {\vt -c} option will also clear any paused sweep analysis.

\subsubsection{Without explicit device parameter setting}

Assume in this section that the {\it pstr1} and {\it pstr2} parameter
specification strings do not appear, then the the shell variables {\vt
value1} and {\vt value2}, which are accessible in the circuit as {\vt
\$value1} and {\vt \$value2}, are incremented, as in operating range
analysis.  This is the behavior of the historic {\cb loop} command. 
As in operating range analysis, there are various related ways of
introducing the variations.

\begin{enumerate}
\item{
Perhaps the most direct method is to include the forms {\vt
\$value1} and {\vt \$value2} (if two dimensional) for substitution in
the current circuit.  The variables will be replaced by the
appropriate numerical values before each trial, as for shell variable
substitution.
}

\item{
If a variable named ``{\vt value1}'' is set to a string token
with the {\cb set} command, then a variable of the same name as the
string token will be incremented, instead of {\vt value1}.  The same
applies to {\vt value2}.  Thus, for example, if the circuit contains
expansion forms of the variables {\vt foo1} and {\vt foo2} (i.e., {\vt
\$foo1} and {\vt \$foo2}), one could perform a sweep analysis using
these variables as

\begin{quote}
{\vt set value1 = foo1 value2 = foo2}\\
{\vt sweep} ...
\end{quote}
}

\item{
The method above allows the SPICE options to be iterated.  These are
the built-in keywords, which can be set with the {\cb set} command or
in a {\vt .options} line in an input file, which control or provide
parameters to the simulation.

The most important example is temperature sweeping, using the
{\vt temp} option.  A temperature sweep would look like

\begin{quote}
{\vt set value1=temp}\\
{\vt sweep -50 50 25} {\it analysis}
\end{quote}

This will run the analysis at -50, -25, 0, 25, and 50 Celsius.
}

\item{
If there are existing vectors named ``{\vt checkN1}'' and (if two
dimensions) ``{\vt checkN2}'' that contain integer values, and the
variable named ``{\vt value}'' is set to the name of an existing
vector (or a vector named ``{\vt value}'' exists), then the vector
components indexed by {\vt checkN1} and {\vt checkN2} will be
iterated, if within the size of the vector.  For example:

\begin{quote}
{\vt let vec[10] = 0}\\
{\vt let checkN1 = 5 checkN2 = 6}\\
{\vt set value = vec}\\
{\vt sweep} ...
\end{quote}

The first line creates a vector named ``{\vt vec}'' of size sufficient
to contain the indices.  The iterated values will be placed in {\vt
vec[5]} and {\vt vec[6]}.  The circuit should reference these values,
either through shell substitution (e.g., {\vt \$\&vec[5]}) or directly
as vectors.

Alternatively, a variable named ``{\vt checkN1}'' can be set.  If the
value of this variable is an integer, that integer will be used as the
index.  If the variable is a name token, then the index will be
supplied by a vector of the given name.  The same applies to {\vt
checkN2}.  The following example illustrates these alternatives:

\begin{quote}
{\vt let vec[10] = 0}\\
{\vt set checkN1 = 5}\\
{\vt let foo = 6}\\
{\vt set checkN2 = foo}\\
{\vt sweep} ...
\end{quote}
}

\item{
Given that it is possible to set a vector as if a variable, by using
the {\cb set} command with the syntax

\begin{quote}
{\vt set \&}{\it vector} {\vt =} {\it value}
\end{quote}

it is possible to iterate vectors with the {\cb sweep} command.  The
form above is equivalent to

\begin{quote}
{\vt let} {\it vector} {\vt =} {\it value}
\end{quote}

Note, however, that the `{\vt \&}' character has special significance
to the {\WRspice} shell, so when this form is given on the command
line the ampersand should be quoted, e.g., by preceding it with a
backslash.

Thus, suppose that the circuit depends on a vector named {\vt delta}. 
One can set up iteration using this vector as

\begin{quote}
{\vt set value1 = '\&delta'}\\
{\vt sweep} ...
\end{quote}
}

\item{
The construct above can be extended to ``special'' vectors, which
enable device and model parameters to be set ahead of the next
analysis.  These special vectors have the form

\begin{quote}
{\vt @}{\it devname\/}{\vt [}{\it param\/}{\vt ]}
\end{quote}

where {\it devname} is the name of a device or model in the circuit,
and {\it param} is one of the parameter keywords for the device or
model.  These keywords can be listed with the {\cb show} command.

For example, if the circuit contains a MOS device {\vt m1} one might
have

\begin{quote}
{\vt set value1 = '\&@m1[w]'}\\
{\vt sweep 1.0u 2.0u 0.25u} {\it analysis}
\end{quote}

This will perform the analysis while varying the {\vt m1} {\vt w}
(device width) parameter from 1.0 to 2.0 microns in 0.25 micron
increments.
}
\end{enumerate}

\subsubsection{Explicit parameter setting}
\label{psetting}

If parameters specifications ({\it pstr1} and {\it pstr2\/}) are
given, there is no variable or vector setting.  Instead, the indicated
device parameters are altered directly, very similar to the {\cb
alter} command.

The syntax for the {\it pstr} strings is very similar to the
device/parameter lists accepted by the {\cb show} command.

\begin{quote}
{\it device\_list\/}{\vt ,}{\it param\_list}
\end{quote}

The {\it device\_list} is a list of one or more device names found in
the circuit.  The names are separated by white space, and the list is
terminated with a comma.  Following the comma is one or more parameter
names.  A parameter name is a device or model keyword, which should be
applicable to all of the names listed in the {\it device\_list}.  The
device keywords can be obtained from the {\cb show} command.

The {\it device\_list} can contain ``globbing'' (wild-card)
characters with similar behavior to globbing (global substitution) in
the {\WRspice} shell.  Briefly, `{\vt ?}' matches any character, '{\vt
*}' matches any set of characters or no characters, ``{\vt [abc]}''
matches the characters `{\vt a}', `{\vt b}', and `{\vt c}', and ``{\vt
a}\{{\vt bc,de}\}'' matches ``{\vt abc}'' and ``{\vt ade}''.

If the string contains white space, it must be quoted.  Since the same
range is applied to all the parameters, if would be unusual to list
more than one parameter name.  However, wildcarding or multiple names
in the device list allows setting the values of arbitrarily many
devices for each trial.

If the {\it device\_list} contains only a single name, and the name is
a voltage or current source, resistor, capacitor, or inductor, then
the comma and parameter name can be omitted.  It will be taken as the
output of a source, or the resistance, capacitance, or inductance of
the component.

!!SEEALSO
oprng
multidc
simcmds

!! commands.tex 011909
!!KEYWORD
tf
!!TITLE
tf command
!!HTML 
    command: <tt>tf</tt> <i>tf_args</i> [<tt>dc</tt> <i>dc_args</i>]
 
    <p>
    The <b>tf</b> command will initiate a transfer function analysis
    of the current circuit.  The arguments appear as they would in a
    <a href=".tf"><tt>.tf</tt></a> line in the input file.  If a <a
    href=".dc">dc sweep</a> specification follows, the transfer
    function analysis will be performed at each dc sweep point.
!!LATEX tf commands.tex
The {\cb tf} command will initiate a transfer function analysis of the
current circuit.
\begin{quote}\vt
tf {\it tf\_args} [dc {\it dc\_args\/}]
\end{quote}
The arguments appear as they would in a {\vt .tf} line (see
\ref{tfline}) in the input file.  If a dc sweep specification follows,
the transfer function analysis will be performed at each dc sweep
point (see \ref{dcline}).
 
!!SEEALSO
multidc
simcmds

!! commands.tex 051219
!!KEYWORD
trace
!!TITLE
trace command
!!HTML 
    command: <tt>trace</tt> <i>expr</i> ...
 
    <p>
    The <b>trace</b> command will add a <a href="runop">runop</a>
    which prints the value of the expression(s) at each user analysis
    point.  At each time point, the expressions on the command line
    will be evaluated, and their values printed on the standard
    output.
 
    <p>
    If a trace command is given at the prompt in interactive mode, it
    is placed in a global list, and activity will persist until
    deleted (with the <a href="delete"><b>delete</b></a> command).  If
    the command is given in a file, the command will be added to a
    list for the current circuit, and will apply only to that circuit. 
    Thus, for example, a <i>WRspice</i> file can contain lines like
    <blockquote>
        <tt>*# trace v(1)</tt>
    </blockquote>
    and the trace will be performed as that circuit is run, but the
    "<tt>trace v(1)</tt>" directive will not apply to other
    circuits.

    <p>
    The traces in effect can be listed with the <a
    href="status"><b>status</b></a> command, deleted with the
    <b>delete</b> command, and otherwise manipulated from the panel
    brought up with the <b>Trace</b> button in the <b>Tools</b> menu. 
!!LATEX trace commands.tex
The {\cb trace} command will add a ``runop'' which prints the value of
the expression(s) at each user analysis point.
\begin{quote}\vt
trace {\it expr\/} [...]
\end{quote}
At each time point, the expressions on the command line will be
evaluated, and their values printed on the standard output.

If a trace command is given at the prompt in interactive mode, it is
placed in a global list, and activity will persist until deleted (with
the {\cb delete} command).  If the command is given in a file, the
command will be added to a list for the current circuit, and will
apply only to that circuit.  Thus, for example, a {\WRspice} file can
contain lines like
\begin{quote}
{\vt *\# trace v(1)}
\end{quote}
and the trace will be performed as that circuit is run, but the ``{\vt
trace v(1)}'' directive will not apply to other circuits.

The traces in effect can be listed with the {\cb status} command,
deleted with the {\cb delete} command, and otherwise manipulated from
the panel brought up with the {\cb Trace} button in the {\cb Tools}
menu.

!!SEEALSO
step
stop
status
iplot
simcmds

!! commands.tex 011909
!!KEYWORD
tran
!!TITLE
tran command
!!HTML 
    command: <tt>tran</tt> <i>tran_args</i>

    <p>
    The <b>tran</b> command initiates transient analysis of the
    current circuit.  The arguments are the same as those of a <a
    href=".tran">.tran</a> line.  Output is retained at <i>tstart</i>,
    <i>tstop</i>, and multiples of <i>tstep</i> in between, unless the
    variable <a href="steptype"><tt>steptype</tt></a> is set to
    <tt>nousertp</tt>.  In this case, output is retained at each
    internally generated time point in the range.  If a <a
    href=".dc">dc sweep</a> specification follows, the transient
    analysis is performed at each sweep point.
!!LATEX tran commands.tex
The {\cb tran} command initiates transient analysis of the current
circuit.
\begin{quote}\vt
tran {\it tran\_args} [dc {\it dc\_args\/}]
\end{quote}
The arguments are the same as those of a {\vt .tran} line (see
\ref{tranline}).  Output is retained at {\it tstart}, {\it tstop}, and
multiples of {\it tstep} in between, unless the variable {\et
steptype} is set to {\vt nousertp}.  In this case, output is retained
at each internally generated time point in the range.  If a dc sweep
specification follows, the transient analysis is performed at each
sweep point.
 
!!SEEALSO
multidc
simcmds

!! commands.tex 032420
!!KEYWORD
vastep_cmd
!!TITLE
vastep command
!!HTML 
    command: <tt>vastep</tt>

    <p>
    This command has application when simulating a circuit containing
    a <a href=".verilog">Verilog block</a>, and the option <a
    href="vastep"><tt>vastep</tt></a> has been set to 0.  In this
    case, a call to this command will advance the Verilog
    simulation to the next clock tick.  This function can be called
    from a callback initiated from a <a
    href=".stop"><tt>.stop</tt></a> line, used when co-simulating
    Verilog and SPICE.
!!LATEX vastep commands.tex
This command has application when simulating a circuit containing
Verilog block, and the option {\et vastep} has been set to 0.  In this
case, a call to this command will advance the Verilog simulation to
the next clock tick.  This function can be called from a callback
initiated from a {\vt .stop} line, used when co-simulating Verilog and
SPICE.

!!SEEALSO
simcmds
verilog

!! commands.tex 012209
!!KEYWORD
where
!!TITLE
where command
!!HTML 
    command: <tt>where</tt>

    <p>
    The <b>where</b> command, which takes no arguments, prints
    information about the last nonconvergence, for debugging purposes.
!!LATEX where commands.tex
The {\cb where} command, which takes no arguments, prints information
about the last nonconvergence, for debugging purposes.

!!SEEALSO
simcmds

!! ----------------------------------------------------------------------------
!! commands.tex 091714
!!KEYWORD
datacmds
!!TITLE
Data Manipulation Commands
!!HTML 
    The following commands perform various operations on <a
    href="plotvec">vectors</a>, which are the basic data structures of
    <i>WRspice</i>.  Vectors from the current plot can be referenced
    by name.  A listing of the vectors for the current plot is
    obtained by typing the <a href="let"><b>let</b></a> or <a
    href="display"><b>display</b></a> commands without arguments, or
    pressing the <b>Vectors</b> button in the <b>Tools</b> menu. 
    Vectors for other than the current plot are referenced by
    <i>plotname.vecname</i>, for example, <tt>tran2.v(1)</tt>.  The
    current plot can be changed with the <a
    href="setplot"><b>setplot</b></a> command, or from the panel
    brought up by the <b>Plots</b> button in the <b>Tools</b> menu.

    <p>
    Vectors can be created and manipulated in many ways.  For example, typing
    <blockquote>
    <tt>let diff = v(1) - v(2)</tt>
    </blockquote>
    creates a new vector <tt>diff</tt>.  All vectors can be printed,
    plotted, or used in expressions.  They can be deleted with the <a
    href="unlet"><b>unlet</b></a> command.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2>Data Manipulation Commands</th></tr>
    <tr><td><a href="compose"><b>compose</b></a></td>
      <td>Create vector</td></tr>
    <tr><td><a href="cross"><b>cross</b></a></td>
      <td>Vector cross operation</td></tr>
    <tr><td><a href="define"><b>define</b></a></td>
      <td>Define a macro function</td></tr>
    <tr><td><a href="deftype"><b>deftype</b></a></td>
      <td>Define a data type</td></tr>
    <tr><td><a href="diff"><b>diff</b></a></td>
      <td>Compare plots and vectors</td></tr>
    <tr><td><a href="display"><b>display</b></a></td>
      <td>Print vector list</td></tr>
    <tr><td><a href="fourier"><b>fourier</b></a></td>
      <td>Perform spectral analysis</td></tr>
    <tr><td><a href="let"><b>let</b></a></td>
      <td>Create or assign vectors</td></tr>
    <tr><td><a href="linearize"><b>linearize</b></a></td>
      <td>Linearize vector data</td></tr>
    <tr><td><a href="pick"><b>pick</b></a></td>
      <td>Create vector from reduced data</td></tr>
    <tr><td><a href="seed"><b>seed</b></a></td>
      <td>Seed random number generator</td></tr>
    <tr><td><a href="setdim"><b>setdim</b></a></td>
      <td>Set current plot dimensions</td></tr>
    <tr><td><a href="setplot"><b>setplot</b></a></td>
      <td>Set current plot</td></tr>
    <tr><td><a href="setscale"><b>setscale</b></a></td>
      <td>Assign scale to vector</td></tr>
    <tr><td><a href="settype"><b>settype</b></a></td>
      <td>Assign type to vector</td></tr>
    <tr><td><a href="spec"><b>spec</b></a></td>
      <td>Perform spectral analysis</td></tr>
    <tr><td><a href="undefine"><b>undefine</b></a></td>
      <td>Undefine macro function</td></tr>
    <tr><td><a href="unlet"><b>unlet</b></a></td>
      <td>Undefine vector</td></tr>
    <tr><td><a href="vastep_cmd"><b>vastep</b></a></td>
      <td>Advance Verilog simulator</td></tr>
    </table>
!!LATEX datacmds commands.tex
The following commands perform various operations on vectors, which
are the basic data structures of {\WRspice}.  Vectors from the current
plot can be referenced by name.  A listing of the vectors for the
current plot is obtained by typing the {\cb let} or {\cb display}
commands without arguments, or pressing the {\cb Vectors} button in
the {\cb Tools} menu.  Vectors for other than the current plot are
referenced by {\it plotname\/}.{\it vecname}, for example, {\vt
tran2.v(1)}.  The current plot can be changed with the {\cb setplot}
command, or from the panel brought up by the {\cb Plots} button in the
{\cb Tools} menu.  See \ref{vectors} for more information about
vectors.

Vectors can be created and manipulated in many ways.  For example, typing
\begin{quote}
{\vt let diff = v(1) - v(2)}
\end{quote}
creates a new vector {\et diff}.  All vectors can be printed, plotted, or
used in expressions.  They can be deleted with the {\cb unlet} command.

\begin{tabular}{|l|l|}\hline
\multicolumn{2}{|c|}{Data Manipulation Commands}\\ \hline
\cb compose & Create vector\\ \hline
\cb cross & Vector cross operation\\ \hline
\cb define & Define a macro function\\ \hline
\cb deftype & Define a data type\\ \hline
\cb diff & Compare plots and vectors\\ \hline
\cb display & Print vector list\\ \hline
\cb fourier & Perform spectral analysis\\ \hline
\cb let & Create or assign vectors\\ \hline
\cb linearize & Linearize vector data\\ \hline
\cb pick & Create vector from reduced data\\ \hline
\cb seed & Seed random number generator\\ \hline
\cb setdim & Set current plot dimensions\\ \hline
\cb setplot & Set current plot\\ \hline
\cb setscale & Assign scale to vector\\ \hline
\cb settype & Assign type to vector\\ \hline
\cb spec & Perform spectral analysis\\ \hline
\cb undefine & Undefine macro function\\ \hline
\cb unlet & Undefine vector\\ \hline
\cb vastep & Advance Verilog simulator\\ \hline
\end{tabular}

!!SEEALSO
commands

!! commands.tex 032220
!!KEYWORD
compose
!!TITLE
compose command
!!HTML 
    command:
    <blockquote>
       <tt>compose</tt> <i>vecname</i> <tt>values</tt> <i>value</i> [...]<br>
       <tt>compose</tt> <i>vecname</i> <tt>pattern</tt> [<i>n1</i> [<i>n2</i>]]
           <i>bstring</i> [<i>modifiers</i>] [...]<br>
       <tt>compose</tt> <i>vecname</i> <i>param</i> = <i>value</i> [...]
    </blockquote>

    <p>
    The <b>compose</b> command is used to create vectors.  All forms
    of this command create a new vector called <i>vecname</i>.  In the
    first form, indicated by the keyword "<tt>values</tt>", the given
    values are concatenated to form the vector.  The second form
    creates a binary pattern of 1 and 0 values based on the given
    pattern specification to be described.  In the third form, the
    values in the vector are determined by the parameters given, as
    will be described.

    <p>
    The pattern generation syntax given in the second form is as used
    in <a href="pulse">pulse</a> source.  See the <a
    href="pattern">reference</a> for a complete description of the
    <i>bstring</i> and <i>modifier</i> syntax and usage.  The optional
    preceding numbers <i>n1</i> and <i>n2</i> apply only when infinite
    repetition (<tt>r=-1</tt>) is given in the <i>modifier</i>: 
    neither given will will cause the vector to end at the sequence
    end, with no repeat.  If <i>n1</i> only is given, this number is
    taken as the maximum length of the vector.  If both <i>n1</i> and
    <i>n2</i> are given, the two numbers are taken as <i>step</i> and
    <i>stop</i>, with the maximum length <i>stop</i>/<i>step</i>. 
    This is convenient for setting the length to match a transient
    analysis specification.

    <p>
    In the third form, there are three groups of possible parameter
    sets.  The first set facilitates creation of uniform arrays.  This
    set contains the following parameters.

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th align="left"><tt>start</tt></th>
      <td>The value at which the vector should start</td></tr>
    <tr><th align="left"><tt>stop</tt></th>
      <td>The value at which the vector should end</td></tr>
    <tr><th align="left"><tt>step</tt></th>
      <td>The difference between successive elements</td></tr>
    <tr><th align="left"><tt>lin</tt></th>
      <td>The number of points, linearly spaced</td></tr>
    <tr><th align="left"><tt>log</tt></th>
      <td>The number of points, logarithmically spaced</td></tr>
    <tr><th align="left"><tt>dec</tt></th>
      <td>The number of points per decade, logarithmically spaced</td></tr>
    </table><br>

    <p>
    The words "<tt>len</tt>" and "<tt>length</tt>" are synonyms for
    "<tt>lin</tt>".  A subset of these parameters that provides the
    information needed is sufficient.  If all four are given, the
    point count and step value must be consistent or the command will
    fail.  The parameter <tt>start</tt> defaults to zero, unless
    implicitly set by other parameters.  The <tt>stop</tt> and
    <tt>step</tt> have no defaults and must be supplied unless implied
    by other parameters.  If the <tt>lin</tt> parameter is not given,
    the other parameters determine the vector length.

    <p>
    The second parameter group generates Gaussian random values.

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th align="left"><tt>gauss</tt></th>
      <td>The number of points in the gaussian distribution</td></tr>
    <tr><th align="left"><tt>mean</tt></th>
      <td>The mean value for the gaussian distribution</td></tr>
    <tr><th align="left"><tt>sd</tt></th>
      <td>The standard deviation for the gaussian distribution</td></tr>
    </table><br>

    <p>
    The <tt>gauss</tt> parameter is required, <tt>sd</tt> defaults to
    1.0, and <tt>mean</tt> defaults to 0.  The random number sequences
    can be reset by calling the <a href="seed"><b>seed</b></a>
    command.

    <p>
    The third parameter group generates uniform random values.

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th align="left"><tt>random</tt></th>
      <td>The number of randomly selected points</td></tr>
    <tr><th align="left"><tt>center</tt></th>
      <td>Where to center the range of points</td></tr>
    <tr><th align="left"><tt>span</tt></th>
      <td>The size of the range of points</td></tr>
    </table><br>

    <p>
    The <tt>random</tt> parameter is required, <tt>span</tt> defaults
    to 2.0, and <tt>center</tt> defaults to 0.  The random number
    sequences can be reset by calling the <a
    href="seed"><b>seed</b></a> command.
!!LATEX compose commands.tex
The {\cb compose} command is used to create vectors.  It has three forms:
\begin{quote}\vt
compose {\it vecname} values {\it value} [...]\\
{\rm or}\\
compose {\it vecname} pattern [{\it n1} [{\it n2\/}]] {\it bstring}
[{\it modifiers\/}] [...]\\
{\rm or}\\
compose {\it vecname} {\it param = value} [...]
\end{quote}

All forms of this command create a new vector called {\it vecname\/}. 
In the first form, indicated by the keyword ``{\vt values}'', the
given values are concatenated to form the vector.  The second form
creates a binary pattern of 1 and 0 values based on the given pattern
specification to be described.  In the third form, the values in the
vector are determined by the parameters given, as will be described.

The pattern generation syntax given in the second form is as used in
pulse source.  See \ref{pattern} for a complete description of the
{\it bstring} and {\it modifier} syntax and usage.  The optional
preceding numbers {\it n1} and {\it n2} apply only when infinite
repetition ({\vt r=-1}) is given in the {\it modifier\/}:  neither
given will will cause the vector to end at the sequence end, with no
repeat.  If {\it n1} only is given, this number is taken as the
maximum length of the vector.  If both {\it n1} and {\it n2} are
given, the two numbers are taken as {\it step} and {\it stop}, with
the maximum length {\it stop}/{\it step}.  This is convenient for
setting the length to match a transient analysis specification.

In the third form, there are three groups of possible parameter sets. 
The first set facilitates creation of uniform arrays.  This set
contains the following parameters.

\begin{quote}
\begin{tabular}{|l|l|}\hline
\vt start & The value at which the vector should start\\ \hline
\vt stop & The value at which the vector should end\\ \hline
\vt step & The difference between successive elements\\ \hline
\vt lin & The number of points, linearly spaced\\ \hline
\vt log & The number of points, logarithmically spaced\\ \hline
\vt dec & The number of points per decade, logarithmically spaced\\ \hline
\end{tabular}
\end{quote}

The words ``{\vt len}'' and ``{\vt length}'' are synonyms for ``{\vt
lin}''.  A subset of these parameters that provides the information
needed is sufficient.  If all four are given, the point count and step
value must be consistent or the command will fail.  The parameter {\vt
start} defaults to zero, unless implicitly set by other parameters. 
The {\vt stop} and {\vt step} have no defaults and must be supplied
unless implied by other parameters.  If the {\vt lin} parameter is not
given, the other parameters determine the vector length.

The second parameter group generates Gaussian random values.

\begin{quote}
\begin{tabular}{|l|l|}\hline
\vt gauss & The number of points in the gaussian distribution\\ \hline
\vt mean & The mean value for the gaussian distribution\\ \hline
\vt sd & The standard deviation for the gaussian distribution\\ \hline
\end{tabular}
\end{quote}

The {\vt gauss} parameter is required, {\vt sd} defaults to 1.0, and
{\vt mean} defaults to 0.  The random number sequences can be reset by
calling the {\cb seed} command.

The third parameter group generates uniform random values.

\begin{quote}
\begin{tabular}{|l|l|}\hline
\vt random & The number of randomly selected points\\ \hline
\vt center & Where to center the range of points\\ \hline
\vt span & The size of the range of points\\ \hline
\end{tabular}
\end{quote}

The {\vt random} parameter is required, {\vt span} defaults to 2.0,
and {\vt center} defaults to 0.  The random number sequences can be
reset by calling the {\cb seed} command.
 
!!SEEALSO
let
datacmds

!! commands.tex 012009
!!KEYWORD
cross
!!TITLE
cross command
!!HTML 
    command: <tt>cross</tt> <i>vecname number</i> <i>source</i> [...]

    <p>
    The <b>cross</b> command creates a new vector.  The vector is
    constructed, with name <i>vecname</i> and values consisting of the
    <i>number</i>'th element of each of the source vectors.  If the
    index is out of range for a vector, 0 is taken.
!!LATEX cross commands.tex
The {\cb cross} command creates a new vector.
\begin{quote}\vt
cross {\it vecname number} {\it source} [...]
\end{quote}
The vector is constructed, with name {\it vecname} and values
consisting of the {\it number\/}'th element of each of the source
vectors.  If the index is out of range for a vector, 0 is taken.
 
!!SEEALSO
datacmds
pick

!! commands.tex 092312
!!KEYWORD
define
!!TITLE
define command
!!HTML 
    command: <tt>define</tt> [<i>function</i>(<i>arg1</i>, <i>arg2</i>, ...)]
     [=] [<i>expression</i>]

    <p>
    The <b>define</b> command is used to specify user-defined vector
    functions.  This will define the user-definable function with the
    name <i>function</i> and arguments <i>arg1</i>, <i>arg2</i>, ... 
    to be <i>expression</i>, which will usually involve the arguments. 
    When the function is called, the arguments that are given are
    substituted for the formal arguments.

    <p>
    The <b>define</b> command and the <a
    href=".param"><tt>.param</tt></a> line in input files can be used
    to define user-defined functions (UDFs).  User-defined function
    definitions are modularized and prioritized.  At the base of the
    hierarchy (with lowest priority) are the "shell" UDFs which are
    defined with the <b>define</b> command.

    <p>
    Every circuit has its own set of UDFs, which are obtained from
    <tt>.param</tt> lines which are not part of a subcircuit.  When a
    circuit is the current circuit, its UDFs will be searched before
    the shell UDFs to resolve a function reference.  The current
    circuit's UDF database is pushed onto a stack, ahead of the shell
    UDFs.  Most of the time, this stack is two levels deep.

    <p>
    During initial circuit processing, when subcircuit expansion is
    being performed, when a subcircuit is bing expanded, any functions
    defined within the <a href=".subckt"><tt>.subckt</tt></a> text
    with <tt>.param</tt> lines are pushed on the top of the stack. 
    Since subcircuit definitions may be nested, functions will be
    pushed/popped according to the depth in the hierarchy currently
    being processed.

    <p>
    Thus, a function defined in a subcircuit will have priority over a
    function of the same name and argument count defined in the
    circuit body, and a function defined in the circuit body will have
    priority over a function with the same name and argument count
    defined from the shell with the <b>define</b> command.

    <p>
    When <b>define</b> is given without arguments, all currently
    defined functions are listed.  Those definitions from the current
    circuit will be shown with an asterisk '<tt>*</tt>' in the first
    column.  Other functions listed have been defined with the
    <b>define</b> command.  The functions defined in subcircuits are
    invisible, their use is only transient and they are part of the
    database only during subcircuit expansion.

    <p>
    If only a function name is given, any definitions for functions
    with the given name are printed.

    <p>
    It is possible to define a function that calls a non-existing
    function.  The resolution is done when the function is evaluated. 
    Thus, functions of functions can be defined in any order.

    <p>
    Note that one may have different functions defined with the same
    name but different argument counts.  Some useful definitions
    (which are part of the default environment) are:

    <blockquote><tt>
    define max(x,y) x > y ? x : y<br>
    define min(x,y) x &#60 y ? x : y
    </tt></blockquote>
!!LATEX define commands.tex
The {\cb define} command is used to specify user-defined vector
functions.
\begin{quote}\vt
define [{\it function\/}({\it arg1\/}, {\it arg2\/}, ...)]
[=] [{\it expression\/}]
\end{quote}
This will define the user-definable function with the name {\it
function\/} and arguments {\it arg1\/}, {\it arg2\/}, ...  to be {\it
expression}, which will usually involve the arguments.  When the
function is called, the arguments that are given are substituted
for the formal arguments.

The {\cb define} command and the {\vt .param} line in input files can
be used to define user-defined functions (UDFs).  User-defined
function definitions are modularized and prioritized.  At the base of
the hierarchy (with lowest priority) are the "shell" UDFs which are
defined with the {\cb define} command.

Every circuit has its own set of UDFs, which are obtained from {\vt
.param} lines which are not part of a subcircuit.  When a circuit is
the current circuit, its UDFs will be searched before the shell UDFs
to resolve a function reference.  The current circuit's UDF database
is pushed onto a stack, ahead of the shell UDFs.  Most of the time,
this stack is two levels deep.

During initial circuit processing, when subcircuit expansion is being
performed, when a subcircuit is bing expanded, any functions defined
within the {\vt .subckt} text with {\vt .param} lines are pushed on
the top of the stack.  Since subcircuit definitions may be nested,
functions will be pushed/popped according to the depth in the
hierarchy currently being processed.
  
Thus, a function defined in a subcircuit will have priority over a
function of the same name and argument count defined in the circuit
body, and a function defined in the circuit body will have priority
over a function with the same name and argument count defined from the
shell with the {\cb define} command.

When {\cb define} is given without arguments, all currently defined
functions are listed.  Those definitions from the current circuit will
be shown with an asterisk `{\vt *}' in the first column.  Other
functions listed have been defined with the {\cb define} command.  The
functions defined in subcircuits are invisible, their use is only
transient and they are part of the database only during subcircuit
expansion.

If only a function name is given, any definitions for functions with
the given name are printed.

It is possible to define a function that calls a non-existing
function.  The resolution is done when the function is evaluated. 
Thus, functions of functions can be defined in any order.

Note that one may have different functions defined with the same name
but different argument counts.  Some useful definitions (which are
part of the default environment) are:
\begin{quote} \vt
define max(x,y) x > y ? x : y\\
define min(x,y) x < y ? x : y
\end{quote}
 
!!SEEALSO
undefine
expressions
datacmds

!! commands.tex 012009
!!KEYWORD
deftype
!!TITLE
deftype command
!!HTML 
    command:
    <blockquote>
    <tt>deftype v</tt> <i>typename</i> [<i>abbrev</i>]<br>
    <tt>deftype p</tt> <i>plottype</i> [<i>pattern</i> ...]
    </blockquote>

    <p>
    The <b>deftype</b> command defines a new data type.  This is an
    obscure command that might be useful for exporting rawfile data to
    other programs.  If a vector's value indicates furlongs per
    fortnight, its type can be so defined.  However, user-defined
    types are not compatible with the internal <i>WRspice</i> type
    propagation logic.  Vectors with user-defined types, or results
    involving user-defined types, will be treated as untyped in
    <i>WRspice</i>.

    <p>
    The first form defines a new type for vectors.  The
    <i>typename</i> may then be used as a vector type specification in
    a rawfile.  If an <i>abbrev</i> is given, values of that type can
    be named <i>abbrev</i>(<i>something</i>) where <i>something</i> is
    the name given in the rawfile (and <i>something</i> doesn't
    contain parentheses).

    <p>
    The second form defines a plot type.  The (one word) name for a
    plot with any of the patterns present in its plot type name as
    given in the rawfile will be <i>plottype</i>N, where N is a
    positive integer incremented every time a rawfile is read or a new
    plot is defined. 
!!LATEX deftype commands.tex
The {\cb deftype} command defines a new data type.
\begin{quote}\vt
    deftype v {\it typename} [{\it abbrev\/}]\\
    deftype p {\it plottype} [{\it pattern} ...]
\end{quote}
This is an obscure command that might be useful for exporting rawfile
data to other programs.  If a vector's value indicates furlongs per
fortnight, its type can be so defined.  However, user-defined types
are not compatible with the internal {\WRspice} type propagation
logic.  Vectors with user-defined types, or results involving
user-defined types, will be treated as untyped in {\WRspice}.

The first form defines a new type for vectors.  The {\it typename} may
then be used as a vector type specification in a rawfile.  If an {\it
abbrev} is given, values of that type can be named {\it abbrev}({\it
something}) where {\it something} is the name given in the rawfile
(and {\it something} doesn't contain parentheses).

The second form defines a plot type.  The (one word) name for a plot
with any of the patterns present in its plot type name as given in the
rawfile will be {\it plottype}N, where N is a positive integer
incremented every time a rawfile is read or a new plot is defined.
 
!!SEEALSO
datacmds

!! commands.tex 012009
!!KEYWORD
diff
!!TITLE
diff command
!!HTML 
    command: <tt>diff</tt> <i>plot1 plot2</i> [<i>vecname</i> ...]

    <p>
    The <b>diff</b> command compares vectors in different plots.  The
    command will compare all the vectors in the specified plots, or
    only the named vectors if any are given.  If there are different
    vectors in the two plots, or any values in the vectors differ
    significantly, the difference is reported.  The variables <a
    href="diff_abstol"><tt>diff_abstol</tt></a>, <a
    href="diff_reltol"><tt>diff_reltol</tt></a>, and <a
    href="diff_vntol"><tt>diff_vntol</tt></a> are used to determine if
    two values are "significantly" different. 
!!LATEX diff commands.tex
The {\cb diff} command compares vectors in different plots.
\begin{quote}\vt
diff {\it plot1 plot2} [{\it vecname} ...]
\end{quote}
The command will compare all the vectors in the specified
plots, or only the named vectors if any are given.  If there are
different vectors in the two plots, or any values in the vectors
differ significantly, the difference is reported.  The variables {\et
diff\_abstol}, {\et diff\_reltol}, and {\et diff\_vntol} are used to
determine if two values are ``significantly'' different.
 
!!SEEALSO
datacmds
 
!! commands.tex 012009
!!KEYWORD
display
!!TITLE
display command
!!HTML 
    command: <tt>display</tt> [<i>vecname</i> ...]

    <p>
    The <b>display</b> command prints information about the named
    vectors, or about all vectors in the current plot if no names are
    given.  This command will list the names, types and lengths of the
    vectors, and whether the vector is real or complex.

    <p>
    Additional information is also given:  if there is a minimum or
    maximum value for the vector defined, this is listed (see <a
    href="rawfilefmt">rawfile format</a> for the manner in which this
    and the rest of the per-vector parameters are defined), if there
    is a default grid type or a default plot type, they are mentioned,
    and if there is a default color or a default scale for the vector
    it is noted.  Additionally, one vector in the plot will have the
    notation <tt>[default scale]</tt> appended - this vector will be
    used as the x-scale for the <b>plot</b> command if none is given
    or if the vectors named have no default scales of their own.  See
    the <a href="plot"><b>plot</b></a> command for more information on
    scales.

    <p>
    The vectors are sorted by name unless the variable <a
    href="nosort"><tt>nosort</tt></a> is set.  The <a
    href="let"><b>let</b></a> command without arguments is equivalent
    to the <b>display</b> command without arguments.
!!LATEX display commands.tex
The {\cb display} command prints information about the named vectors,
or about all vectors in the current plot if no names are given.
\begin{quote}\vt
display [{\it vecname} ...]
\end{quote}
This command will list the names, types and lengths of the vectors,
and whether the vector is real or complex.

Additional information is also given:  if there is a minimum or
maximum value for the vector defined, this is listed (see
\ref{rawfilefmt} for the manner in which this and the rest of the
per-vector parameters are defined), if there is a default grid type or
a default plot type, they are mentioned, and if there is a default
color or a default scale for the vector it is noted.  Additionally,
one vector in the plot will have the notation {\vt [default scale]}
appended --- this vector will be used as the x-scale for the {\cb
plot} command if none is given or if the vectors named have no default
scales of their own.  See the {\cb plot} command (\ref{plotcmd}) for
more information on scales.

The vectors are sorted by name unless the variable {\et nosort} is
set.  The {\cb let} command without arguments is equivalent to the
{\cb display} command without arguments.

!!SEEALSO
datacmds
 
!! commands.tex 012009
!!KEYWORD
fourier
!!TITLE
fourier command
!!HTML 
    command: <tt>fourier</tt> <i>fundamental_frequency</i> [<i>value</i> ...]

    <p>
    The <b>fourier</b> command performs Fourier analysis.  This
    command initiates a Fourier analysis of each of the given values,
    using the first 10 multiples of the fundamental frequency (or the
    first <a href="nfreqs"><tt>nfreqs</tt></a>, if that variable is
    set).  The values may be any valid expression.  They are
    interpolated onto a fixed-spaced grid with the number of points
    given by the <a href="fourgridsize"><tt>fourgridsize</tt></a>
    variable, or 200 if it is not set.  The interpolation will be of
    degree <a href="polydegree"><tt>polydegree</tt></a> if that
    variable is set, or 1.  If polydegree is 0, then no interpolation
    will be done.  This is likely to give erroneous results if the
    time scale is not monotonic.  This command is executed when a <a
    href=".four"><tt>.four</tt></a> line is present in the input file
    and <i>WRspice</i> is being run in batch mode.
!!LATEX fourier commands.tex
The {\cb fourier} command performs Fourier analysis.
\begin{quote}\vt
fourier {\it fundamental\_frequency} [{\it value} ...]
\end{quote}
The command initiates a fourier analysis of each of the given values,
using the first 10 multiples of the fundamental frequency (or the
first {\vt nfreqs}, if that variable is set).  The values may be any
valid expression.  They are interpolated onto a fixed-space grid with
the number of points given by the {\et fourgridsize} variable, or 200
if it is not set.  The interpolation will be of degree {\et
polydegree} if that variable is set, or 1.  If {\et polydegree} is 0,
then no interpolation will be done.  This is likely to give erroneous
results if the time scale is not monotonic.  This command is executed
when a {\vt .four} line is present in the input file and {\WRspice} is
being run in batch mode.

!!SEEALSO
datacmds
numdgt
spec
 
!! commands.tex 060314
!!KEYWORD
let
!!TITLE
let command
!!HTML 
    command: <tt>let</tt> [<i>vecname</i> [= <i>expr</i>]]
    [<i>vecname</i> = <i>expr</i> ...]

    <p>
    The <b>let</b> command is used to assign vectors.  With no
    arguments, the list of vectors from the current plot is printed,
    similar to the <a href="display"><b>display</b></a> command.  If
    one or more arguments appear without an assignment, information
    about the named vectors is printed, similar to the <b>display</b>
    command.  Otherwise, for each assignment, if <i>vecname</i> does
    not exist, a new vector is created with name <i>vecname</i> and
    value given by the expression <i>expr</i>.  An existing vector
    with the given name will be overwritten with new data.

    <p>
    In <i>WRspice</i> releases prior to 3.0.9, only a single
    assignment could appear in a <b>let</b> command.  In current
    releases, any number of assignemnts can be given in a single
    command line.  The assignments are performed left-to-right, so
    that expressions to the right of an assignment may make use of
    that assignment, i.e., forms like
    <blockquote>
    <tt>let a=1 b=a</tt>
    </blockquote>
    work properly.

    <p>
    None of the vector options such as default scale, color, etc. 
    that are read from the rawfile are preserved when a vector is
    created with the <b>let</b> command.

    <p>
    The <i>vecname</i> above can actually be in the
    <i>plotname</i>.<i>vecname</i> format, where the <i>plotname</i>
    is the name of a plot or one of the plot <a
    href="plotvec">aliases</a>.  In this case, only the indicated plot
    will be searched for a vector named <i>vecname</i>, and if not
    found, a new vector of that name will be created in the indicated
    plot.

    <p>
    If no plot is specified, a search for <i>vecname</i> will occur in
    the current plot, then the context plot if any, and finally the
    <tt>constants</tt> plot.  If a match is found, that vector will be
    reused, which may not be what is intended.  When a scrpt is run,
    the current plot at the time the script starts is saved as the
    "context plot".  Vectors created in the script before any change
    in the current plot are saved in the context plot.  If the script
    runs an analysis, the current plot will change, but the previously
    defined variables will still be available by name as the context
    plot will be searched as well as the current plot.

    If the intention is to use or create a vector in the current plot,
    the form
    <blockquote>
    <tt>let curplot.</tt><i>vecname</i> = <i>expr</i>
    </blockquote>
    should be used, if there is any chance of ambiguity.

    <p>
    The syntax
    <blockquote>
    <tt>let a[N] =</tt> <i>vec</i>
    </blockquote>
    with <tt>N</tt> a non-negative integer is valid.  If <i>vec</i> is
    a vector, then <tt>a[N] =</tt> <i>vec</i><tt>[0]</tt>, <tt>a[N+1]
    =</tt> <i>vec</i><tt>[1]</tt>, etc.  If <tt>a</tt> is undefined,
    <tt>a</tt> is defined, and new entries that are not explicitly set
    are zeroed.  The length of <tt>a</tt> is set or modified to
    accommodate <i>vec</i>.  The syntax <tt>a[0] =</tt> <i>vec</i> is
    also valid, and is equivalent to <tt>a =</tt> <i>vec</i>.  If
    <i>vec</i> is a vector, then <tt>a</tt> is a copy of <i>vec</i>. 
    If <i>vec</i> is a scalar (unit length vector), then <tt>a</tt> is
    also a scalar with the value of <i>vec</i>.

    <p>
    When assignment is from a scalar value, any SPICE <a
    href="spinput#number">number format</a> may be used.  That is, if
    alpha characters appear after a number, the initial characters are
    checked as a scale factor.  Recognized sequences are t, g, k, u,
    n, p, f, m, meg, mil.  Remaining characters are parsed as a units
    string.  This is all case insensitive.

    <p>
    The units suffix of a constant value is used to assign the units
    of any vector to which the constant is assigned.  This means, for
    example, in
    <blockquote>
        <tt>let a = v(1)/15o</tt>
    </blockquote>
    <tt>a</tt> has units of current (A).  Use the <a
    href="settype"><b>settype</b></a> command without arguments to see
    a list of recognized types.

    <p>
    The "let" is actually optional; the <b>let</b> command will be
    applied to a line with the second token being "=".  This is
    somewhat less efficient, however.
!!LATEX let commands.tex
The {\cb let} command is used to assign vectors.
\begin{quote}\vt
let [{\it vecname} [= {\it expr\/}]] [{\it vecname} = {\it expr\/} ...]
\end{quote}
With no arguments, the list of vectors from the current plot is
printed, similar to the {\cb display} command.  If one or more
arguments appear without an assignment, information about the named
vectors is printed, similar to the {\cb display} command.  Otherwise,
for each assignment, if {\it vecname} does not exist, a new vector is
created with name {\it vecname} and value given by the expression {\it
expr\/}.  An existing vector with the given name will be overwritten
with new data.

In {\WRspice} releases prior to 3.0.9, only a single assignment could
appear in a {\cb let} command.  In current releases, any number of
assignemnts can be given in a single command line.  The assignments
are performed left-to-right, so that expressions to the right of an
assignment may make use of that assignment, i.e., forms like
\begin{quote}
\vt let a=1 b=a
\end{quote}
work properly.

None of the vector options such as default scale, color, etc.  that
are read from the rawfile are preserved when a vector is created with
the {\cb let} command.

The {\it vecname} above can actually be in the {\it plotname\/}.{\it
vecname} format, where the {\it plotname} is the name of a plot or one
of the plot aliases as described in \ref{vectors}.  In this case, only
the indicated plot will be searched for a vector named {\it
vecname\/}, and if not found, a new vector of that name will be
created in the indicated plot.

If no plot is specified, a search for {\it vecname} will occur in the
current plot, then the context plot if any, and finally the {\vt
constants} plot.  If a match is found, that vector will be reused,
which may not be what is intended.  When a scrpt is run, the current
plot at the time the script starts is saved as the ``context plot''. 
Vectors created in the script before any change in the current plot
are saved in the context plot.  If the script runs an analysis, the
current plot will change, but the previously defined variables will
still be available by name as the context plot will be searched as
well as the current plot.

If the intention is to use or create a vector in the current plot,
the form
\begin{quote}
{\vt let curplot}.{\it vecname} {\vt =} {\it expr}
\end{quote}
should be used, if there is any chance of ambiguity.

The syntax
\begin{quote}
{\vt let a[N] = {\it vec\/}}
\end{quote}
with {\vt N} a non-negative integer, is valid.  If {\it vec\/} is a
vector, then {\vt a[N] = {\it vec\/}[0]}, {\vt a[N+1] = {\it
vec\/}[1]}, etc., If undefined, {\vt a} is defined, and new entries
that are not explicitly set are zeroed.  The length of {\vt a} is set
or modified to accommodate {\it vec\/}.  The syntax {\vt a[0] = {\it
vec\/}} is also valid, and is equivalent to {\vt a = {\it vec\/}}.  If
{\it vec\/} is a vector, then {\vt a} is a copy of {\it vec\/}.  If
{\it vec\/} is a scalar (unit length vector), then {\vt a} is also a
scalar with the value of {\it vec\/}. 

When assignment is from a scalar value, any SPICE number format may be
used.  That is, if alpha characters appear after a number, the initial
characters are checked as a scale factor.  Recognized sequences are t,
g, k, u, n, p, f, m, meg, mil.  Remaining characters are parsed as a
units string.  This is all case insensitive.

The units suffix of a constant value is used to assign the units
of any vector to which the constant is assigned.  This means, for
example, in
\begin{quote}\vt
    let a = v(1)/15o
\end{quote}
{\vt a} has units of current (A).  Use the {\cb settype} command
without arguments to see a list of recognized types.

The ``let'' is actually optional; the {\cb let} command will be
applied to a line with the second token being ``=''.  This is somewhat
less efficient, however.

!!SEEALSO
expressions
compose
setandlet
datacmds

!! commands.tex 012009
!!KEYWORD
linearize
!!TITLE
linearize command
!!HTML 
    command: <tt>linearize</tt> [<i>vecname</i> ...]

    <p>
    The <b>linearize</b> command is used to create linearized vectors
    from vectors whose scales are not evenly spaced.  The command will
    force data from a transient analysis to conform to a linear scale,
    if the plot has been created using raw timepoints.  This is the
    case only when the <a href="steptype"><tt>steptype</tt></a>
    variable is set to "<tt>nousertp</tt>.

    <p>
    The <b>linearize</b> command will create a new plot with all of
    the vectors in the current plot, or only those mentioned if
    arguments are given.  The new vectors will be interpolated onto a
    linear time scale, which is determined by the values of
    <tt>tstep</tt>, <tt>tstart</tt>, and <tt>tstop</tt> in the
    currently active transient analysis.  The currently loaded deck
    must include a transient analysis, or a <a href="tran"><b>tran</b></a>
    command may be run interactively, and the current plot must be
    from this transient analysis.  The variable <a
    href="polydegree"><tt>polydegree</tt></a> determines the degree of
    interpolation.
!!LATEX linearize commands.tex
This {\cb linearize} command is used to create linearized vectors from
vectors whose scales are not evenly spaced. 
\begin{quote}\vt
linearize [{\it vecname\/} ...]
\end{quote}
The command will force data from a transient analysis to conform to a
linear scale, if the plot has been created using raw timepoints.  This
is the case only when the {\et steptype} variable is set to ``{\vt
nousertp}''. 

The {\cb linearize} command will create a new plot with all of the
vectors in the current plot, or only those mentioned if arguments are
given.  The new vectors will be interpolated onto a linear time scale,
which is determined by the values of {\vt tstep}, {\vt tstart}, and
{\vt tstop} in the currently active transient analysis.  The currently
loaded deck must include a transient analysis, or a {\cb tran} command
may be run interactively, and the current plot must be from this
transient analysis.  The variable {\et polydegree} determines the
degree of interpolation.

!!SEEALSO
datacmds
 
!! commands.tex 012009
!!KEYWORD
pick
!!TITLE
pick command
!!HTML 
    command: <tt>pick</tt> <i>vecname offset period vector</i>
        [<i>vector</i> ...]

    <p>
    The <b>pick</b> command creates a new vector from elements of
    other vectors.
    The command creates a vector <i>vecname</i> and fills it with
    every <i>period</i>'th value starting with <i>offset</i> from the
    vectors.  The <i>offset</i> and <i>period</i> are integers.  For
    example, for
    <blockquote>
    <tt>pick xx 1 2 v1 v2</tt>
    </blockquote>
    we obtain
    <blockquote>
    <tt>xx[0] = v1[1]<br>
        xx[1] = v2[1]<br>
        xx[2] = v1[3]<br>
        xx[3] = v2[3]</tt>
    </blockquote>
    and so on.
!!LATEX pick commands.tex
The {\cb pick} command creates a new vector from elements of other vectors.
\begin{quote}\vt
pick {\it vecname offset period vector} [{\it vector ...\/}]
\end{quote}
The command creates a vector {\it vecname} and fills it with every
{\it period\/}'th value starting with {\it offset} from the vectors. 
The {\it offset} and {\it period} are integers.  For example, for
\begin{quote}\vt
    pick xx 1 2 v1 v2
\end{quote}
we obtain
\begin{quote}\vt
  xx[0] = v1[1]\\
  xx[1] = v2[1]\\
  xx[2] = v1[3]\\
  xx[3] = v2[3]\\
\end{quote}
and so on.

!!SEEALSO
cross
datacmds

!! commands.tex 032715
!!KEYWORD
seed
!!TITLE
seed command
!!HTML
   command: <tt>seed</tt> [<i>seed_integer</i>]

   <p>
    The <b>seed</b> command will reset the internal random number
    generator.  The <i>seed_integer</i>, if given, will be used to
    seed the new random number sequence.  This affects the <a
    href="statfuncs">statistical functions</a> and other functions
    that generate random values.  Setting the seed explicitly enables
    the sequence of "random" values returned from these functions to
    be repeatable (the default seed is random).
!!LATEX seed commands.tex
The {\cb seed} command will reset the internal random number generator.
\begin{quote}\vt
seed [{\it seed\_integer\/}]
\end{quote}
The {\it seed\_integer\/}, if given, will be used to seed the new
random number sequence.  This affects the statistical functions in
\ref{statfuncs} and other functions that generate random values. 
Setting the seed explicitly enables the sequence of ``random'' values
returned from these functions to be repeatable (the default seed is
random).

!!SEEALSO
compose
datacmds

!! commands.tex 022015
!!KEYWORD
setdim
!!TITLE
setdim command
!!HTML
    command: <tt>setdim</tt> [<i>numdims</i> [<i>dim</i> ...]]

    <p>
    The <b>setdim</b> command allows the dimensions of the current
    plot to be changed.

    <p>
    If given without arguments, the length and dimensions of the scale
    vector of the current plot are printed.  Otherwise, all arguments
    are non-negative numbers.  There should be <i>numdims</i>-1
    "<i>dims</i>" given.  The <i>numdims</i> is the new dimensionality
    of the plot.  Values of 0-8 are allowed.  The sub-dimensions that
    follow are integers 2 or larger.

    <p>
    The dimension list must be compatible with the existing plot
    dimensions in that the total number of points must remain the
    same, and the size of the basic vector (scale period) remains the
    same.

    <p>
    There is a special case where the <i>numdims</i> is the same as
    the vector length.  The plot will become multidimensional, with
    each dimension having one point.  There is no limit to the number
    of dimensions in this case.  Such vectors plot as collections of
    multi-colored points.  This type of plot is generated normally by,
    for example, use of the <a href="loop"><b>loop</b></a> command to
    repeat <a href="op">op analysis</a>.  Additional argumens to the
    command are ignored.

    <p>
    Giving <i>numdims</i> a value of 0 or 1 will set to "no"
    dimensionality, the status of a regualar vector.
!!LATEX setdim commands.tex
The {\cb setdim} command allows the dimensions of the current plot to
be changed.

\begin{quote}
{\vt setdim} [{\it numdims} [{\it dim} ...]]
\end{quote}
  
If given without arguments, the length and dimensions of the scale
vector of the current plot are printed.  Otherwise, all arguments are
non-negative numbers.  There should be {\it numdims\/}-1 ``{\it
dims}'' given.  The {\it numdims} is the new dimensionality of the
plot.  Values of 0--8 are allowed.  The sub-dimensions that follow are
integers 2 or larger.

The dimension list must be compatible with the existing plot
dimensions in that the total number of points must remain the same,
and the size of the basic vector (scale period) remains the same.

There is a special case where the {\it numdims} is the same as the
vector length.  The plot will become multidimensional, with each
dimension having one point.  There is no limit to the number of
dimensions in this case.  Such vectors plot as collections of
multi-colored points.  This type of plot is generated normally by, for
example, use of the {\cb loop} command to repeat op analysis. 
Additional argumens to the command are ignored.

Giving {\it numdims} a value of 0 or 1 will set to ``no''
dimensionality, the status of a regualar vector.

!!SEEALSO
datacmds

!! commands.tex 040410
!!KEYWORD
setplot
!!TITLE
setplot command
!!HTML 
    command: <tt>setplot</tt> [<i>plotname</i>]

    <p>
    The <b>setplot</b> command can be used to set the current plot, or
    to create a new, empty plot and make it the current plot.

    <p>
    Here, the word "plot" refers to a group of vectors that are the
    result of one <i>WRspice</i> simulation run.  Plots are created in
    memory during a simulation run, or by loading rawfile data.  When
    more than one file is loaded in, or more than one plot is present
    in one file, <i>WRspice</i> keeps them separate and only shows the
    vectors in the current plot.  One generally accesses a given plot
    by first making it the current plot.

    <p>
    The same functionality is available from the <b>Plots</b> button
    in the <b>Tools</b> menu.  The <b>setplot</b> command will set the
    current plot to the plot with the given <i>plotname</i>, or if no
    name is given, prompt the user with a menu.  The plots are named
    as they are loaded by reading in a rawfile, or created by running
    a simulation, with names like <tt>tran1</tt> or <tt>ac2</tt>. 
    These names are shown by the <b>setplot</b> and <a
    href="display"><b>display</b></a> commands and are used by other
    commands.

    <p>
    The <i>plotname</i> can also be a numerical index.  Plots are
    saved in the order created, and as listed by the <b>setplot</b>
    command without arguments, and in the <b>Plots</b> tool.  In
    addition to the plot name, the following constructs are
    recognized.  Below, <i>N</i> is an integer.

    <dl>
    <dt>-<i>N</i><dd>
    Use the <i>N</i>'th plot back from the current plot.  <i>N</i>
    must be 1 or larger.  For example, "<tt>setplot -1</tt>" will set
    the current plot to the previous plot.  The command will fail if
    there is no such plot.
    </dl>

    <dl>
    <dt>+<i>N</i><dd>
    This goes in the reverse direction, indicating a plot later in the
    list than the current plot.
    </dl>

    <dl>
    <dt><i>N</i><dd>
    An integer without <tt>+</tt> or <tt>-</tt> indicates an absolute
    index into the plot list, zero-based.  The value 0 will always
    indicate the "constants" plot, which is the first plot created (on
    program startup).
    </dl>

    <p>
    If the <i>plotname</i> ia "<tt>new</tt>", a new plot is created,
    which becomes the current plot.  This plot has no vectors.

    <p>
    The current plot can also be changed by resetting the <a
    href="curplot"><tt>curplot</tt></a> variable.  There are three
    read-only variables which are reset internally whenever the
    current plot changes.  Each contains a string describing a feature
    of the current plot.  These are <a
    href="curplotdate"><tt>curplotdate</tt></a>, <a
    href="curplotname"><tt>curplotname</tt></a>, and <a
    href="curplottitle"><tt>curplottitle</tt></a>.
!!LATEX setplot commands.tex
The {\cb setplot} command can be used to set the current plot, or to
create a new, empty plot and make it the current plot.
\begin{quote}\vt
setplot [{\it plotname\/}]
\end{quote}
Here, the word ``plot'' refers to a group of vectors that are the
result of one {\WRspice} simulation run.  Plots are created in memory
during a simulation run, or by loading rawfile data.  When more than
one file is loaded in, or more than one plot is present in one file,
{\WRspice} keeps them separate and only shows the vectors in the
current plot.  One generally accesses a given plot by first making it
the current plot. 

The same functionality is available from the {\cb Plots} button in the
{\cb Tools} menu.  The {\cb setplot} command will set the current plot
to the plot with the given {\it plotname\/}, or if no name is given,
prompt the user with a menu.  The plots are named as they are loaded,
by reading in a rawfile, or created by running a simulation, with
names like {\vt tran1} or {\vt ac2}.  These names are shown by the
{\cb setplot} and {\cb display} commands and are used by other
commands.

The {\it plotname} can also be a numerical index.  Plots are saved in
the order created, and as listed by the {\cb setplot} command without
arguments, and in the {\cb Plots} tool.  In addition to the plot name,
the following constructs are recognized.  Below, {\it N} is an
integer.

\begin{description}
\item{\vt -}{\it N}\\
Use the {\it N\/}'th plot back from the current plot.  {\it N} must be
1 or larger.  For example, ``{\vt setplot -1}'' will set the current
plot to the previous plot.  The command will fail if there is no such
plot.

\item{\vt +}{\it N}\\
This goes in the reverse direction, indicating a plot later in the 
list than the current plot.

\item{\it N}\\
An integer without {\vt +} or {\vt -} indicates an absolute index into
the plot list, zero-based.  The value 0 will always indicate the
``constants'' plot, which is the first plot created (on program
startup).
\end{description}

If the {\it plotname} is ``{\vt new}'', a new plot is created, which
becomes the current plot.  This plot has no vectors.

The current plot can also be changed by resetting the {\et curplot}
variable.  There are three read-only variables which are reset
internally whenever the current plot changes.  Each contains a string
describing a feature of the current plot.  These are {\et
curplotdate}, {\et curplotname}, and {\et curplottitle}.
 
!!SEEALSO
datacmds

!! commands.tex 012009
!!KEYWORD
setscale
!!TITLE
setscale command
!!HTML 
    command: <tt>setscale</tt> [<i>plot or vector</i>] [<i>vectors</i> ...]

    <p>
    The <b>setscale</b> command is used to set the vector used as a
    scale when plotting other vectors.  Each plot has a default scale,
    which can be set with this command.  Each vector has a scale
    variable, which if set will override the default scale of the
    plot.  These also can be set with this command.  This command
    takes as input the names of a plot and a new scale vector in that
    plot, or the names of vectors from the current plot.  The wildcard
    forms using "all" and the plot prefix form <i>plot.vector</i> are
    not allowd in this command.  If only one argument is given, i.e.,
    <blockquote>
    <tt>setscale</tt> <i>vector</i>
    </blockquote>
    then <i>vector</i> is assigned as the default scale of the current
    plot.  The vector must already exist in the current plot.

    <p>
    If two arguments are given, the first argument is initially
    interpreted as the name of a plot, and the second argument is the
    name of a vector in that plot to use as the default scale.  The
    plot has names like "tran1" or "ac2" and the vector must exist in
    that plot.

    <p>
    If the first argument is not a plot name, or there are more than
    two arguments, the arguments are expected to be vectors in the
    current plot, and the last vector will be assigned as the scale
    for the other listed vectors.

    <p>
    The scales assigned to vectors can be removed by assigning the
    vector that is the current default scale for the plot, or the
    scale vector name given can have the special names "<tt>none</tt>"
    or "<tt>default</tt>".  The scale for plots can't be removed,
    since a plot must always have a default scale (if any vectors are
    defined).

    <p>
    The <a href="let"><b>let</b></a> command without arguments lists
    the vectors and will show the scales, if any.
!!LATEX setscale commands.tex
The {\cb setscale} command is used to set the vector used as a scale
when plotting other vectors.
\begin{quote}\vt
setscale [{\it plot\/} or {\it vector\/}] [{\it vectors} ...]
\end{quote}
Each plot has a default scale, which can be set with this command. 
Each vector has a scale variable, which if set will override the
default scale of the plot.  These also can be set with this command. 
This command takes as input the names of a plot and a new scale vector
in that plot, or the names of vectors from the current plot.  The
wildcard forms using ``{\vt all}'' and the plot prefix form {\it
plot\/}.{\it vector} are not allowed in this command.  If only one
argument is given, i.e.
\begin{quote}
{\vt setscale} {\it vector}
\end{quote}
then {\it vector} is assigned as the default scale of the current plot.
The vector must already exist in the current plot.

If two arguments are given, the first argument is initially
interpreted as the name of a plot, and the second argument is the name
of a vector in that plot to use as the scale.  The plot has names like
``{\vt tran1}'' or ``{\vt ac2}'' and the {\it vector} must exist in
that plot.

If the first argument is not a plot name, or there are more than two
arguments, the arguments are expected to be vectors in the current
plot, and the last vector will be assigned as the scale for the other
listed vectors.

The scales assigned to vectors can be removed by assigning the vector
that is the current default scale for the plot, or the scale vector
name given can have the special names ``{\vt none}'' or ``{\vt
default}''.  The scale for plots can't be removed, since a plot must
always have a default scale (if any vectors are defined).

The {\cb let} command without arguments lists the vectors and will
show the scales, if any.

!!SEEALSO
expressions

!! commands.tex 012009
!!KEYWORD
settype
!!TITLE
settype command
!!HTML 
    command: <tt>settype</tt> [<i>type</i>] [<i>vector</i> ...]

    <p>
    The <b>settype</b> command is used to change the data types of the
    vectors in a plot.  The command will change the type of the named
    vectors to <i>type</i>.  With no arguments, the list of recognized
    types and abbreviations is printed.  The <i>type</i> field can
    consist of a single name, or a single token containing a list of
    abbreviations.  The token list can contain a digit power after an
    abbreviation, and a single '/' for denominator units.  Examples
    are "F/M2", "Wb2/Hz".  Units of vectors generated during analysis
    are set automatically.

    <p>
    The <i>WRspice</i> <a href="spinput#number">numerical input</a>
    format allows the type to be specified when a value is given to
    <i>WRspice</i>, either interactively or in an input file.

    <p>
    Type names can also be found in the description of the <a
    href="rawfilefmt">rawfile</a> format, or they may be defined with
    the <a href="deftype"><b>deftype</b></a> command.  However, only
    the primitive types listed below propagate through expressions and
    are recognized by the <i>WRspice</i> type-propagation system.

    The primitive built-in types and abbreviations are:
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th align="left>time</th><td>S</td></tr>
    <tr><th align="left>frequency</th><td>Hz</td></tr>
    <tr><th align="left>voltage</th><td>V</td></tr>
    <tr><th align="left>current</th><td>A</td></tr>
    <tr><th align="left>charge</th><td>Cl</td></tr>
    <tr><th align="left>flux</th><td>Wb</td></tr>
    <tr><th align="left>capacitance</th><td>F</td></tr>
    <tr><th align="left>inductance</th><td>H</td></tr>
    <tr><th align="left>resistance</th><td>O</td></tr>
    <tr><th align="left>conductance</th><td>Si</td></tr>
    <tr><th align="left>length</th><td>M</td></tr>
    <tr><th align="left>area</th><td>M2</td></tr>
    <tr><th align="left>temperature</th><td>C</td></tr>
    <tr><th align="left>power</th><td>W</td></tr>
    </table>
 
    <p>
    The codes from the rawfile are:
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th>Name         <th> Description          <th> SPICE2 Numeric Code</tr>
    <tr><td><tt>notype</tt>       <td> Dimensionless value  <td> 0</tr>
    <tr><td><tt>time</tt>         <td> Time                 <td> 1</tr>
    <tr><td><tt>frequency</tt>    <td> Frequency            <td> 2</tr>
    <tr><td><tt>voltage</tt>      <td> Voltage              <td> 3</tr>
    <tr><td><tt>current</tt>      <td> Current              <td> 4</tr>
    <tr><td><tt>output-noise</tt> <td> SPICE2 .noise result <td> 5</tr>
    <tr><td><tt>input-noise</tt>  <td> SPICE2 .noise result <td> 6</tr>
    <tr><td><tt>HD2</tt>          <td> SPICE2 .disto result <td> 7</tr>
    <tr><td><tt>HD3</tt>          <td> SPICE2 .disto result <td> 8</tr>
    <tr><td><tt>DIM2</tt>         <td> SPICE2 .disto result <td> 9</tr>
    <tr><td><tt>SIM2</tt>         <td> SPICE2 .disto result <td> 1</tr>
    <tr><td><tt>DIM3</tt>         <td> SPICE2 .disto result <td> 11</tr>
    <tr><td><tt>pole</tt>         <td> SPICE3 pz result     <td> 12</tr>
    <tr><td><tt>zero</tt>         <td> SPICE3 pz result     <td> 13</tr>
    </table>
!!LATEX settype commands.tex
The {\cb settype} command is used to change the data types
of the vectors in a plot.
\begin{quote}\vt
settype [{\it type\/}] [{\it vector} ...]
\end{quote}
The command will change the type of the named vectors to {\it type\/}. 
With no arguments, the list of recognized types and abbreviations is
printed.  The {\it type} field can consist of a single name, or a
single token containing a list of abbreviations.  The token list can
contain a digit power after an abbreviation, and a single `/' for
denominator units.  Examples are ``F/M2'', ``Wb2/Hz''.  Units of
vectors generated during analysis are set automatically.

The {\WRspice} numerical input format (see \ref{number}) allows the
type to be specified when a value is given to {\WRspice}, either
interactively or in an input file.

Type names can also be found in the description of the rawfile format
in \ref{rawfilefmt}, or they may be defined with the {\cb deftype}
command.  However, only the primitive types listed below propagate
through expressions and are recognized by the {\WRspice}
type-propagation system.

The primitive built-in types and abbreviations are:
\begin{quote}
\begin{tabular}{|l|c|}\hline
\vt time        & S\\ \hline
\vt frequency   & Hz\\ \hline
\vt voltage     & V\\ \hline
\vt current     & A\\ \hline
\vt charge      & Cl\\ \hline
\vt flux        & Wb\\ \hline
\vt capacitance & F\\ \hline
\vt inductance  & H\\ \hline
\vt resistance  & O\\ \hline
\vt conductance & Si\\ \hline
\vt length      & M\\ \hline
\vt area        & M2\\ \hline
\vt temperature & C\\ \hline
\vt power       & W\\ \hline
\end{tabular}
\end{quote}

The codes from the rawfile are:
\begin{quote}
\begin{tabular}{|l|c|c|}\hline
Name         & Description          & SPICE2 Numeric Code\\ \hline\hline
{\vt notype}       & Dimensionless value  & 0\\ \hline
{\vt time}         & Time                 & 1\\ \hline
{\vt frequency}    & Frequency            & 2\\ \hline
{\vt voltage}      & Voltage              & 3\\ \hline
{\vt current}      & Current              & 4\\ \hline
{\vt output-noise} & SPICE2 .noise result & 5\\ \hline
{\vt input-noise}  & SPICE2 .noise result & 6\\ \hline
{\vt HD2}          & SPICE2 .disto result & 7\\ \hline
{\vt HD3}          & SPICE2 .disto result & 8\\ \hline
{\vt DIM2}         & SPICE2 .disto result & 9\\ \hline
{\vt SIM2}         & SPICE2 .disto result & 10\\ \hline
{\vt DIM3}         & SPICE2 .disto result & 11\\ \hline
{\vt pole}         & SPICE3 pz result     & 12\\ \hline
{\vt zero}         & SPICE3 pz result     & 13\\ \hline
\end{tabular}
\end{quote}

!!SEEALSO
datacmds

!! commands.tex 012009
!!KEYWORD
spec
!!TITLE
spec command
!!HTML 
    command: <tt>spec</tt> <i>start_freq stop_freq step_freq vector</i> [...]

    <p>
    This is based on a SPICE3 <b>spec</b> command by Anthony Parker of
    Macquarie University in Sydney Australia, which is available as
    part of the patch set from <a
    href="http://www.elec.mq.edu.au/cnerf/spice/spice.html">
    http://www.elec.mq.edu.au/cnerf/spice/spice.html</a>.

    <p>
    The command will create a new plot consisting of the Fourier
    transforms of the vectors given on the command line.  Each vector
    given should be a transient analysis result, i.e., have time as a
    scale, and each should have the same time scale.  The Fourier
    transform will be computed using the frequency parameters given,
    and will use a window function as given with the
    <tt>specwindow</tt> variable.

    The following variables control operation of the <b>spec</b>
    command.  Each can be set with the <a href="set"><b>set</b></a>
    command, or equivalently from the <b>Fourier</b> tab of the <a
    href="cmdopts">Command Options</a> tool.

    <dl>
    <dt><a href="spectrace"><tt>spectrace</tt></a><dd>
    This enables messages to be printed during Fourier analysis with the
    <b>spec</b> command, for debugging purposes.
    </dl>

    <dl>
    <dt><a href="specwindow"><tt>specwindow</tt></a><dd>
    This variable is set to one of the following strings, which will
    determine the type of windowing used for the Fourier transform in
    the <b>spec</b> command.  If not set, the default is <tt>hanning</tt>.

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><tt>bartlet</tt></td>    <td>Bartlet (triangle) window</td></tr>
    <tr><td><tt>blackman</tt></td>   <td>Blackman order 2 window</td></tr>
    <tr><td><tt>cosine</tt></td>     <td>Hanning (cosine) window</td></tr>
    <tr><td><tt>gaussian</tt></td>   <td>Gaussian window</td></tr>
    <tr><td><tt>hamming</tt></td>    <td>Hamming window</td></tr>
    <tr><td><tt>hanning</tt></td>    <td>Hanning (cosine) window</td></tr>
    <tr><td><tt>none</tt></td>       <td>No windowing</td></tr>
    <tr><td><tt>rectangular</tt></td> <td>Rectangular window</td></tr>
    <tr><td><tt>triangle</tt></td>   <td>Bartlet (triangle) window</td></tr>
    </table>
    </dl>

    <dl>
    <dt><a href="specwindoworder"><tt>specwindoworder</tt></a><dd>
    This can be set to an integer in the range 2-8.  This sets the
    order when the gaussian window is used in the <b>spec</b> command. 
    If not set, order 2 is used.
    </dl>
!!LATEX spec commands.tex
The {\cb spec} command will create a new plot consisting of the
Fourier transforms of the vectors given on the command line.
\begin{quote}\vt
spec {\it start\_freq stop\_freq step\_freq vector} [...]
\end{quote}
This is based on a SPICE3 {\cb spec} command by Anthony Parker of
Macquarie University in Sydney Australia, which is available as part
of the patch set from\\
{\vt http://www.elec.mq.edu.au/cnerf/spice/spice.html}.

The command will create a new plot consisting of the Fourier
transforms of the vectors given on the command line.  Each vector
given should be a transient analysis result, i.e., have time as a
scale, and each should have the same time scale.  The Fourier
transform will be computed using the frequency parameters given, and
will use a window function as given with the {\et specwindow}
variable.

The following variables control operation of the {\cb spec} command. 
Each can be set with the {\cb set} command, or equivalently from the
{\cb Fourier} tab of the {\cb Commands} tool.

\begin{description}
\index{spectrace variable}
\item{\et spectrace}\\
This enables messages to be printed during Fourier analysis with the
{\cb spec} command, for debugging purposes.

\index{specwindow variable}
\item{\et specwindow}\\
This variable is set to one of the following strings, which will
determine the type of windowing used for the Fourier transform in the
{\cb spec} command.  If not set, the default is {\vt hanning}.

\begin{tabular}{ll}
\vt bartlet & Bartlet (triangle) window\\
\vt blackman & Blackman order 2 window\\
\vt cosine & Hanning (cosine) window\\
\vt gaussian & Gaussian window\\
\vt hamming & Hamming window\\
\vt hanning & Hanning (cosine) window\\
\vt none & No windowing\\
\vt rectangular & Rectangular window\\
\vt triangle & Bartlet (triangle) window\\
\end{tabular}

\index{specwindoworder variable}
\item{\et specwindoworder}\\
This can be set to an integer in the range 2--8.  This sets the order
when the gaussian window is used in the {\cb spec} command.  If not
set, order 2 is used.
\end{description}

!!SEEALSO
fourier
datacmds
 
!! commands.tex 012009
!!KEYWORD
undefine
!!TITLE
undefine command
!!HTML 
    command: <tt>undefine</tt> <i>word</i> [...]

    <p>
    The <b>undefine</b> command is used to undefine user-defined
    functions that have previously been defined with the <a
    href="define"><b>define</b></a> command.  The command deletes the
    definitions of the user-defined functions passed as arguments.  If
    the argument is "*", then all macro functions are deleted.  Note
    that all functions with the given names are removed, so there is
    no way to delete a function with a particular argument count
    without deleting all functions with that name.
!!LATEX undefine commands.tex
The {\cb undefine} command is used to undefine user-defined functions
that have previously been defined with the {\cb define} command.
\begin{quote}\vt
undefine {\it word} [...]
\end{quote}
The command deletes the definitions of the user-defined functions
passed as arguments.  If the argument is ``*'', then all macro
functions are deleted.  Note that all functions with the given names
are removed, so there is no way to delete a function with a particular
argument count without deleting all functions with that name.
 
!!SEEALSO
expressions
datacmds

!! commands.tex 012009
!!KEYWORD
unlet
!!TITLE
unlet command
!!HTML 
    command: <tt>unlet</tt> <i>vecname</i> [...]

    <p>
    The <b>unlet</b> command will delete the vectors listed as
    arguments.  The current plot is assumed, though the
    <i>plot.vector</i> notation is accepted.  When the default scale
    vector is deleted, another random vector will become the default
    scale.  The names can be "all", indicating that all matching
    vectors should be removed.  If the vector name is "all", all
    vectors in the plot are removed, but the plot itself is not
    deleted.  Giving "all.all" will clear the vectors in all plots
    (not very useful).  To delete a plot, use the <a
    href="destroy"><b>destroy</b></a> or <a
    href="free"><b>free</b></a> commands.
!!LATEX unlet commands.tex
The {\cb unlet} command will delete the vectors listed as arguments. 
\begin{quote}\vt
unlet {\it vecname} [...]
\end{quote}
The current plot is assumed, though the {\it plot\/}.{\it vector}
notation is accepted.  When the default scale vector is deleted,
another random vector will become the default scale.  The names can be
``{\vt all}'', indicating that all matching vectors should be removed. 
If the vector name is ``{\vt all}'', all vectors in the plot are
removed, but the plot itself is not deleted.  Giving ``{\vt all.all}''
will clear the vectors in all plots (not very useful).  To delete a
plot, use the {\cb destroy} or {\cb free} commands.

!!SEEALSO
let
datacmds

!! ----------------------------------------------------------------------------
!! commands.tex 062515
!!KEYWORD
misccmds
!!TITLE
Miscellaneous Commands
!!HTML 
    These commands perform miscellaneous functions.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th colspan=2>Miscellaneous Commands</th></tr>
    <tr><td><a href="bug"><b>bug</b></a></td>
      <td>Submit bug report</td></tr>
    <tr><td><a href="help"><b>help</b></a></td>
      <td>Enter help system</td></tr>
    <tr><td><a href="helpreset"><b>helpreset</b></a></td>
      <td>Clear help system cache</td></tr>
    <tr><td><a href="qhelp"><b>qhelp</b></a></td>
      <td>Print command summaries</td></tr>
    <tr><td><a href="quit"><b>quit</b></a></td>
      <td>Exit program</td></tr>
    <tr><td><a href="rusage"><b>rusage</b></a></td>
      <td>Print resource usage statistics</td></tr>
    <tr><td><a href="stats"><b>stats</b></a></td>
      <td>Print resource usage statistics</td></tr>
    <tr><td><a href="version"><b>version</b></a></td>
      <td>Print program version</td></tr>
    </table>
!!LATEX misccmds commands.tex
These commands perform miscellaneous functions.

\begin{tabular}{|l|l|}\hline
\multicolumn{2}{|c|}{Miscellaneous Commands}\\ \hline
\cb bug & Submit bug report\\ \hline
\cb help & Enter help system\\ \hline
\cb helpreset & Clear help system cache\\ \hline
\cb qhelp & Print command summaries\\ \hline
\cb quit & Exit program\\ \hline
\cb rusage & Print resource usage statistics\\ \hline
\cb stats & Print resource usage statistics\\ \hline
\cb version & Print program version\\ \hline
\end{tabular}

!!SEEALSO
commands

!! commands.tex 012209
!!KEYWORD
bug
!!TITLE
bug command
!!HTML 
    command: <tt>bug</tt>
 
    <p>
    The <b>bug</b> command facilitates sending bug reports and other
    messages to the <i>WRspice</i> administrator.  Issuing the
    <b>bug</b> command will pop up a mail editing window if graphics
    is available, or will allow a message to be entered on the command
    line if not.  The <a href="environment">environment</a> variable
    <b>SPICE_BUGADDR</b> is used to set the internet address to which
    bug reports are sent (this can be changed in the pop-up mail
    editor window).  If not set, the report is sent to the Whiteley
    Research technical support staff.  This command takes no
    arguments.

    <p>
    The mail editor window can also be displayed by pressing the
    <b>WR</b> button in the <a href="toolbar"><b>Tool Control</b></a>
    window.
!!LATEX bug commands.tex
The {\cb bug} command facilitates sending bug reports and other
messages to the {\WRspice} administrator.  Issuing the {\cb bug}
command will pop up a mail editing window if graphics is available,
or will allow a message to be entered on the command line if not. 
The environment variable {\et SPICE\_BUGADDR} is used to set the
internet address to which bug reports are sent (this can be changed
in the pop-up mail editor window).  If not set, the report is sent
to the Whiteley Research technical support staff.  This command
takes no arguments.

The mail editor window can also be displayed by pressing the {\cb WR}
button in the {\cb Tool Control} window.
 
!!SEEALSO
misccmds

!! commands.tex 012209
!!KEYWORD
help
!!TITLE
help command
!!HTML
    command: <tt>help</tt> [-c <tt>|</tt> [<i>topic</i>]]

    <p>
    The <b>help</b> command brings up a help window describing the
    topic keyword passed as an argument to the command, or the
    top-level entry if no argument is given.  When graphics is not
    available, the help text is presented in a text-only format on the
    terminal.  The HTML to ASCII text converter only handles the most
    common HTML tags, so some descriptions may look a little strange. 
    The figures (and all images) are not shown, and links are not
    available, except for the "subtopics" and "references" lists.

    <p>
    The help data files are found in directories specified in the <a
    href="helppath"><tt>helppath</tt></a> variable, or from the
    <b>SPICE_HLP_PATH</b> <a href="environment">environment</a>
    variable.  If for some reason the help directory is not found, a
    very minimal internal text-mode help system will be provided.  The
    single character '?' is internally aliased to "<tt>help</tt>". 
 
    <p>
    If the single argument "<tt>-c</tt>" is given, the internal topic
    hash tables are cleared.  Since the topics are hashed as offsets
    into the files, if a topic text changes, the offsets will be
    incorrect.  After changes are made to a help file, or new help
    files are added, if in <i>WRspice</i> and the help database has
    already been cached by viewing any help topic, giving "<tt>help
    -c</tt>" will ensure that new topics are found and present topics
    display correctly.  This is the same effect as giving the
    <b>helpreset</b> command.
 
    <p>
    The <a href="helpinitxpos"><tt>helpinitxpos</tt></a> variable
    specifies the distance in pixels from the left edge of the screen
    to the left edge of the help window, when it first appears.  If
    not set, the value taken is 100 pixels.  The <a
    href="helpinitypos"><tt>helpinitypos</tt><a> variable specifies
    the distance in pixels from the top edge of the screen to the top
    edge of the help window, when it first appears.  If not set, the
    value taken is 100 pixels.
!!LATEX help commands.tex
The {\cb help} command brings up a help window describing the topic
keyword passed as an argument to the command, or the top-level entry
if no argument is given.
\begin{quote}\vt
help [-c | {\it topic\/}]
\end{quote}
When graphics is not available, the help text is presented in a
text-only format on the terminal.  The HTML to ASCII text converter
only handles the most common HTML tags, so some descriptions may look
a little strange.  The figures (and all images) are not shown, and
links are not available, except for the ``subtopics'' and
``references'' lists.

The help data files are found in directories specified in the {\et
helppath} variable, or from the\\ {\et SPICE\_HLP\_PATH} environment
variable.  If for some reason the help directory is not found, a very
minimal internal text-mode help system will be provided.  The single
character `{\vt ?}' is internally aliased to ``{\vt help}''.

If the single argument ``{\vt -c}'' is given, the internal topic hash
tables are cleared.  Since the topics are hashed as offsets into the
files, if a topic text changes, the offsets will be incorrect.  After
changes are made to a help file, or new help files are added, if in
{\WRspice} and the help database has already been cached by viewing
any help topic, giving ``{\vt help -c}'' will ensure that new topics
are found and present topics display correctly.  This is the same
effect as giving the {\cb helpreset} command.

The {\et helpinitxpos} variable specifies the distance in pixels from
the left edge of the screen to the left edge of the help window, when
it first appears.  If not set, the value taken is 100 pixels.  The
{\et helpinitypos} variable specifies the distance in pixels from the
top edge of the screen to the top edge of the help window, when it
first appears.  If not set, the value taken is 100 pixels.

See \ref{helpsys} for more information about the {\WRspice} help
system.

!!SEEALSO
helpreset
helpsys
misccmds

!! commands.tex 012209
!!KEYWORD
helpreset
!!TITLE
helpreset command
!!HTML
    command: <tt>helpreset</tt>

    <p>
    This will clear the internal topic cache used by the help system. 
    The cache saves topic references as offsets into the help
    (<tt>.hlp</tt>) files, so that if the text of a help file is
    modified, the offsets are probably no longer valid.  This function
    is useful when editing the text of a help file, while viewing the
    entry in <i>WRspiceic</i>.  Use this function when editing is
    complete, before reloading the topic into the viewer.  Although
    the offset to the present topic does not change when editing, so
    that simply reloading would look fine, other topics in the file
    that come after the present topic would not display correctly if
    the offsets change.

    <p>
    This is the same effect as giving the <b>help</b> command with the
    <tt>-c</tt> option.
!!LATEX helpreset commands.tex
This will clear the internal topic cache used by the help system.  The
cache saves topic references as offsets into the help ({\vt .hlp})
files, so that if the text of a help file is modified, the offsets are
probably no longer valid.  This function is useful when editing the
text of a help file, while viewing the entry in {\WRspice}.  Use this
function when editing is complete, before reloading the topic into the
viewer.  Although the offset to the present topic does not change when
editing, so that simply reloading would look fine, other topics in the
file that come after the present topic would not display correctly if
the offsets change.

This is the same effect as giving the {\cb help} command with the {\vt
-c} option.

!!SEEALSO
help
misccmds

!! commands.tex 012209
!!KEYWORD
qhelp
!!TITLE
qhelp command
!!HTML 
    command: <tt>qhelp</tt> [<i>command_list</i>]

    <p>
    The <b>qhelp</b> command prints a brief description of each
    command listed as an argument.  If no arguments are given, all
    commands are listed.  This is not part of the main help system. 
!!LATEX qhelp commands.tex
The {\cb qhelp} command prints a brief description of each command
listed as an argument.  If no arguments are given, all commands are
listed.  This is not part of the main help system.
 
!!SEEALSO
misccmds

!! commands.tex 012209
!!KEYWORD
quit
!!TITLE
quit command
!!HTML 
    command: <tt>quit</tt>

    <p>
    The <b>quit</b> command terminates the <i>WRspice</i> session.  If
    there are circuits that are in the middle of a simulation, or
    plots that have not been saved in a file, the user is reminded of
    this and asked to confirm.  The variable <a
    href="noaskquit"><tt>noaskquit</tt></a> disables this. 
    <i>WRspice</i> can also be terminated from the <b>Quit</b> button
    in the <b>File</b> menu of the <a href="toolbar"><b>Tool
    Control</b></a> window.  The command takes no arguments.
!!LATEX quit commands.tex
The {\cb quit} command terminates the {\WRspice} session.  If there
are circuits that are in the middle of a simulation, or plots that
have not been saved in a file, the user is reminded of this and
asked to confirm.  The variable {\et noaskquit} disables this. 
{\WRspice} can also be terminated from the {\cb Quit} button in the
{\cb File} menu of the {\cb Tool Control} window.  The command takes
no arguments.
 
!!SEEALSO
misccmds
 
!! commands.tex 011909
!!KEYWORD
version
!!TITLE
version command
!!HTML 
    command: <tt>version</tt> [<i>version_name</i>]

    <p>
    The <b>version</b> command is used to determine the version of
    <i>WRspice</i> running.  With no arguments, this command prints
    out the current version of <i>WRspice</i>.  If there are
    arguments, it compares the current version with the given version
    and prints a warning if they differ.  A version command is usually
    included in the <a href="rawfilefmt">rawfile</a>.
!!LATEX version commands.tex
The {\cb version} command is used to determine the version of {\WRspice}
running.
\begin{quote}\vt
version [{\it version\_name\/}]
\end{quote}
With no arguments, this command prints out the current version of
{\WRspice}.  If there are arguments, it compares the current version
with the given version and prints a warning if they differ.  A version
command is usually included in the rawfile.

\input{variables}
 
!!SEEALSO
misccmds

